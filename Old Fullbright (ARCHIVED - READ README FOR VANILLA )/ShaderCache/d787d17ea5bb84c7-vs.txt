//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Oct 31 08:06:52 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// ATTRIBUTE                0   xyzw        0     NONE   float   xyz
// SV_VertexID              0   x           1   VERTID    uint   x
// SV_InstanceID            0   x           2   INSTID    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// PACKED_EYE_INDEX         0   x           1     NONE    uint   x
// SV_POSITION              0   xyzw        2      POS   float   xyzw
// SV_ClipDistance          1   x           3  CLIPDST   float   x
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -1.000000, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 1.000000} }
dcl_constantbuffer cb0[8], immediateIndexed
dcl_constantbuffer cb1[166], immediateIndexed
dcl_constantbuffer cb2[4], immediateIndexed
dcl_constantbuffer cb3[164], immediateIndexed
dcl_constantbuffer cb4[1], immediateIndexed
dcl_resource_buffer (float,float,float,float) t0
dcl_input v0.xyz
dcl_input_sgv v1.x, vertex_id
dcl_input_sgv v2.x, instance_id
dcl_output o0.xyzw
dcl_output o1.x
dcl_output_siv o2.xyzw, position
dcl_output_siv o3.x, clip_distance
dcl_temps 9
if_nz cb0[7].z
  mov r0.x, cb1[165].w
else
  and r0.x, v2.x, l(1)
endif
if_z r0.x
  mov r1.x, cb1[0].x
  mov r1.y, cb1[1].x
  mov r1.z, cb1[2].x
  mov r1.w, cb1[3].x
  mov r2.x, cb1[0].y
  mov r2.y, cb1[1].y
  mov r2.z, cb1[2].y
  mov r2.w, cb1[3].y
  mov r3.x, cb1[0].z
  mov r3.y, cb1[1].z
  mov r3.z, cb1[2].z
  mov r3.w, cb1[3].z
  mov r4.x, cb1[0].w
  mov r4.y, cb1[1].w
  mov r4.z, cb1[2].w
  mov r4.w, cb1[3].w
  mov r0.yzw, cb1[62].xxyz
  mov r5.x, cb1[163].y
else
  mov r1.x, cb3[0].x
  mov r1.y, cb3[1].x
  mov r1.z, cb3[2].x
  mov r1.w, cb3[3].x
  mov r2.x, cb3[0].y
  mov r2.y, cb3[1].y
  mov r2.z, cb3[2].y
  mov r2.w, cb3[3].y
  mov r3.x, cb3[0].z
  mov r3.y, cb3[1].z
  mov r3.z, cb3[2].z
  mov r3.w, cb3[3].z
  mov r4.x, cb3[0].w
  mov r4.y, cb3[1].w
  mov r4.z, cb3[2].w
  mov r4.w, cb3[3].w
  mov r0.yzw, cb3[62].xxyz
  mov r5.x, cb3[163].y
endif
mul r5.yzw, v0.yyyy, cb2[1].xxyz
mad r5.yzw, cb2[0].xxyz, v0.xxxx, r5.yyzw
mad r5.yzw, cb2[2].xxyz, v0.zzzz, r5.yyzw
add r6.xyz, r0.yzwy, cb2[3].xyzx
add r5.yzw, r5.yyzw, r6.xxyz
iadd r6.x, v1.x, cb0[7].y
imul null, r6.x, r6.x, cb4[0].y
ld_indexable(buffer)(float,float,float,float) r6.xy, r6.xxxx, t0.xyzw
add_sat r6.z, -r6.y, l(1.000000)
add r7.xyzw, -r0.zyzw, r5.zyzw
mul r7.xyzw, r7.xyzw, l(0.000976562500, 0.005000, 0.005000, 0.005000)
mad r7.xyzw, cb1[132].zzzz, l(-0.150000, -0.150000, -0.150000, -0.150000), r7.xyzw
add r7.xyzw, r7.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
frc r7.xyzw, r7.xyzw
mad r7.xyzw, r7.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
mad r8.xyzw, -|r7.xyzw|, l(2.000000, 2.000000, 2.000000, 2.000000), l(3.000000, 3.000000, 3.000000, 3.000000)
mul r7.xyzw, |r7.xyzw|, |r7.xyzw|
mul r0.yzw, r8.yyzw, r7.yyzw
dp3 r0.y, r0.yzwy, r0.yzwy
sqrt r0.y, r0.y
mad r0.y, r7.x, r8.x, r0.y
mul r0.y, r0.y, l(6.28318548)
sincos r7.x, r8.x, r0.y
mul r0.yz, r7.xxxx, l(0.000000, -10.000000, 0.000000, 0.000000)
mad r0.yz, r8.xxxx, l(0.000000, 0.000000, 10.000000, 0.000000), r0.yyzy
add r0.yz, r0.yyzy, l(0.000000, 0.000000, -10.000000, 0.000000)
mul r7.yz, r6.zzzz, r0.yyzy
mov r7.xw, l(0,0,0,1.000000)
mad r7.xyz, l(0.200000, 0.200000, 0.200000, 0.000000), r7.xyzx, r5.yzwy
dp4 r1.x, r7.xyzw, r1.xyzw
dp4 r1.y, r7.xyzw, r2.xyzw
dp4 r1.z, r7.xyzw, r3.xyzw
dp4 r1.w, r7.xyzw, r4.xyzw
or r0.y, cb0[0].x, cb0[7].z
if_nz r0.y
  mov r2.x, icb[r0.x + 0].x
  mov r2.y, l(1.000000)
  dp2 o3.x, r1.xwxx, r2.xyxx
  mul r0.y, r5.x, l(0.500000)
  mul r0.z, r1.w, icb[r0.x + 0].x
  mad r0.w, -r5.x, l(0.500000), l(1.000000)
  mul r0.z, r0.w, r0.z
  mad r1.x, r1.x, r0.y, r0.z
else
  mov o3.x, l(0)
endif
movc r0.y, cb0[0].x, l(-0.000000), l(0)
or o1.x, r0.x, r0.y
mov o0.xy, r6.xyxx
mov o0.zw, l(0,0,0,0)
mov o2.xyzw, r1.xyzw
ret
// Approximately 0 instruction slots used
