//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Wed Oct 23 20:16:05 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// ATTRIBUTE                0   xyzw        0     NONE   float   xyzw
// ATTRIBUTE                1   xyz         1     NONE   float
// ATTRIBUTE                2   xyzw        2     NONE   float
// ATTRIBUTE                3   xyzw        3     NONE   float
// ATTRIBUTE                4   xy          4     NONE   float   xy
// SV_InstanceID            0   x           5   INSTID    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// PACKED_EYE_INDEX         0   x           1     NONE    uint   x
// SV_POSITION              0   xyzw        2      POS   float   xyzw
// SV_ClipDistance          1   x           3  CLIPDST   float   x
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -1.000000, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 1.000000} }
dcl_constantbuffer cb0[18], immediateIndexed
dcl_constantbuffer cb1[166], immediateIndexed
dcl_constantbuffer cb2[4], immediateIndexed
dcl_constantbuffer cb3[164], immediateIndexed
dcl_input v0.xyzw
dcl_input v4.xy
dcl_input_sgv v5.x, instance_id
dcl_output o0.xyzw
dcl_output o1.x
dcl_output_siv o2.xyzw, position
dcl_output_siv o3.x, clip_distance
dcl_temps 11
if_nz cb0[17].w
  mov r0.x, cb1[165].w
else
  and r0.x, v5.x, l(1)
endif
if_z r0.x
  mov r1.x, cb1[0].x
  mov r1.y, cb1[1].x
  mov r1.z, cb1[2].x
  mov r1.w, cb1[3].x
  mov r2.x, cb1[0].y
  mov r2.y, cb1[1].y
  mov r2.z, cb1[2].y
  mov r2.w, cb1[3].y
  mov r3.x, cb1[0].z
  mov r3.y, cb1[1].z
  mov r3.z, cb1[2].z
  mov r3.w, cb1[3].z
  mov r4.x, cb1[0].w
  mov r4.y, cb1[1].w
  mov r4.z, cb1[2].w
  mov r4.w, cb1[3].w
  mov r0.yzw, cb1[62].xxyz
  mov r5.x, cb1[163].y
else
  mov r1.x, cb3[0].x
  mov r1.y, cb3[1].x
  mov r1.z, cb3[2].x
  mov r1.w, cb3[3].x
  mov r2.x, cb3[0].y
  mov r2.y, cb3[1].y
  mov r2.z, cb3[2].y
  mov r2.w, cb3[3].y
  mov r3.x, cb3[0].z
  mov r3.y, cb3[1].z
  mov r3.z, cb3[2].z
  mov r3.w, cb3[3].z
  mov r4.x, cb3[0].w
  mov r4.y, cb3[1].w
  mov r4.z, cb3[2].w
  mov r4.w, cb3[3].w
  mov r0.yzw, cb3[62].xxyz
  mov r5.x, cb3[163].y
endif
dp3 r5.y, v0.xyzx, cb0[15].xyzx
mad r5.y, r5.y, cb0[14].y, -cb0[14].x
mov_sat r5.z, r5.y
mad r5.w, r5.z, l(-2.000000), l(3.000000)
mul r5.z, r5.z, r5.z
mul r5.z, r5.z, r5.w
movc r5.z, cb0[13].w, r5.z, r5.y
mul r5.w, r5.y, r5.y
mul r6.x, r5.y, r5.w
mul r6.y, r5.w, l(3.000000)
mad r6.z, r6.x, l(2.000000), -r6.y
add r6.z, r6.z, l(1.000000)
mad r6.w, -r5.w, l(2.000000), r6.x
add r6.w, r5.y, r6.w
mul r7.xyz, r6.wwww, cb0[8].xyzx
mad r7.xyz, r6.zzzz, cb0[7].xyzx, r7.xyzx
mad r6.z, r5.w, r5.y, -r5.w
mad r7.xyz, r6.zzzz, cb0[11].xyzx, r7.xyzx
mad r6.x, r6.x, l(-2.000000), r6.y
mad r6.xyz, r6.xxxx, cb0[10].xyzx, r7.xyzx
mul r7.xyz, cb0[8].zxyz, l(3.000000, 3.000000, 3.000000, 0.000000)
mad r7.xyz, cb0[7].zxyz, l(6.000000, 6.000000, 6.000000, 0.000000), r7.xyzx
mad r7.xyz, cb0[11].zxyz, l(3.000000, 3.000000, 3.000000, 0.000000), r7.xyzx
mad r7.xyz, -cb0[10].zxyz, l(6.000000, 6.000000, 6.000000, 0.000000), r7.xyzx
mul r8.xyz, cb0[8].zxyz, l(4.000000, 4.000000, 4.000000, 0.000000)
mad r8.xyz, cb0[7].zxyz, l(-6.000000, -6.000000, -6.000000, 0.000000), -r8.xyzx
mad r8.xyz, -cb0[11].zxyz, l(2.000000, 2.000000, 2.000000, 0.000000), r8.xyzx
mad r8.xyz, cb0[10].zxyz, l(6.000000, 6.000000, 6.000000, 0.000000), r8.xyzx
mul r8.xyz, r5.yyyy, r8.xyzx
mad r7.xyz, r7.xyzx, r5.wwww, r8.xyzx
add r7.xyz, r7.xyzx, cb0[8].zxyz
dp3 r5.y, r7.xyzx, r7.xyzx
rsq r5.y, r5.y
mul r7.xyz, r5.yyyy, r7.xyzx
mul r8.xyz, r7.zxyz, cb0[13].zxyz
mad r8.xyz, cb0[13].yzxy, r7.xyzx, -r8.xyzx
dp3 r5.y, r8.xyzx, r8.xyzx
rsq r5.y, r5.y
mul r8.xyz, r5.yyyy, r8.xyzx
mul r9.xyz, r7.xyzx, r8.yzxy
mad r7.xyz, r7.zxyz, r8.zxyz, -r9.xyzx
dp3 r5.y, r7.xyzx, r7.xyzx
rsq r5.y, r5.y
mul r7.xyz, r5.yyyy, r7.xyzx
add r9.xyzw, -cb0[9].zwxy, cb0[12].zwxy
mad r9.xyzw, r5.zzzz, r9.xyzw, cb0[9].zwxy
mad r6.xyz, r9.xxxx, r8.xyzx, r6.xyzx
mad r6.xyz, r9.yyyy, r7.xyzx, r6.xyzx
add r5.y, -cb0[8].w, cb0[11].w
mad r5.y, r5.z, r5.y, cb0[8].w
sincos r9.x, r10.x, r5.y
mul r5.yzw, r7.xxyz, r9.xxxx
mad r5.yzw, r10.xxxx, r8.xxyz, -r5.yyzw
mul r8.xyz, r8.xyzx, r9.xxxx
mad r7.xyz, r10.xxxx, r7.xyzx, r8.xyzx
mul r5.yzw, r9.zzzz, r5.yyzw
mul r7.xyz, r9.wwww, r7.xyzx
mul r8.xyz, r7.xxxx, cb0[17].xyzx
mad r8.xyz, cb0[16].xyzx, r5.yyyy, r8.xyzx
mul r7.xyw, r7.yyyy, cb0[17].xyxz
mad r9.xyz, cb0[16].xyzx, r5.zzzz, r7.xywx
mul r7.xyz, r7.zzzz, cb0[17].xyzx
mad r7.xyz, cb0[16].xyzx, r5.wwww, r7.xyzx
mov r8.w, r6.x
dp4 r5.y, v0.xyzw, r8.xyzw
mov r9.w, r6.y
dp4 r5.z, v0.xyzw, r9.xyzw
mov r7.w, r6.z
dp4 r5.w, v0.xyzw, r7.xyzw
mul r6.xyz, r5.zzzz, cb2[1].xyzx
mad r6.xyz, cb2[0].xyzx, r5.yyyy, r6.xyzx
mad r5.yzw, cb2[2].xxyz, r5.wwww, r6.xxyz
add r0.yzw, r0.yyzw, cb2[3].xxyz
add r6.xyz, r0.yzwy, r5.yzwy
mov r6.w, l(1.000000)
dp4 r1.x, r6.xyzw, r1.xyzw
dp4 r1.y, r6.xyzw, r2.xyzw
dp4 r1.z, r6.xyzw, r3.xyzw
dp4 r1.w, r6.xyzw, r4.xyzw
or r0.y, cb0[0].x, cb0[17].w
if_nz r0.y
  mov r2.x, icb[r0.x + 0].x
  mov r2.y, l(1.000000)
  dp2 o3.x, r1.xwxx, r2.xyxx
  mul r0.y, r5.x, l(0.500000)
  mul r0.z, r1.w, icb[r0.x + 0].x
  mad r0.w, -r5.x, l(0.500000), l(1.000000)
  mul r0.z, r0.w, r0.z
  mad r1.x, r1.x, r0.y, r0.z
else
  mov o3.x, l(0)
endif
movc r0.y, cb0[0].x, l(-0.000000), l(0)
or o1.x, r0.x, r0.y
mov o0.xy, v4.xyxx
mov o0.zw, l(0,0,0,0)
mov o2.xyzw, r1.xyzw
ret
// Approximately 0 instruction slots used
