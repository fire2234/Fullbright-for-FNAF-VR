// ---- Created with 3Dmigoto v1.3.16 on Wed Sep 18 18:13:00 2019
Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[10];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[63];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[142];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[8];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  linear centroid float4 v0 : TEXCOORD10,
  linear centroid float4 v1 : TEXCOORD11,
  float4 v2 : TEXCOORD0,
  nointerpolation uint v3 : PACKED_EYE_INDEX0,
  float4 v4 : SV_Position0,
  uint v5 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float oDepthLE : SV_DepthLessEqual)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = (int)v3.x & 1;
  if (r0.x == 0) {
    r0.x = cb1[40].x;
    r0.y = cb1[41].x;
    r0.z = cb1[42].x;
    r0.w = cb1[43].x;
    r1.x = cb1[40].y;
    r1.y = cb1[41].y;
    r1.z = cb1[42].y;
    r1.w = cb1[43].y;
    r2.x = cb1[40].z;
    r2.y = cb1[41].z;
    r2.z = cb1[42].z;
    r2.w = cb1[43].z;
    r3.x = cb1[40].w;
    r3.y = cb1[41].w;
    r3.z = cb1[42].w;
    r3.w = cb1[43].w;
    r4.xyz = cb1[14].xyz;
    r5.xyz = cb1[62].xyz;
  } else {
    r0.x = cb2[40].x;
    r0.y = cb2[41].x;
    r0.z = cb2[42].x;
    r0.w = cb2[43].x;
    r1.x = cb2[40].y;
    r1.y = cb2[41].y;
    r1.z = cb2[42].y;
    r1.w = cb2[43].y;
    r2.x = cb2[40].z;
    r2.y = cb2[41].z;
    r2.z = cb2[42].z;
    r2.w = cb2[43].z;
    r3.x = cb2[40].w;
    r3.y = cb2[41].w;
    r3.z = cb2[42].w;
    r3.w = cb2[43].w;
    r4.xyz = cb2[14].xyz;
    r5.xyz = cb2[62].xyz;
  }
  r6.xyz = v1.zxy * v0.yzx;
  r6.xyz = v1.yzx * v0.zxy + -r6.xyz;
  r6.xyz = v1.www * r6.xyz;
  r4.w = v4.z;
  r5.w = 1;
  r4.w = v4.w * r4.w;
  r7.xyz = v4.xyz;
  r7.w = 1;
  r0.x = dot(r7.xyzw, r0.xyzw);
  r0.y = dot(r7.xyzw, r1.xyzw);
  r0.z = dot(r7.xyzw, r2.xyzw);
  r0.w = dot(r7.xyzw, r3.xyzw);
  r0.xyz = r0.xyz / r0.www;
  r1.xyz = r0.xyz + -r5.xyz;
  r0.w = dot(-r0.xyz, -r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = -r0.xyz * r0.www;
  r2.xy = cb3[8].xx * v2.xy;
  r3.x = dot(v0.xyz, r0.xyz);
  r3.y = dot(r6.xyz, r0.xyz);
  r0.w = dot(v1.xyz, r0.xyz);
  r2.zw = -r3.xy / r0.ww;
  r2.zw = cb3[8].yy * r2.zw;
  r3.xy = -cb1[121].xy + v4.xy;
  r3.zw = cb1[141].xx + r3.xy;
  r3.zw = (uint2)r3.zw;
  r1.w = (uint)r3.w << 1;
  r1.w = (int)r1.w + (int)r3.z;
  r1.w = (uint)r1.w % 5;
  r1.w = (uint)r1.w;
  r3.xy = float2(0.015625,0.015625) * r3.xy;
  r3.x = t0.SampleBias(s0_s, r3.xy, cb1[133].x).x;
  r1.w = r3.x + r1.w;
  r1.w = cb3[8].z * r1.w;
  r1.w = cb3[8].w * r1.w;
  r3.x = 0.166666672 * r1.w;
  r0.w = min(1, abs(r0.w));
  r1.w = -r1.w * 0.166666672 + cb3[9].x;
  r0.w = r0.w * r1.w + r3.x;
  r1.w = floor(r0.w);
  r0.w = 1 / r0.w;
  r3.xy = r2.zw * r0.ww;
  r3.zw = ddx_coarse(r2.xy);
  r2.xy = ddy_coarse(r2.xy);
  r1.w = 2 + r1.w;
  r5.xy = float2(0,0);
  r6.xyzw = float4(1,1,1,0);
  r7.x = 0;
  while (true) {
    r7.y = (int)r7.x;
    r7.y = cmp(r7.y >= r1.w);
    if (r7.y != 0) break;
    r7.yz = v2.xy * cb3[8].xx + r5.xy;
    r8.xyzw = t1.SampleGrad(s1_s, r7.yz, r3.zwzz, r2.xyxx).xyzw;
    r7.y = dot(cb3[3].xyzw, r8.xyzw);
    r7.z = cmp(r6.x < r7.y);
    if (r7.z != 0) {
      r7.z = r6.y + -r6.z;
      r7.w = r7.y + -r6.x;
      r7.z = r7.z + r7.w;
      r7.z = r7.w / r7.z;
      r7.w = 1 + -r7.z;
      r7.w = r7.w * r6.x;
      r6.w = r6.y * r7.z + r7.w;
      r7.zw = -r7.zz * r3.xy + r5.xy;
      r5.xy = r7.zw;
      break;
    }
    r7.z = r6.x + -r0.w;
    r5.xy = r2.zw * r0.ww + r5.xy;
    r7.x = (int)r7.x + 1;
    r6.y = r6.x;
    r6.z = r7.y;
    r6.x = r7.z;
    r6.w = 0;
  }
  r0.w = 1 + -r6.w;
  r5.z = cb3[8].y * r0.w;
  r0.w = dot(r5.xyz, r5.xyz);
  r0.w = sqrt(r0.w);
  r1.w = dot(abs(r3.zw), abs(r3.zw));
  r1.w = sqrt(r1.w);
  r3.xyz = ddx_coarse(r1.xyz);
  r2.z = dot(r3.xyz, r3.xyz);
  r2.z = sqrt(r2.z);
  r1.w = r1.w / r2.z;
  r2.x = dot(abs(r2.xy), abs(r2.xy));
  r2.x = sqrt(r2.x);
  r1.xyz = ddy_coarse(r1.xyz);
  r1.x = dot(r1.xyz, r1.xyz);
  r1.x = sqrt(r1.x);
  r1.x = r2.x / r1.x;
  r1.x = max(r1.w, r1.x);
  r0.x = dot(r4.xyz, r0.xyz);
  r0.x = r1.x / abs(r0.x);
  r0.x = r0.w / r0.x;
  r0.x = r5.w * v4.w + r0.x;
  r0.x = r4.w / r0.x;
  oDepthLE = cb0[7].z ? r0.x : v4.z;
  o0.xyzw = float4(0,0,0,0);
  return;
}