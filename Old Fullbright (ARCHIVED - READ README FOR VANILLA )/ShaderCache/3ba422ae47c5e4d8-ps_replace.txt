// ---- Created with 3Dmigoto v1.3.16 on Thu Jul 18 19:02:12 2019
Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[11];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[134];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[15];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_Position0,
  uint v1 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = cb1[123].zw * v0.xy;
  r0.x = t0.SampleLevel(s0_s, r0.xy, 0).x;
  r1.xyzw = cb0[2].xyzw * v0.yyyy;
  r1.xyzw = v0.xxxx * cb0[1].xyzw + r1.xyzw;
  r0.xyzw = r0.xxxx * cb0[3].xyzw + r1.xyzw;
  r0.xyzw = cb0[4].xyzw + r0.xyzw;
  r0.xyz = r0.xyz / r0.www;
  r1.xyz = float3(1,1,1) + r0.xyz;
  r1.xyz = cmp(r1.xyz < float3(0,0,0));
  r0.w = (int)r1.y | (int)r1.x;
  r0.w = (int)r1.z | (int)r0.w;
  if (r0.w != 0) discard;
  r1.xyz = float3(1,1,1) + -r0.xyz;
  r0.xyz = r0.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  r1.xyz = cmp(r1.xyz < float3(0,0,0));
  r0.w = (int)r1.y | (int)r1.x;
  r0.w = (int)r1.z | (int)r0.w;
  if (r0.w != 0) discard;
  r0.w = t3.SampleBias(s3_s, r0.zy, cb1[133].x).x;
  r0.w = cb2[9].y + r0.w;
  r1.x = t4.SampleBias(s4_s, r0.zy, cb1[133].x).z;
  r0.w = r1.x + r0.w;
  r0.w = -0.100000001 + r0.w;
  r1.xyzw = t2.SampleBias(s2_s, r0.zy, cb1[133].x).xyzw;
  r0.w = r1.w * r0.w + -cb2[10].y;
  r0.w = saturate(r0.w / cb2[9].z);
  r0.x = r0.x * 2 + -1;
  r0.yz = t1.SampleBias(s1_s, r0.zy, cb1[133].x).xy;
  r2.xy = r0.yz * float2(2,2) + float2(-1,-1);
  r0.x = saturate(-abs(r0.x) * 4 + 4);
  r0.x = cb0[14].x * r0.x;
  r0.x = cb0[14].y * r0.x;
  r0.x = r0.w * r0.x;
  o0.w = r0.x;
  r0.y = -0.5 + r1.w;
  r0.y = saturate(r0.y + r0.y);
  r3.xyz = cb2[8].xyz + -cb2[5].xyz;
  r0.yzw = r0.yyy * r3.xyz + cb2[5].xyz;
  r2.w = saturate(r1.w + r1.w);
  r3.xyz = -cb2[6].xyz + cb2[5].xyz;
  r3.xyz = r2.www * r3.xyz + cb2[6].xyz;
  r0.yzw = -r3.xyz + r0.yzw;
  r0.yzw = r1.www * r0.yzw + r3.xyz;
  r1.xyz = max(float3(0,0,0), r1.xyz);
  r1.xyz = log2(r1.xyz);
  r1.xyz = cb2[9].xxx * r1.xyz;
  r1.xyz = exp2(r1.xyz);
  o0.xyz = saturate(r1.xyz * r0.yzw);
  r0.y = dot(r2.xy, r2.xy);
  r0.y = 1 + -r0.y;
  r0.y = max(0, r0.y);
  r2.z = sqrt(r0.y);
  r0.y = dot(r2.xyz, r2.xyz);
  r0.y = sqrt(r0.y);
  r0.yzw = r2.xyz / r0.yyy;
  r0.yzw = r0.yzw * cb1[128].www + cb1[128].xyz;
  r1.x = dot(r0.yzw, r0.yzw);
  r1.x = rsqrt(r1.x);
  r0.yzw = r1.xxx * r0.yzw;
  r1.x = dot(cb0[5].xyz, cb0[5].xyz);
  r1.x = rsqrt(r1.x);
  r0.w = r1.x * -r0.w;
  r1.x = dot(cb0[6].xyz, cb0[6].xyz);
  r1.y = rsqrt(r1.x);
  r1.x = dot(cb0[7].xyz, cb0[7].xyz);
  r1.z = rsqrt(r1.x);
  r0.yz = r1.yz * r0.zy;
  r1.xyz = cb0[6].xyz * r0.yyy;
  r1.xyz = r0.www * cb0[5].xyz + r1.xyz;
  r0.yzw = r0.zzz * cb0[7].xyz + r1.xyz;
  r1.x = dot(r0.yzw, r0.yzw);
  r1.x = rsqrt(r1.x);
  r0.yzw = r1.xxx * r0.yzw;
  o1.xyz = r0.yzw * float3(0.5,0.5,0.5) + float3(0.501960814,0.501960814,0.501960814);
  o1.w = r0.x;
  o2.w = r0.x;
  o2.z = cb1[129].y * 0.5 + cb1[129].x;
  o2.xy = float2(0,0.5);
  return;
}