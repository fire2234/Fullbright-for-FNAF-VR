//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jul 18 00:47:00 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyz
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xy
// TEXCOORD                 4   xyzw        3     NONE   float   xy
// PACKED_EYE_INDEX         0   x           4     NONE    uint   x
// TEXCOORD                 7   xyzw        5     NONE   float   xyzw
// SV_Position              0   xyzw        6      POS   float   xyzw
// SV_IsFrontFace           0   x           7    FFACE    uint
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer cb0[32], immediateIndexed
dcl_constantbuffer cb1[177], immediateIndexed
dcl_constantbuffer cb2[17], immediateIndexed
dcl_constantbuffer cb3[153], immediateIndexed
dcl_constantbuffer cb4[92], dynamicIndexed
dcl_constantbuffer cb5[22], immediateIndexed
dcl_constantbuffer cb6[15], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_buffer (float,float,float,float) t1
dcl_resource_buffer (uint,uint,uint,uint) t2
dcl_resource_buffer (uint,uint,uint,uint) t3
dcl_resource_buffer (float,float,float,float) t4
dcl_resource_buffer (uint,uint,uint,uint) t5
dcl_resource_buffer (uint,uint,uint,uint) t6
dcl_resource_texturecubearray (float,float,float,float) t7
dcl_resource_texture3d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t9
dcl_resource_texture2d (float,float,float,float) t10
dcl_resource_texture2d (float,float,float,float) t11
dcl_resource_texturecube (float,float,float,float) t12
dcl_input_ps linear centroid v0.xyz
dcl_input_ps linear centroid v1.xyzw
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xy
dcl_input_ps constant v4.x
dcl_input_ps linear v5.xyzw
dcl_input_ps_siv linear noperspective v6.xyzw, position
dcl_output o0.xyzw
dcl_temps 27
and r0.x, v4.x, l(1)
if_z r0.x
  mov r1.x, cb1[4].x
  mov r1.y, cb1[5].x
  mov r1.z, cb1[6].x
  mov r1.w, cb1[7].x
  mov r2.x, cb1[4].y
  mov r2.y, cb1[5].y
  mov r2.z, cb1[6].y
  mov r2.w, cb1[7].y
  mov r3.x, cb1[4].w
  mov r3.y, cb1[5].w
  mov r3.z, cb1[6].w
  mov r3.w, cb1[7].w
  mov r4.x, cb1[40].x
  mov r4.y, cb1[41].x
  mov r4.z, cb1[42].x
  mov r4.w, cb1[43].x
  mov r5.x, cb1[40].y
  mov r5.y, cb1[41].y
  mov r5.z, cb1[42].y
  mov r5.w, cb1[43].y
  mov r6.x, cb1[40].z
  mov r6.y, cb1[41].z
  mov r6.z, cb1[42].z
  mov r6.w, cb1[43].z
  mov r7.x, cb1[40].w
  mov r7.y, cb1[41].w
  mov r7.z, cb1[42].w
  mov r7.w, cb1[43].w
  mov r0.y, cb1[128].w
  mov r0.zw, cb1[129].xxxy
  mov r8.x, cb1[152].w
  mov r8.yzw, cb1[62].xxyz
  mov r9.xyz, cb1[128].xyzx
  mov r10.xy, cb1[121].xyxx
else
  mov r1.x, cb3[4].x
  mov r1.y, cb3[5].x
  mov r1.z, cb3[6].x
  mov r1.w, cb3[7].x
  mov r2.x, cb3[4].y
  mov r2.y, cb3[5].y
  mov r2.z, cb3[6].y
  mov r2.w, cb3[7].y
  mov r3.x, cb3[4].w
  mov r3.y, cb3[5].w
  mov r3.z, cb3[6].w
  mov r3.w, cb3[7].w
  mov r4.x, cb3[40].x
  mov r4.y, cb3[41].x
  mov r4.z, cb3[42].x
  mov r4.w, cb3[43].x
  mov r5.x, cb3[40].y
  mov r5.y, cb3[41].y
  mov r5.z, cb3[42].y
  mov r5.w, cb3[43].y
  mov r6.x, cb3[40].z
  mov r6.y, cb3[41].z
  mov r6.z, cb3[42].z
  mov r6.w, cb3[43].z
  mov r7.x, cb3[40].w
  mov r7.y, cb3[41].w
  mov r7.z, cb3[42].w
  mov r7.w, cb3[43].w
  mov r0.y, cb3[128].w
  mov r0.zw, cb3[129].xxxy
  mov r8.x, cb3[152].w
  mov r8.yzw, cb3[62].xxyz
  mov r9.xyz, cb3[128].xyzx
  mov r10.xy, cb3[121].xyxx
endif
mul r11.xyz, v0.yzxy, v1.zxyz
mad r11.xyz, v1.yzxy, v0.zxyz, -r11.xyzx
mul r11.xyz, r11.xyzx, v1.wwww
mov r12.xyz, v6.xyzx
mov r12.w, l(1.000000)
dp4 r4.x, r12.xyzw, r4.xyzw
dp4 r4.y, r12.xyzw, r5.xyzw
dp4 r4.z, r12.xyzw, r6.xyzw
dp4 r4.w, r12.xyzw, r7.xyzw
div r4.xyz, r4.xyzx, r4.wwww
add r5.xyz, -r8.yzwy, r4.xyzx
dp3 r4.w, -r4.xyzx, -r4.xyzx
rsq r4.w, r4.w
mul r4.xyz, r4.wwww, -r4.xyzx
mul r6.xy, v2.xyxx, cb6[10].xxxx
sample_b_indexable(texture2d)(float,float,float,float) r4.w, r6.xyxx, t10.yzwx, s4, cb1[133].x
mul r6.x, r4.w, cb6[10].y
add r6.yzw, -cb6[2].xxyz, l(0.000000, 0.000000, 0.000000, 1.000000)
mad r6.yzw, r6.xxxx, r6.yyzw, cb6[2].xxyz
mad r6.yzw, r6.yyzw, r0.yyyy, r9.xxyz
dp3 r0.y, r6.yzwy, r6.yzwy
rsq r0.y, r0.y
mul r6.yzw, r0.yyyy, r6.yyzw
mul r7.xyz, r11.yzxy, r6.zzzz
mad r7.xyz, r6.yyyy, v0.yzxy, r7.xyzx
mad r6.yzw, r6.wwww, v1.yyzx, r7.xxyz
dp3 r0.y, r6.yzwy, r6.yzwy
rsq r0.y, r0.y
mul r7.xyz, r0.yyyy, r6.yzwy
dp3 r0.y, r7.zxyz, r4.xyzx
mul r6.yzw, r0.yyyy, r7.zzxy
mad r6.yzw, r6.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), -r4.xxyz
max r8.y, r0.y, l(0.000000)
add r8.z, -r8.y, l(1.000000)
log r8.z, |r8.z|
mul r8.z, r8.z, cb6[10].z
exp r8.z, r8.z
mad r8.z, r8.z, l(0.960000), l(0.040000)
sample_indexable(texturecube)(float,float,float,float) r9.xyz, r6.yzwy, t12.xyzw, s6
sample_b_indexable(texturecube)(float,float,float,float) r6.yzw, r6.yzwy, t12.wxyz, s6, cb6[10].w
add r6.yzw, -r9.xxyz, r6.yyzw
mad r6.yzw, cb6[11].yyyy, r6.yyzw, r9.xxyz
dp3 r8.w, r6.yzwy, l(0.300000, 0.590000, 0.110000, 0.000000)
add r9.xyz, -r6.yzwy, r8.wwww
mad r6.yzw, cb6[11].wwww, r9.xxyz, r6.yyzw
mad r9.xyz, r6.yzwy, cb6[12].xxxx, r8.zzzz
mul r9.xyz, r9.xyzx, cb6[12].yyyy
mad r9.xyz, r6.xxxx, -r9.xyzx, r9.xyzx
add r9.xyz, r9.xyzx, cb6[3].xyzx
mul r8.zw, v2.xxxy, cb6[12].zzzz
sample_b_indexable(texture2d)(float,float,float,float) r8.z, r8.zwzz, t11.xzyw, s5, cb1[133].x
mul r8.w, r8.z, cb6[12].w
mov_sat r9.w, r8.w
add r9.w, -r9.w, l(1.000000)
mul r6.yzw, r6.yyzw, cb6[6].xxyz
mul r6.yzw, r6.yyzw, cb6[13].yyyy
mad r6.yzw, r9.wwww, r6.yyzw, cb6[7].xxyz
mad r12.xyz, r4.wwww, cb6[9].xyzx, -r6.yzwy
mad_sat r6.yzw, r6.xxxx, r12.xxyz, r6.yyzw
mul r10.zw, r9.wwww, cb6[13].zzzw
mad_sat r10.zw, r6.xxxx, -r10.zzzw, r10.zzzw
mad r4.w, -r8.z, cb6[12].w, l(1.000000)
mad_sat r4.w, r6.x, r4.w, r8.w
mul r11.xyz, r11.xyzx, cb6[2].yyyy
mad r11.xyz, cb6[2].xxxx, v0.xyzx, r11.xyzx
mad r11.xyz, cb6[2].zzzz, v1.xyzx, r11.xyzx
dp3 r8.z, r11.xyzx, r4.xyzx
max r8.z, r8.z, l(0.000000)
add r8.z, -r8.z, l(1.000000)
mul r8.w, |r8.z|, |r8.z|
mul r8.w, r8.w, r8.w
mul r8.z, r8.w, |r8.z|
mad r8.z, r8.z, l(0.960000), l(0.040000)
add r8.w, -cb6[14].x, cb6[14].y
mad r8.z, r8.z, r8.w, cb6[14].x
add r8.w, -r8.z, l(1.000000)
mad_sat r11.w, r6.x, r8.w, r8.z
mad r0.z, r4.w, r0.w, r0.z
mul r0.w, r10.w, l(0.080000)
mad r12.xyz, -r10.wwww, l(0.080000, 0.080000, 0.080000, 0.000000), r6.yzwy
mad r12.xyz, r10.zzzz, r12.xyzx, r0.wwww
mad r13.xyz, -r6.yzwy, r10.zzzz, r6.yzwy
mad r13.xyz, r13.xyzx, cb1[126].wwww, cb1[126].xyzx
mad r12.xyz, r12.xyzx, cb1[127].wwww, cb1[127].xyzx
mul r8.zw, v3.xxxy, l(0.000000, 0.000000, 1.000000, 0.500000)
mad r10.zw, v3.xxxy, l(0.000000, 0.000000, 1.000000, 0.500000), l(0.000000, 0.000000, 0.000000, 0.500000)
sample_indexable(texture2d)(float,float,float,float) r14.xyzw, r8.zwzz, t9.xyzw, s3
sample_indexable(texture2d)(float,float,float,float) r15.xyzw, r10.zwzz, t9.xyzw, s3
mad r0.w, r15.w, l(0.00392156886), r14.w
add r0.w, r0.w, l(-0.00196078443)
mad r0.w, r0.w, cb5[18].w, cb5[20].w
mul r14.xyz, r14.xyzx, r14.xyzx
mad r14.xyz, r14.xyzx, cb5[18].xyzx, cb5[20].xyzx
exp r0.w, r0.w
add r0.w, r0.w, l(-0.0185813606)
mad r15.xyzw, r15.xyzw, cb5[19].xyzw, cb5[21].xyzw
mov r7.w, l(1.000000)
dp4 r4.w, r15.xyzw, r7.xyzw
max r4.w, r4.w, l(0.000000)
mul r0.w, r0.w, r4.w
mul r14.xyz, r14.xyzx, r0.wwww
mul r14.xyz, r14.xyzx, cb1[146].xyzx
dp3 r0.w, r14.xyzx, l(0.300000, 0.590000, 0.110000, 0.000000)
mul r14.xyz, r13.xyzx, r14.xyzx
mad r15.xyz, r6.yzwy, l(2.040400, 2.040400, 2.040400, 0.000000), l(-0.332400, -0.332400, -0.332400, 0.000000)
mad r15.xyz, r6.yzwy, l(-4.795100, -4.795100, -4.795100, 0.000000), r15.xyzx
mad r6.xyz, r6.yzwy, l(2.755200, 2.755200, 2.755200, 0.000000), r15.xyzx
add r6.xyz, r6.xyzx, l(1.332000, 1.332000, 1.332000, 0.000000)
max r6.xyz, r6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
add r8.zw, -r10.xxxy, v6.xxxy
ftou r8.zw, r8.zzzw
if_z r0.x
  mov r4.w, cb4[3].x
  mov r6.w, cb4[3].y
  mov r7.w, cb4[3].z
  mov r9.w, cb4[1].z
  mov r10.xy, cb4[1].xyxx
  mov r10.z, cb4[2].x
else
  mov r4.w, cb4[43].x
  mov r6.w, cb4[43].y
  mov r7.w, cb4[43].z
  mov r9.w, cb4[41].z
  mov r10.xy, cb4[41].xyxx
  mov r10.z, cb4[42].x
endif
mad r4.w, v6.w, r4.w, r6.w
log r4.w, r4.w
mul r4.w, r7.w, r4.w
max r4.w, r4.w, l(0.000000)
ftou r4.w, r4.w
iadd r6.w, r9.w, l(-1)
umin r4.w, r4.w, r6.w
ushr r8.zw, r8.zzzw, r10.zzzz
imad r4.w, r4.w, r10.y, r8.w
imad r4.w, r4.w, r10.x, r8.z
if_z r0.x
  mov r6.w, cb4[0].z
  mov r7.w, cb4[6].x
  mov r8.zw, cb4[6].zzzw
  mov r10.xyz, cb4[5].xyzx
  mov r15.xyz, cb4[4].xyzx
else
  mov r6.w, cb4[40].z
  mov r7.w, cb4[46].x
  mov r8.zw, cb4[46].zzzw
  mov r10.xyz, cb4[45].xyzx
  mov r15.xyz, cb4[44].xyzx
endif
if_nz r6.w
  and r6.w, r7.w, l(255)
  movc r6.w, r6.w, l(1), l(0)
  if_nz cb4[7].x
    mov r9.w, cb4[7].x
    mov r10.w, l(0)
    loop
      uge r12.w, r10.w, cb4[7].x
      breakc_nz r12.w
      dp4 r12.w, cb4[8].xyzw, icb[r10.w + 0].xyzw
      lt r12.w, v6.w, r12.w
      if_nz r12.w
        mov r9.w, r10.w
        break
      endif
      iadd r10.w, r10.w, l(1)
    endloop
    ult r10.w, r9.w, cb4[7].x
    if_nz r10.w
      ishl r10.w, r9.w, l(2)
      mul r16.xyzw, r5.yyyy, cb4[r10.w + 10].xyzw
      mad r16.xyzw, r5.xxxx, cb4[r10.w + 9].xyzw, r16.xyzw
      mad r16.xyzw, r5.zzzz, cb4[r10.w + 11].xyzw, r16.xyzw
      add r16.xyzw, r16.xyzw, cb4[r10.w + 12].xyzw
      div r17.xyzw, r16.xyxy, r16.wwww
      ge r16.xy, r17.zwzz, cb4[r9.w + 25].xyxx
      ge r18.xy, cb4[r9.w + 25].zwzz, r17.zwzz
      and r16.xy, r16.xyxx, r18.xyxx
      and r9.w, r16.y, r16.x
      if_nz r9.w
        mad r17.xyzw, r17.xyzw, cb4[29].xyxy, l(-0.500000, -0.500000, -0.500000, -0.500000)
        frc r16.xy, r17.zwzz
        round_ni r17.xyzw, r17.xyzw
        add r18.xyzw, r17.zwzw, l(0.500000, 1.500000, 0.500000, 0.500000)
        mul r18.xyzw, r18.xyzw, cb4[29].zwzw
        sample_l_indexable(texture2d)(float,float,float,float) r19.x, r18.xyxx, t0.xyzw, s1, l(0.000000)
        add r17.xyzw, r17.xyzw, l(1.500000, 1.500000, 1.500000, 0.500000)
        mul r17.xyzw, r17.xyzw, cb4[29].zwzw
        sample_l_indexable(texture2d)(float,float,float,float) r19.y, r17.xyxx, t0.yxzw, s1, l(0.000000)
        sample_l_indexable(texture2d)(float,float,float,float) r19.z, r17.zwzz, t0.yzxw, s1, l(0.000000)
        sample_l_indexable(texture2d)(float,float,float,float) r19.w, r18.zwzz, t0.yzwx, s1, l(0.000000)
        add r17.xyzw, -r16.zzzz, r19.xyzw
        mad_sat r17.xyzw, r17.xyzw, l(4000.000000, 4000.000000, 4000.000000, 4000.000000), l(1.000000, 1.000000, 1.000000, 1.000000)
        add r16.zw, -r17.wwwx, r17.zzzy
        mad r16.xz, r16.xxxx, r16.zzwz, r17.wwxw
        add r9.w, -r16.x, r16.z
        mad r9.w, r16.y, r9.w, r16.x
      else
        mov r9.w, l(1.000000)
      endif
    else
      mov r9.w, l(1.000000)
    endif
  else
    mov r9.w, l(1.000000)
  endif
  if_nz r6.w
    mad_sat r6.w, v6.w, r8.z, r8.w
    mul r6.w, r6.w, r6.w
    add r8.z, -r9.w, l(1.000000)
    mad r16.x, r6.w, r8.z, r9.w
    min r16.y, r16.x, l(1.000000)
  else
    mov r16.xy, l(1.000000,1.000000,0,0)
  endif
  add r6.w, r16.y, r16.x
  lt r6.w, l(0.000000), r6.w
  if_nz r6.w
    dp3 r6.w, r15.xyzx, r15.xyzx
    rsq r6.w, r6.w
    mul r15.xyz, r6.wwww, r15.xyzx
    dp3 r6.w, r7.zxyz, r15.xyzx
    mov_sat r8.z, r6.w
    max r8.w, r0.z, l(0.020000)
    dp3 r9.w, r4.xyzx, r15.xyzx
    mad r10.w, r9.w, l(2.000000), l(2.000000)
    rsq r10.w, r10.w
    add r6.w, r0.y, r6.w
    mul_sat r6.w, r10.w, r6.w
    mad_sat r9.w, r10.w, r9.w, r10.w
    add r10.w, |r0.y|, l(0.000010)
    min r10.w, r10.w, l(1.000000)
    mul r15.xyz, r8.zzzz, r13.xyzx
    mul r12.w, r8.w, r8.w
    mul r13.w, r12.w, r12.w
    mad r14.w, r6.w, r13.w, -r6.w
    mad r6.w, r14.w, r6.w, l(1.000000)
    mul r6.w, r6.w, r6.w
    mul r6.w, r6.w, l(3.14159274)
    div r6.w, r13.w, r6.w
    mad r8.w, -r8.w, r8.w, l(1.000000)
    mad r13.w, r10.w, r8.w, r12.w
    mad r8.w, r8.z, r8.w, r12.w
    mul r8.w, r8.w, r10.w
    mad r8.w, r8.z, r13.w, r8.w
    rcp r8.w, r8.w
    mul r6.w, r6.w, r8.w
    add r8.w, -r9.w, l(1.000000)
    mul r9.w, r8.w, r8.w
    mul r9.w, r9.w, r9.w
    mul r10.w, r8.w, r9.w
    mul_sat r12.w, r12.y, l(50.000000)
    mad r8.w, -r9.w, r8.w, l(1.000000)
    mul r16.yzw, r12.xxyz, r8.wwww
    mad r16.yzw, r12.wwww, r10.wwww, r16.yyzw
    mul r6.w, r6.w, l(0.500000)
    mul r16.yzw, r16.yyzw, r6.wwww
    mul r16.yzw, r8.zzzz, r16.yyzw
    mad r15.xyz, r15.xyzx, l(0.318309873, 0.318309873, 0.318309873, 0.000000), r16.yzwy
    mul r10.xyz, r10.xyzx, r16.xxxx
    mul r10.xyz, r10.xyzx, r15.xyzx
  else
    mov r10.xyz, l(0,0,0,0)
  endif
  ushr r6.w, r7.w, l(8)
  and r6.w, r6.w, cb2[16].w
  movc r10.xyz, r6.wwww, r10.xyzx, l(0,0,0,0)
  mov r6.w, l(1.000000)
else
  mov r10.xyz, l(0,0,0,0)
  mov r6.w, l(0)
endif
if_z r0.x
  ishl r7.w, r4.w, l(1)
  ld_indexable(buffer)(uint,uint,uint,uint) r7.w, r7.wwww, t2.yzwx
  umin r7.w, r7.w, cb4[0].x
  bfi r8.z, l(31), l(1), r4.w, l(1)
  ld_indexable(buffer)(uint,uint,uint,uint) r8.z, r8.zzzz, t2.yzxw
else
  ishl r8.w, r4.w, l(1)
  ld_indexable(buffer)(uint,uint,uint,uint) r8.w, r8.wwww, t5.yzwx
  umin r7.w, r8.w, cb4[40].x
  bfi r4.w, l(31), l(1), r4.w, l(1)
  ld_indexable(buffer)(uint,uint,uint,uint) r8.z, r4.wwww, t5.yzxw
endif
movc r4.w, r0.x, cb4[40].x, cb4[0].x
umin r4.w, r4.w, r7.w
dp3 r7.w, -r4.yzxy, r7.xyzx
add r7.w, r7.w, r7.w
mad r15.xyz, r7.zxyz, -r7.wwww, -r4.xyzx
max r7.w, r0.z, l(0.020000)
mul r8.w, r7.w, r7.w
mad r7.w, -r7.w, r7.w, l(1.000000)
add r9.w, r0.y, r0.y
mad r10.w, r9.w, r0.y, l(-1.000000)
add r12.w, |r0.y|, l(0.000010)
min r12.w, r12.w, l(1.000000)
mul r16.xyz, r13.xyzx, l(0.318309873, 0.318309873, 0.318309873, 0.000000)
mul r13.w, r8.w, r8.w
mul r17.xyzw, r12.yxyz, l(50.000000, 0.450000, 0.450000, 0.450000)
mov_sat r17.x, r17.x
mov r18.y, l(1.000000)
mov r19.xyz, r10.xyzx
mov r14.w, l(0)
loop
  uge r15.w, r14.w, r4.w
  breakc_nz r15.w
  iadd r15.w, r8.z, r14.w
  if_z r0.x
    ld_indexable(buffer)(uint,uint,uint,uint) r16.w, r15.wwww, t3.yzwx
    imul null, r18.z, r16.w, l(5)
    ld_indexable(buffer)(float,float,float,float) r20.xyzw, r18.zzzz, t1.xyzw
    imad r21.xyzw, r16.wwww, l(5, 5, 5, 5), l(1, 2, 3, 4)
    ld_indexable(buffer)(float,float,float,float) r22.xyzw, r21.xxxx, t1.xyzw
    ld_indexable(buffer)(float,float,float,float) r23.xyzw, r21.yyyy, t1.wxyz
    ld_indexable(buffer)(float,float,float,float) r24.xyzw, r21.zzzz, t1.xyzw
    ld_indexable(buffer)(float,float,float,float) r21.xyzw, r21.wwww, t1.wxyz
  else
    ld_indexable(buffer)(uint,uint,uint,uint) r15.w, r15.wwww, t6.yzwx
    imul null, r16.w, r15.w, l(5)
    ld_indexable(buffer)(float,float,float,float) r20.xyzw, r16.wwww, t4.xyzw
    imad r25.xyzw, r15.wwww, l(5, 5, 5, 5), l(1, 2, 3, 4)
    ld_indexable(buffer)(float,float,float,float) r22.xyzw, r25.xxxx, t4.xyzw
    ld_indexable(buffer)(float,float,float,float) r23.xyzw, r25.yyyy, t4.wxyz
    ld_indexable(buffer)(float,float,float,float) r24.xyzw, r25.zzzz, t4.xyzw
    ld_indexable(buffer)(float,float,float,float) r21.xyzw, r25.wwww, t4.wxyz
  endif
  eq r15.w, r22.w, l(0.000000)
  lt r16.w, l(-2.000000), r24.x
  add r20.xyz, -r5.xyzx, r20.xyzx
  dp3 r18.z, r20.xyzx, r20.xyzx
  rsq r18.w, r18.z
  mul r25.xyz, r18.wwww, r20.xyzx
  mul r18.w, r20.w, r20.w
  mul r18.z, r18.w, r18.z
  mad r18.z, -r18.z, r18.z, l(1.000000)
  max r18.z, r18.z, l(0.000000)
  mul r18.z, r18.z, r18.z
  mul r26.xyz, r20.wwww, r20.xyzx
  dp3 r18.w, r26.xyzx, r26.xyzx
  min r18.w, r18.w, l(1.000000)
  add r18.w, -r18.w, l(1.000000)
  log r18.w, r18.w
  mul r18.w, r18.w, r22.w
  exp r18.w, r18.w
  movc r18.z, r15.w, r18.z, r18.w
  dp3 r18.w, r25.xyzx, r23.yzwy
  add r18.w, -r24.x, r18.w
  mul_sat r18.w, r24.y, r18.w
  mul r18.w, r18.w, r18.w
  mul r18.w, r18.w, r18.z
  movc r16.w, r16.w, r18.w, r18.z
  lt r18.z, l(0.000000), r16.w
  if_nz r18.z
    and r18.z, r23.x, l(255)
    movc r18.z, r18.z, l(1), l(0)
    if_nz r18.z
      and r25.xyzw, r23.xxxx, l(1, 2, 4, 8)
      movc r25.xyzw, r25.xyzw, l(1.000000,1.000000,1.000000,1.000000), l(0,0,0,0)
      ushr r18.z, r23.x, l(4)
      ubfe r18.w, l(1), l(4), r23.x
      movc r26.x, r18.w, l(1.000000), l(0)
      and r23.yzw, r18.zzzz, l(0, 2, 4, 8)
      movc r26.yzw, r23.yyzw, l(0,1.000000,1.000000,1.000000), l(0,0,0,0)
      dp4 r18.z, r26.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
      dp4 r18.w, r25.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
      mad r19.w, r6.w, r25.x, l(-1.000000)
      mad r18.w, r18.w, r19.w, l(1.000000)
      mul r18.zw, r18.wwww, r18.zzzz
    else
      mov r18.zw, l(0,0,1.000000,1.000000)
    endif
    add r18.w, r18.w, r18.z
    lt r18.w, l(0.000000), r18.w
    if_nz r18.w
      f16tof32 r18.w, r24.w
      mul r19.w, r18.w, l(0.500000)
      mad r23.yzw, -r19.wwww, r21.yyzw, r20.xxyz
      mad r20.xyz, r19.wwww, r21.yzwy, r20.xyzx
      lt r19.w, l(0.000000), r18.w
      if_nz r19.w
        dp3 r20.w, r23.yzwy, r23.yzwy
        dp3 r21.y, r20.xyzx, r20.xyzx
        rsq r20.w, r20.w
        rsq r21.y, r21.y
        mul r21.z, r20.w, r21.y
        dp3 r21.w, r23.yzwy, r20.xyzx
        mul r21.w, r21.z, r21.w
        mad r22.w, r21.w, l(0.500000), r21.z
        add r22.w, r22.w, l(0.500000)
        div r24.y, r21.z, r22.w
        dp3 r21.z, r7.zxyz, r23.yzwy
        dp3 r22.w, r7.zxyz, r20.xyzx
        mul r21.y, r21.y, r22.w
        mad r20.w, r21.z, r20.w, r21.y
        mul r24.x, r20.w, l(0.500000)
      else
        dp3 r20.w, r23.yzwy, r23.yzwy
        add r21.y, r20.w, l(1.000000)
        rcp r24.y, r21.y
        rsq r20.w, r20.w
        mul r25.xyz, r20.wwww, r23.yzwy
        dp3 r24.x, r7.zxyz, r25.xyzx
        mov r21.w, l(1.000000)
      endif
      lt r20.w, l(0.000000), r24.z
      mul r21.y, r24.z, r24.z
      mul_sat r21.y, r24.y, r21.y
      sqrt r21.y, r21.y
      lt r21.z, r24.x, r21.y
      max r22.w, -r21.y, r24.x
      add r22.w, r21.y, r22.w
      mul r22.w, r22.w, r22.w
      mul r21.y, r21.y, l(4.000000)
      div r21.y, r22.w, r21.y
      movc r21.y, r21.z, r21.y, r24.x
      movc_sat r20.w, r20.w, r21.y, r24.x
      movc r15.w, r15.w, r24.y, l(1.000000)
      add r20.xyz, -r23.yzwy, r20.xyzx
      dp3 r21.y, r15.xyzx, r20.xyzx
      mad r24.xyw, r21.yyyy, r15.xyxz, -r20.xyxz
      dp3 r21.z, r23.yzwy, r24.xywx
      mul r21.y, r21.y, r21.y
      mad r18.w, r18.w, r18.w, -r21.y
      div_sat r18.w, r21.z, r18.w
      mad r20.xyz, r18.wwww, r20.xyzx, r23.yzwy
      movc r20.xyz, r19.wwww, r20.xyzx, r23.yzwy
      dp3 r18.w, r20.xyzx, r20.xyzx
      rsq r18.w, r18.w
      mul r20.xyz, r18.wwww, r20.xyzx
      mul r19.w, r18.w, r24.z
      mul_sat r19.w, r7.w, r19.w
      mul_sat r18.w, r18.w, r21.x
      dp3 r21.x, r7.zxyz, r20.xyzx
      dp3 r20.x, r4.xyzx, r20.xyzx
      mad r20.y, r20.x, l(2.000000), l(2.000000)
      rsq r20.y, r20.y
      add r20.z, r0.y, r21.x
      mul_sat r20.z, r20.y, r20.z
      mad_sat r20.y, r20.y, r20.x, r20.y
      lt r21.y, l(0.000000), r19.w
      if_nz r21.y
        mad r21.z, -r19.w, r19.w, l(1.000000)
        sqrt r21.z, r21.z
        dp2 r22.w, r0.yyyy, r21.xxxx
        add r23.y, -r20.x, r22.w
        ge r23.z, r23.y, r21.z
        if_nz r23.z
          mov r20.z, l(1.000000)
          mov r20.y, |r0.y|
        else
          mad r23.z, -r23.y, r23.y, l(1.000000)
          rsq r23.z, r23.z
          mul r23.z, r19.w, r23.z
          mad r23.w, -r23.y, r21.x, r0.y
          mul r24.x, r23.w, r23.z
          mad r23.y, -r23.y, r20.x, r10.w
          mul r23.y, r23.y, r23.z
          mul r24.y, r21.x, r21.x
          mad r24.y, -r0.y, r0.y, -r24.y
          add r24.y, r24.y, l(1.000000)
          mad r24.y, -r20.x, r20.x, r24.y
          mad_sat r22.w, r22.w, r20.x, r24.y
          sqrt r22.w, r22.w
          mul r22.w, r22.w, r23.z
          mul r24.y, r0.y, r22.w
          add r24.z, r24.y, r24.y
          mad r24.w, r21.x, r21.z, r0.y
          mad r23.z, r23.z, r23.w, r24.w
          mad r23.w, r20.x, r21.z, r23.y
          add r23.w, r23.w, l(1.000000)
          mul r25.x, r22.w, r23.w
          mul r25.y, r23.w, r23.z
          mul r25.z, r23.z, r24.z
          mul r24.y, r24.y, r23.z
          mul r24.y, r24.y, l(0.500000)
          mad r24.y, r25.x, l(-0.500000), r24.y
          mul r24.y, r24.y, r25.y
          mad r25.w, -r25.x, l(2.000000), r25.z
          mul r25.z, r25.w, r25.z
          mad r25.x, r25.x, r25.x, r25.z
          mul r25.z, r23.w, r23.w
          mad r23.w, r20.x, r21.z, r23.w
          mad r23.w, r23.w, l(-0.500000), l(-0.500000)
          mul r23.w, r23.w, r25.y
          mad r23.w, r24.w, r25.z, r23.w
          mad r23.z, r23.z, r23.w, r25.x
          add r23.w, r24.y, r24.y
          mul r24.w, r24.y, r24.y
          mad r24.w, r23.z, r23.z, r24.w
          div r23.w, r23.w, r24.w
          mul r23.z, r23.z, r23.w
          mad r23.w, -r23.w, r24.y, l(1.000000)
          mul r22.w, r22.w, r23.z
          mad r22.w, r23.w, r24.x, r22.w
          mul r23.z, r24.z, r23.z
          mad r23.y, r23.w, r23.y, r23.z
          mad r21.x, r21.x, r21.z, r22.w
          mad r20.x, r20.x, r21.z, r23.y
          mad r21.z, r20.x, l(2.000000), l(2.000000)
          rsq r21.z, r21.z
          add r21.x, r0.y, r21.x
          mul_sat r20.z, r21.z, r21.x
          mad_sat r20.y, r21.z, r20.x, r21.z
        endif
      endif
      mul r15.w, r20.w, r15.w
      lt r20.x, l(0.000000), r18.w
      mul r18.w, r18.w, r18.w
      mad r21.x, r20.y, l(3.600000), l(0.400000)
      div r18.w, r18.w, r21.x
      mad r18.w, r8.w, r8.w, r18.w
      min r18.w, r18.w, l(1.000000)
      movc r18.x, r20.x, r18.w, r13.w
      mul r18.w, r19.w, l(0.250000)
      ishr r20.x, r18.x, l(1)
      iadd r20.x, r20.x, l(0x1fbd1df5)
      mad r19.w, r20.x, l(3.000000), r19.w
      mul r18.w, r18.w, r19.w
      add r19.w, r20.y, l(0.001000)
      div r18.w, r18.w, r19.w
      add r24.x, r18.w, r18.x
      div r24.y, r18.x, r24.x
      movc r21.xy, r21.yyyy, r24.xyxx, r18.xyxx
      lt r18.w, r21.w, l(1.000000)
      add r20.x, -r21.w, l(1.000100)
      add r21.z, r21.w, l(1.000000)
      div r20.x, r20.x, r21.z
      sqrt r20.x, r20.x
      mul r21.z, r20.x, l(0.250000)
      ishr r21.w, r21.x, l(1)
      iadd r21.w, r21.w, l(0x1fbd1df5)
      mad r20.x, r21.w, l(3.000000), r20.x
      mul r20.x, r20.x, r21.z
      div r19.w, r20.x, r19.w
      add r19.w, r19.w, r21.x
      div r19.w, r21.x, r19.w
      sqrt r19.w, r19.w
      mul r19.w, r19.w, r21.y
      movc r18.w, r18.w, r19.w, r21.y
      mad r19.w, r20.z, r18.x, -r20.z
      mad r19.w, r19.w, r20.z, l(1.000000)
      mul r19.w, r19.w, r19.w
      mul r19.w, r19.w, l(3.14159274)
      div r19.w, r18.x, r19.w
      mul r18.w, r18.w, r19.w
      sqrt r18.x, r18.x
      add r19.w, -r18.x, l(1.000000)
      mad r20.x, r12.w, r19.w, r18.x
      mad r18.x, r20.w, r19.w, r18.x
      mul r18.x, r12.w, r18.x
      mad r18.x, r20.w, r20.x, r18.x
      rcp r18.x, r18.x
      mul r18.x, r18.x, r18.w
      add r18.w, -r20.y, l(1.000000)
      mul r19.w, r18.w, r18.w
      mul r19.w, r19.w, r19.w
      mul r20.x, r18.w, r19.w
      mad r18.w, -r19.w, r18.w, l(1.000000)
      mul r20.yzw, r12.xxyz, r18.wwww
      mad r20.xyz, r17.xxxx, r20.xxxx, r20.yzwy
      mul r18.x, r18.x, l(0.500000)
      mul r20.xyz, r20.xyzx, r18.xxxx
      mul r20.xyz, r15.wwww, r20.xyzx
      mad r20.xyz, r15.wwww, r16.xyzx, r20.xyzx
      mul r21.xyz, r16.wwww, r22.xyzx
      mul r18.xzw, r18.zzzz, r21.xxyz
      mul r18.xzw, r18.xxzw, r20.xxyz
    else
      mov r18.xzw, l(0,0,0,0)
    endif
  else
    mov r18.xzw, l(0,0,0,0)
  endif
  ushr r15.w, r23.x, l(8)
  and r15.w, r15.w, cb2[16].w
  add r18.xzw, r18.xxzw, r19.xxyz
  movc r19.xyz, r15.wwww, r18.xzwx, r19.xyzx
  iadd r14.w, r14.w, l(1)
endloop
mad r4.xyz, r9.wwww, r7.zxyz, -r4.xyzx
min r0.x, r8.y, l(1.000000)
log r0.y, r0.z
mad r0.y, -r0.y, l(1.200000), l(1.000000)
add r6.w, cb1[163].z, l(-1.000000)
add r0.y, -r0.y, r6.w
itof r4.w, cb0[28].x
sample_l_indexable(texturecubearray)(float,float,float,float) r4.xyz, r4.xyzw, t7.xyzw, s2, r0.y
mul r4.xyz, r4.xyzx, cb0[31].xxxx
mul r4.xyz, r4.xyzx, cb1[146].xyzx
dp3 r0.y, cb1[146].xyzx, l(0.300000, 0.590000, 0.110000, 0.000000)
mul r0.y, r0.y, cb0[29].w
mad_sat r4.w, r0.z, cb1[165].x, cb1[165].y
mad r6.w, r4.w, l(-2.000000), l(3.000000)
mul r4.w, r4.w, r4.w
mul r4.w, r4.w, r6.w
max r0.y, r0.y, l(0.000100)
div r0.y, r0.w, r0.y
min r0.y, r0.y, cb1[165].z
add r0.y, r0.y, l(-1.000000)
mad r0.y, r4.w, r0.y, l(1.000000)
mul r4.xyz, r0.yyyy, r4.xyzx
mad r7.xyz, r17.yzwy, r0.wwww, -r4.xyzx
mad r4.xyz, r8.xxxx, r7.xyzx, r4.xyzx
mad r7.xyzw, r0.zzzz, l(-1.000000, -0.027500, -0.572000, 0.022000), l(1.000000, 0.042500, 1.040000, -0.040000)
mul r0.y, r7.x, r7.x
mul r0.x, r0.x, l(-9.280000)
exp r0.x, r0.x
min r0.x, r0.x, r0.y
mad r0.x, r0.x, r7.x, r7.y
mad r0.xy, r0.xxxx, l(-1.040000, 1.040000, 0.000000, 0.000000), r7.zwzz
mul r0.y, r17.x, r0.y
mad r0.xyz, r12.xyzx, r0.xxxx, r0.yyyy
mul r0.xyz, r0.xyzx, r4.xyzx
mad r4.xyz, r12.xyzx, l(2.040400, 2.040400, 2.040400, 0.000000), l(-0.332400, -0.332400, -0.332400, 0.000000)
mad r4.xyz, r12.xyzx, l(-4.795100, -4.795100, -4.795100, 0.000000), r4.xyzx
mad r4.xyz, r12.xyzx, l(2.755200, 2.755200, 2.755200, 0.000000), r4.xyzx
add r4.xyz, r4.xyzx, l(1.332000, 1.332000, 1.332000, 0.000000)
max r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r0.xyz, r0.xyzx, r4.xyzx, r19.xyzx
lt r0.w, l(0.000000), cb4[91].w
if_nz r0.w
  mov r5.w, l(1.000000)
  dp4 r1.x, r5.xyzw, r1.xyzw
  dp4 r1.y, r5.xyzw, r2.xyzw
  dp4 r0.w, r5.xyzw, r3.xyzw
  div r1.xy, r1.xyxx, r0.wwww
  mad r1.xy, r1.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  mad r0.w, r0.w, cb1[176].x, cb1[176].y
  log r0.w, r0.w
  mul r0.w, r0.w, cb1[176].z
  mul r1.z, r0.w, cb1[175].z
  sample_l_indexable(texture3d)(float,float,float,float) r1.xyzw, r1.xyzx, t8.xyzw, s0, l(0.000000)
  mul r2.x, r1.w, v5.w
  mad r1.xyz, v5.xyzx, r1.wwww, r1.xyzx
else
  mov r1.xyz, v5.xyzx
  mov r2.x, v5.w
endif
mad r2.yzw, r12.xxyz, l(0.000000, 0.450000, 0.450000, 0.450000), r13.xxyz
add r2.yzw, -r0.xxyz, r2.yyzw
mad r0.xyz, cb1[134].zzzz, r2.yzwy, r0.xyzx
max r11.xyz, r9.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r0.w, l(0.000000), cb1[130].x
if_nz r0.w
  add r2.yzw, r5.xxyz, -cb2[5].xxyz
  add r3.xyz, cb2[11].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  lt r2.yzw, r3.xxyz, |r2.yyzw|
  or r0.w, r2.z, r2.y
  or r0.w, r2.w, r0.w
  dp3 r1.w, r5.xyzx, l(0.577000, 0.577000, 0.577000, 0.000000)
  mul r1.w, r1.w, l(0.002000)
  frc r1.w, r1.w
  lt r1.w, l(0.500000), r1.w
  movc r3.yzw, r1.wwww, l(0,0,1.000000,1.000000), l(0,1.000000,1.000000,0)
  mov r3.x, l(1.000000)
  movc r11.xyzw, r0.wwww, r3.yzwx, r11.xyzw
  mov o0.w, r11.w
else
  mov o0.w, r11.w
endif
mad r0.xyz, r14.xyzx, r6.xyzx, r0.xyzx
add r0.xyz, r11.xyzx, r0.xyzx
mad o0.xyz, r0.xyzx, r2.xxxx, r1.xyzx
ret
// Approximately 0 instruction slots used
