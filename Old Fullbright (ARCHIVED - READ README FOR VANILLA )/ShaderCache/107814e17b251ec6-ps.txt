//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jul 18 19:02:06 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float
// TEXCOORD                11   xyzw        1     NONE   float
// TEXCOORD                 0   xyzw        2     NONE   float   xy
// PACKED_EYE_INDEX         0   x           3     NONE    uint   x
// TEXCOORD                 7   xyzw        4     NONE   float   xyzw
// SV_Position              0   xyzw        5      POS   float   xyz
// SV_IsFrontFace           0   x           6    FFACE    uint
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[177], immediateIndexed
dcl_constantbuffer cb1[12], immediateIndexed
dcl_constantbuffer cb2[63], immediateIndexed
dcl_constantbuffer cb3[92], immediateIndexed
dcl_constantbuffer cb4[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture3d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v2.xy
dcl_input_ps constant v3.x
dcl_input_ps linear v4.xyzw
dcl_input_ps_siv linear noperspective v5.xyz, position
dcl_output o0.xyzw
dcl_temps 9
and r0.x, v3.x, l(1)
if_z r0.x
  mov r0.x, cb0[4].x
  mov r0.y, cb0[5].x
  mov r0.z, cb0[6].x
  mov r0.w, cb0[7].x
  mov r1.x, cb0[4].y
  mov r1.y, cb0[5].y
  mov r1.z, cb0[6].y
  mov r1.w, cb0[7].y
  mov r2.x, cb0[4].w
  mov r2.y, cb0[5].w
  mov r2.z, cb0[6].w
  mov r2.w, cb0[7].w
  mov r3.x, cb0[40].x
  mov r3.y, cb0[41].x
  mov r3.z, cb0[42].x
  mov r3.w, cb0[43].x
  mov r4.x, cb0[40].y
  mov r4.y, cb0[41].y
  mov r4.z, cb0[42].y
  mov r4.w, cb0[43].y
  mov r5.x, cb0[40].z
  mov r5.y, cb0[41].z
  mov r5.z, cb0[42].z
  mov r5.w, cb0[43].z
  mov r6.x, cb0[40].w
  mov r6.y, cb0[41].w
  mov r6.z, cb0[42].w
  mov r6.w, cb0[43].w
  mov r7.xyz, cb0[62].xyzx
else
  mov r0.x, cb2[4].x
  mov r0.y, cb2[5].x
  mov r0.z, cb2[6].x
  mov r0.w, cb2[7].x
  mov r1.x, cb2[4].y
  mov r1.y, cb2[5].y
  mov r1.z, cb2[6].y
  mov r1.w, cb2[7].y
  mov r2.x, cb2[4].w
  mov r2.y, cb2[5].w
  mov r2.z, cb2[6].w
  mov r2.w, cb2[7].w
  mov r3.x, cb2[40].x
  mov r3.y, cb2[41].x
  mov r3.z, cb2[42].x
  mov r3.w, cb2[43].x
  mov r4.x, cb2[40].y
  mov r4.y, cb2[41].y
  mov r4.z, cb2[42].y
  mov r4.w, cb2[43].y
  mov r5.x, cb2[40].z
  mov r5.y, cb2[41].z
  mov r5.z, cb2[42].z
  mov r5.w, cb2[43].z
  mov r6.x, cb2[40].w
  mov r6.y, cb2[41].w
  mov r6.z, cb2[42].w
  mov r6.w, cb2[43].w
  mov r7.xyz, cb2[62].xyzx
endif
mov r8.xyz, v5.xyzx
mov r8.w, l(1.000000)
dp4 r3.x, r8.xyzw, r3.xyzw
dp4 r3.y, r8.xyzw, r4.xyzw
dp4 r3.z, r8.xyzw, r5.xyzw
dp4 r3.w, r8.xyzw, r6.xyzw
div r3.xyz, r3.xyzx, r3.wwww
add r3.xyz, -r7.xyzx, r3.xyzx
mul r4.x, cb0[132].z, cb4[2].x
frc r4.x, r4.x
add r4.x, r4.x, cb4[2].y
frc r4.x, r4.x
mul r4.xy, r4.xxxx, l(36.000000, 6.000000, 0.000000, 0.000000)
round_ni r4.xy, r4.xyxx
mul r4.xy, r4.xyxx, l(0.166666672, 0.166666672, 0.000000, 0.000000)
mad r4.xy, v2.xyxx, l(0.166666672, 0.166666672, 0.000000, 0.000000), r4.xyxx
sample_indexable(texture2d)(float,float,float,float) r4.xyz, r4.xyxx, t1.xyzw, s1
mad r4.xyz, r4.xyzx, l(7.000000, 7.000000, 7.000000, 0.000000), cb4[1].xyzx
lt r4.w, l(0.000000), cb3[91].w
if_nz r4.w
  mov r3.w, l(1.000000)
  dp4 r0.x, r3.xyzw, r0.xyzw
  dp4 r0.y, r3.xyzw, r1.xyzw
  dp4 r0.z, r3.xyzw, r2.xyzw
  div r0.xy, r0.xyxx, r0.zzzz
  mad r1.xy, r0.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  mad r0.x, r0.z, cb0[176].x, cb0[176].y
  log r0.x, r0.x
  mul r0.x, r0.x, cb0[176].z
  mul r1.z, r0.x, cb0[175].z
  sample_l_indexable(texture3d)(float,float,float,float) r0.xyzw, r1.xyzx, t0.xyzw, s0, l(0.000000)
  mul r1.x, r0.w, v4.w
  mad r0.xyz, v4.xyzx, r0.wwww, r0.xyzx
else
  mov r0.xyz, v4.xyzx
  mov r1.x, v4.w
endif
max r1.yzw, r4.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r0.w, l(0.000000), cb0[130].x
if_nz r0.w
  add r2.xyz, r3.xyzx, -cb1[5].xyzx
  add r4.xyz, cb1[11].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  lt r2.xyz, r4.xyzx, |r2.xyzx|
  or r0.w, r2.y, r2.x
  or r0.w, r2.z, r0.w
  dp3 r2.x, r3.xyzx, l(0.577000, 0.577000, 0.577000, 0.000000)
  mul r2.x, r2.x, l(0.002000)
  frc r2.x, r2.x
  lt r2.x, l(0.500000), r2.x
  movc r2.xyz, r2.xxxx, l(0,1.000000,1.000000,0), l(1.000000,1.000000,0,0)
  movc r1.yzw, r0.wwww, r2.xxyz, r1.yyzw
endif
mad o0.xyz, r1.yzwy, r1.xxxx, r0.xyzx
mov o0.w, l(0)
ret
// Approximately 0 instruction slots used
