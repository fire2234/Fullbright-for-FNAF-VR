//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Wed Oct 23 19:13:17 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// ATTRIBUTE                0   xyzw        0     NONE   float   xyzw
// SV_InstanceID            0   x           1   INSTID    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// SV_ClipDistance          1   x           1  CLIPDST   float   x
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -1.000000, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 1.000000} }
dcl_constantbuffer cb0[15], immediateIndexed
dcl_constantbuffer cb1[166], immediateIndexed
dcl_constantbuffer cb2[4], immediateIndexed
dcl_constantbuffer cb3[164], immediateIndexed
dcl_constantbuffer cb4[5], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input v0.xyzw
dcl_input_sgv v1.x, instance_id
dcl_output_siv o0.xyzw, position
dcl_output_siv o1.x, clip_distance
dcl_temps 11
if_nz cb0[14].x
  mov r0.x, cb1[165].w
else
  and r0.x, v1.x, l(1)
endif
if_z r0.x
  mov r1.x, cb1[0].x
  mov r1.y, cb1[1].x
  mov r1.z, cb1[2].x
  mov r1.w, cb1[3].x
  mov r2.x, cb1[0].y
  mov r2.y, cb1[1].y
  mov r2.z, cb1[2].y
  mov r2.w, cb1[3].y
  mov r3.x, cb1[0].z
  mov r3.y, cb1[1].z
  mov r3.z, cb1[2].z
  mov r3.w, cb1[3].z
  mov r4.x, cb1[0].w
  mov r4.y, cb1[1].w
  mov r4.z, cb1[2].w
  mov r4.w, cb1[3].w
  mov r0.yzw, cb1[62].xxyz
  mov r5.x, cb1[163].y
else
  mov r1.x, cb3[0].x
  mov r1.y, cb3[1].x
  mov r1.z, cb3[2].x
  mov r1.w, cb3[3].x
  mov r2.x, cb3[0].y
  mov r2.y, cb3[1].y
  mov r2.z, cb3[2].y
  mov r2.w, cb3[3].y
  mov r3.x, cb3[0].z
  mov r3.y, cb3[1].z
  mov r3.z, cb3[2].z
  mov r3.w, cb3[3].z
  mov r4.x, cb3[0].w
  mov r4.y, cb3[1].w
  mov r4.z, cb3[2].w
  mov r4.w, cb3[3].w
  mov r0.yzw, cb3[62].xxyz
  mov r5.x, cb3[163].y
endif
mul r6.xy, v0.yxyy, cb0[4].wwww
mad r6.zw, -v0.xxxy, cb0[4].wwww, l(0.000000, 0.000000, 1.000000, 1.000000)
add r7.xyzw, r6.xyzw, r6.xyzw
lt r5.yz, l(0.000000, 0.500000, 0.500000, 0.000000), v0.wwzw
mad r8.xyzw, -r6.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(1.000000, 1.000000, 1.000000, 1.000000)
mul r9.xyzw, r8.xyzw, cb0[9].xyzw
mad r9.xyzw, r7.xyzw, cb0[5].wwww, r9.xyzw
mul r10.xyzw, r8.xyzw, cb0[8].xyzw
mad r10.xyzw, r7.xyzw, cb0[5].zzzz, r10.xyzw
movc r9.xyzw, r5.zzzz, r9.xyzw, r10.xyzw
mul r10.xyzw, r8.xyzw, cb0[7].xyzw
mad r10.xyzw, r7.xyzw, cb0[5].yyyy, r10.xyzw
mul r8.xyzw, r8.xyzw, cb0[6].xyzw
mad r7.xyzw, r7.xyzw, cb0[5].xxxx, r8.xyzw
movc r7.xyzw, r5.zzzz, r10.xyzw, r7.xyzw
movc r7.xyzw, r5.yyyy, r9.xyzw, r7.xyzw
add r5.y, r6.x, r6.y
lt r5.y, l(1.000000), r5.y
lt r5.z, r6.y, r6.x
movc r5.zw, r5.zzzz, r7.wwwy, r7.zzzx
movc r5.y, r5.y, r5.z, r5.w
round_ni r5.z, r5.y
add r5.y, -r5.z, r5.y
add r5.w, r5.z, -cb0[4].x
exp r5.w, -r5.w
mul r6.xy, r5.wwww, v0.xyxx
round_ni r6.xy, r6.xyxx
exp r5.w, -r5.z
mul r6.z, r5.w, cb4[3].x
mad r7.x, cb4[3].x, r5.w, l(-1.000000)
mul r5.w, r6.z, l(0.500000)
max r5.w, r5.w, l(2.000000)
add r7.y, r5.w, l(-1.000000)
mul r6.zw, r7.xxxy, cb4[3].yyyy
div r7.xy, r6.xyxx, r6.zzzz
mul r6.xy, r6.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
round_ni r6.xy, r6.xyxx
div r6.xy, r6.xyxx, r6.wwww
mad r8.xy, r7.xyxx, cb4[0].xyxx, cb4[0].zwzz
mad r8.xy, cb4[0].xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), r8.xyxx
mul r9.xy, v0.zwzz, cb4[4].wwww
mad r8.xy, v0.zwzz, cb4[4].xyxx, r8.xyxx
add r5.z, r5.z, -cb0[3].z
sample_l_indexable(texture2d)(float,float,float,float) r8.xy, r8.xyxx, t2.xyzw, s2, r5.z
dp2 r5.w, r8.xyxx, l(65280.000000, 255.000000, 0.000000, 0.000000)
add r5.zw, r5.zzzw, l(0.000000, 0.000000, 1.000000, -32768.000000)
mul r7.z, r5.w, l(0.00781250000)
mad r8.xy, r6.xyxx, cb4[0].xyxx, cb4[0].zwzz
mad r8.xy, cb4[0].xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), r8.xyxx
mad r8.xy, v0.zwzz, cb4[4].xyxx, r8.xyxx
sample_l_indexable(texture2d)(float,float,float,float) r5.zw, r8.xyxx, t2.zwxy, s2, r5.z
dp2 r5.z, r5.zwzz, l(65280.000000, 255.000000, 0.000000, 0.000000)
add r5.z, r5.z, l(-32768.000000)
mul r6.z, r5.z, l(0.00781250000)
add r6.xyz, r6.xyzx, -r7.xyzx
mad r5.yzw, r5.yyyy, r6.xxyz, r7.xxyz
mov r9.z, l(0)
add r6.xyz, r5.yzwy, r9.xyzx
mul r7.xyz, r6.yyyy, cb2[1].xyzx
mad r6.xyw, cb2[0].xyxz, r6.xxxx, r7.xyxz
mad r6.xyz, cb2[2].xyzx, r6.zzzz, r6.xywx
add r0.yzw, r0.yyzw, cb2[3].xxyz
add r0.yzw, r0.yyzw, r6.xxyz
add r5.yz, r5.yyzy, cb4[3].zzwz
mad r5.yz, v0.zzwz, cb4[4].wwww, r5.yyzy
mul r6.xy, r5.yzyy, l(0.500000, 0.500000, 0.000000, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r5.w, r6.xyxx, t1.yzwx, s1, l(-1.000000)
sample_l_indexable(texture2d)(float,float,float,float) r6.xyz, r5.yzyy, t0.xyzw, s0, l(-1.000000)
mad r6.xyz, r5.wwww, r6.xyzx, r0.yzwy
mov r6.w, l(1.000000)
dp4 r1.x, r6.xyzw, r1.xyzw
dp4 r1.y, r6.xyzw, r2.xyzw
dp4 r1.z, r6.xyzw, r3.xyzw
dp4 r1.w, r6.xyzw, r4.xyzw
or r0.y, cb0[0].x, cb0[14].x
if_nz r0.y
  mov r2.x, icb[r0.x + 0].x
  mov r2.y, l(1.000000)
  dp2 o1.x, r1.xwxx, r2.xyxx
  mul r0.y, r5.x, l(0.500000)
  mul r0.x, r1.w, icb[r0.x + 0].x
  mad r0.z, -r5.x, l(0.500000), l(1.000000)
  mul r0.x, r0.z, r0.x
  mad r1.x, r1.x, r0.y, r0.x
else
  mov o1.x, l(0)
endif
mov o0.xyzw, r1.xyzw
ret
// Approximately 0 instruction slots used
