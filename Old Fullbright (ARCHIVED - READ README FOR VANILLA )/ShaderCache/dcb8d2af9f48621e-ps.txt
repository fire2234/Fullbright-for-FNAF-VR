//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Wed Sep 18 18:13:00 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyz
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xy
// PACKED_EYE_INDEX         0   x           3     NONE    uint   x
// SV_Position              0   xyzw        4      POS   float   xyzw
// SV_IsFrontFace           0   x           5    FFACE    uint
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_DepthLessEqual        0    N/A oDepthLE  DEPTHLE   float    YES
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[8], immediateIndexed
dcl_constantbuffer cb1[142], immediateIndexed
dcl_constantbuffer cb2[63], immediateIndexed
dcl_constantbuffer cb3[10], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear centroid v0.xyz
dcl_input_ps linear centroid v1.xyzw
dcl_input_ps linear v2.xy
dcl_input_ps constant v3.x
dcl_input_ps_siv linear noperspective centroid v4.xyzw, position
dcl_output o0.xyzw
dcl_output oDepthLE
dcl_temps 9
and r0.x, v3.x, l(1)
if_z r0.x
  mov r0.x, cb1[40].x
  mov r0.y, cb1[41].x
  mov r0.z, cb1[42].x
  mov r0.w, cb1[43].x
  mov r1.x, cb1[40].y
  mov r1.y, cb1[41].y
  mov r1.z, cb1[42].y
  mov r1.w, cb1[43].y
  mov r2.x, cb1[40].z
  mov r2.y, cb1[41].z
  mov r2.z, cb1[42].z
  mov r2.w, cb1[43].z
  mov r3.x, cb1[40].w
  mov r3.y, cb1[41].w
  mov r3.z, cb1[42].w
  mov r3.w, cb1[43].w
  mov r4.xyz, cb1[14].xyzx
  mov r5.xyz, cb1[62].xyzx
else
  mov r0.x, cb2[40].x
  mov r0.y, cb2[41].x
  mov r0.z, cb2[42].x
  mov r0.w, cb2[43].x
  mov r1.x, cb2[40].y
  mov r1.y, cb2[41].y
  mov r1.z, cb2[42].y
  mov r1.w, cb2[43].y
  mov r2.x, cb2[40].z
  mov r2.y, cb2[41].z
  mov r2.z, cb2[42].z
  mov r2.w, cb2[43].z
  mov r3.x, cb2[40].w
  mov r3.y, cb2[41].w
  mov r3.z, cb2[42].w
  mov r3.w, cb2[43].w
  mov r4.xyz, cb2[14].xyzx
  mov r5.xyz, cb2[62].xyzx
endif
mul r6.xyz, v0.yzxy, v1.zxyz
mad r6.xyz, v1.yzxy, v0.zxyz, -r6.xyzx
mul r6.xyz, r6.xyzx, v1.wwww
mov r4.w, v4.z
mov r5.w, l(1.000000)
mul r4.w, r4.w, v4.w
mov r7.xyz, v4.xyzx
mov r7.w, l(1.000000)
dp4 r0.x, r7.xyzw, r0.xyzw
dp4 r0.y, r7.xyzw, r1.xyzw
dp4 r0.z, r7.xyzw, r2.xyzw
dp4 r0.w, r7.xyzw, r3.xyzw
div r0.xyz, r0.xyzx, r0.wwww
add r1.xyz, -r5.xyzx, r0.xyzx
dp3 r0.w, -r0.xyzx, -r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, -r0.xyzx
mul r2.xy, v2.xyxx, cb3[8].xxxx
dp3 r3.x, v0.xyzx, r0.xyzx
dp3 r3.y, r6.xyzx, r0.xyzx
dp3 r0.w, v1.xyzx, r0.xyzx
div r2.zw, -r3.xxxy, r0.wwww
mul r2.zw, r2.zzzw, cb3[8].yyyy
add r3.xy, v4.xyxx, -cb1[121].xyxx
add r3.zw, r3.xxxy, cb1[141].xxxx
ftou r3.zw, r3.zzzw
ishl r1.w, r3.w, l(1)
iadd r1.w, r1.w, r3.z
udiv null, r1.w, r1.w, l(5)
utof r1.w, r1.w
mul r3.xy, r3.xyxx, l(0.015625, 0.015625, 0.000000, 0.000000)
sample_b_indexable(texture2d)(float,float,float,float) r3.x, r3.xyxx, t0.xyzw, s0, cb1[133].x
add r1.w, r1.w, r3.x
mul r1.w, r1.w, cb3[8].z
mul r1.w, r1.w, cb3[8].w
mul r3.x, r1.w, l(0.166666672)
min r0.w, |r0.w|, l(1.000000)
mad r1.w, -r1.w, l(0.166666672), cb3[9].x
mad r0.w, r0.w, r1.w, r3.x
round_ni r1.w, r0.w
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mul r3.xy, r0.wwww, r2.zwzz
deriv_rtx_coarse r3.zw, r2.xxxy
deriv_rty_coarse r2.xy, r2.xyxx
add r1.w, r1.w, l(2.000000)
mov r5.xy, l(0,0,0,0)
mov r6.xyzw, l(1.000000,1.000000,1.000000,0)
mov r7.x, l(0)
loop
  itof r7.y, r7.x
  ge r7.y, r7.y, r1.w
  breakc_nz r7.y
  mad r7.yz, v2.xxyx, cb3[8].xxxx, r5.xxyx
  sample_d_indexable(texture2d)(float,float,float,float) r8.xyzw, r7.yzyy, t1.xyzw, s1, r3.zwzz, r2.xyxx
  dp4 r7.y, cb3[3].xyzw, r8.xyzw
  lt r7.z, r6.x, r7.y
  if_nz r7.z
    add r7.z, -r6.z, r6.y
    add r7.w, -r6.x, r7.y
    add r7.z, r7.w, r7.z
    div r7.z, r7.w, r7.z
    add r7.w, -r7.z, l(1.000000)
    mul r7.w, r6.x, r7.w
    mad r6.w, r6.y, r7.z, r7.w
    mad r7.zw, -r7.zzzz, r3.xxxy, r5.xxxy
    mov r5.xy, r7.zwzz
    break
  endif
  add r7.z, -r0.w, r6.x
  mad r5.xy, r2.zwzz, r0.wwww, r5.xyxx
  iadd r7.x, r7.x, l(1)
  mov r6.y, r6.x
  mov r6.z, r7.y
  mov r6.x, r7.z
  mov r6.w, l(0)
endloop
add r0.w, -r6.w, l(1.000000)
mul r5.z, r0.w, cb3[8].y
dp3 r0.w, r5.xyzx, r5.xyzx
sqrt r0.w, r0.w
dp2 r1.w, |r3.zwzz|, |r3.zwzz|
sqrt r1.w, r1.w
deriv_rtx_coarse r3.xyz, r1.xyzx
dp3 r2.z, r3.xyzx, r3.xyzx
sqrt r2.z, r2.z
div r1.w, r1.w, r2.z
dp2 r2.x, |r2.xyxx|, |r2.xyxx|
sqrt r2.x, r2.x
deriv_rty_coarse r1.xyz, r1.xyzx
dp3 r1.x, r1.xyzx, r1.xyzx
sqrt r1.x, r1.x
div r1.x, r2.x, r1.x
max r1.x, r1.x, r1.w
dp3 r0.x, r4.xyzx, r0.xyzx
div r0.x, r1.x, |r0.x|
div r0.x, r0.w, r0.x
mad r0.x, r5.w, v4.w, r0.x
div r0.x, r4.w, r0.x
movc oDepthLE, cb0[7].z, r0.x, v4.z
mov o0.xyzw, l(0,0,0,0)
ret
// Approximately 0 instruction slots used
