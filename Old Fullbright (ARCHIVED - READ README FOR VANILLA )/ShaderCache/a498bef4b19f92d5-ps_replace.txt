// ---- Created with 3Dmigoto v1.3.16 on Mon Sep 16 21:04:39 2019
Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<uint4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[18];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[133];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[29];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = 25.1327419 * cb1[132].z;
  r0.x = sin(r0.x);
  r0.xy = cb2[12].xy * r0.xx;
  r1.xyzw = cb1[41].xyzw * v0.yyyy;
  r1.xyzw = v0.xxxx * cb1[40].xyzw + r1.xyzw;
  r0.zw = asuint(cb0[26].xy);
  r0.zw = v0.xy + -r0.zw;
  r0.zw = cb0[25].zw * r0.zw;
  r2.xy = r0.zw * cb1[122].xy + cb1[121].xy;
  r2.xy = cb1[123].zw * r2.xy;
  r2.z = t0.SampleLevel(s0_s, r2.xy, 0).x;
  r2.xy = cb1[123].xy * r2.xy;
  r2.xy = trunc(r2.xy);
  r3.xy = (int2)r2.xy;
  r2.x = max(1.00000005e-018, r2.z);
  r1.xyzw = r2.xxxx * cb1[42].xyzw + r1.xyzw;
  r1.xyzw = cb1[43].xyzw + r1.xyzw;
  r1.xyz = r1.xyz / r1.www;
  r1.w = dot(r1.xyz, r1.xyz);
  r1.xyz = -cb1[62].xyz + r1.xyz;
  r1.xyz = r1.xyz / cb2[15].zzz;
  r1.w = sqrt(r1.w);
  r2.x = cb2[12].z * cb1[132].z;
  r2.x = frac(r2.x);
  r2.y = cb2[12].w * r2.x;
  r2.y = r1.w / r2.y;
  r2.y = max(0, r2.y);
  r2.y = log2(r2.y);
  r2.y = cb2[13].x * r2.y;
  r2.y = exp2(r2.y);
  r2.z = r2.x * cb2[12].w + cb2[13].y;
  r2.z = r1.w / r2.z;
  r2.z = max(0, r2.z);
  r2.z = log2(r2.z);
  r2.zw = cb2[13].xz * r2.zz;
  r2.zw = exp2(r2.zw);
  r2.yzw = min(float3(1,1,1), r2.yzw);
  r4.xy = float2(1,1) + -r2.zw;
  r2.z = 8 * r2.w;
  r2.y = r4.x * r2.y;
  r2.w = 1 + -r2.x;
  r2.x = r2.x * cb2[12].w + -cb2[13].y;
  r1.w = r1.w / r2.x;
  r1.w = max(0, r1.w);
  r1.w = log2(r1.w);
  r1.w = cb2[13].z * r1.w;
  r1.w = exp2(r1.w);
  r1.w = min(1, r1.w);
  r1.w = r1.w * r4.y;
  r2.x = r4.x + r4.x;
  r2.xz = min(float2(1,1), r2.xz);
  r2.w = log2(r2.w);
  r2.w = 0.899999976 * r2.w;
  r2.w = exp2(r2.w);
  r4.x = r2.y * r2.w;
  r0.xy = r4.xx * r0.xy + r0.zw;
  r0.z = -cb2[14].x + cb2[13].w;
  r0.z = r2.z * r0.z + cb2[14].x;
  r0.zw = cb1[122].xy / r0.zz;
  r0.zw = floor(r0.zw);
  r0.xy = r0.xy * r0.zw;
  r0.zw = float2(1,1) / r0.zw;
  r0.xy = ceil(r0.xy);
  r0.xy = float2(-0.5,-0.5) + r0.xy;
  r0.xy = r0.xy * r0.zw;
  r0.xy = r0.xy * cb0[28].xy + cb0[28].zw;
  r0.xy = max(cb0[14].xy, r0.xy);
  r0.xy = min(cb0[14].zw, r0.xy);
  r0.xyz = t3.Sample(s2_s, r0.xy).xyz;
  r0.w = dot(r0.xyz, float3(0.300000012,0.589999974,0.109999999));
  r4.yzw = r0.www + -r0.xyz;
  r4.yzw = cb2[14].yyy * r4.yzw + r0.xyz;
  r4.yzw = cb2[14].zzz * r4.yzw;
  r5.xyz = r0.xyz * cb2[14].www + -r4.yzw;
  r4.yzw = r2.xxx * r5.xyz + r4.yzw;
  r0.xyz = cb2[8].xyz * r0.xyz;
  r5.xyz = t2.Sample(s1_s, r1.yz).xyz;
  r6.xyz = t2.Sample(s1_s, r1.xz).xyz;
  r1.xyz = t2.Sample(s1_s, r1.xy).xyz;
  r5.xyz = -r6.xyz + r5.xyz;
  r0.w = saturate(cb2[2].x);
  r5.xyz = r0.www * r5.xyz + r6.xyz;
  r1.xyz = -r5.xyz + r1.xyz;
  r0.w = saturate(cb2[16].y);
  r1.xyz = r0.www * r1.xyz + r5.xyz;
  r1.xyz = saturate(r1.xyz + r1.xyz);
  r0.w = r2.w * r1.w;
  r1.w = r2.y * r2.w + r0.w;
  r1.xyz = r0.www * r1.xyz;
  r1.xyz = r1.xyz * cb2[5].xyz + r4.yzw;
  r0.w = min(1, r1.w);
  r3.zw = float2(0,0);
  r1.w = t1.Load(r3.xyz).y;
  r1.w = (uint)r1.w;
  r1.w = -cb2[17].x + r1.w;
  r2.x = cmp(0 < r1.w);
  r1.w = cmp(r1.w < 0);
  r1.w = (int)-r2.x + (int)r1.w;
  r1.w = (int)r1.w;
  r1.w = 1 + -abs(r1.w);
  r0.w = r1.w * r0.w;
  r0.w = saturate(4 * r0.w);
  r1.w = 1 + -r0.w;
  r0.xyz = r1.www * r0.xyz + -r1.xyz;
  r0.xyz = r4.xxx * r0.xyz + r1.xyz;
  r1.xyz = cb2[10].xyz + -r0.xyz;
  r0.xyz = r0.www * r1.xyz + r0.xyz;
  r0.xyz = cb2[11].xyz + r0.xyz;
  o0.xyz = max(float3(0,0,0), r0.xyz);
  o0.w = 1;
  return;
}