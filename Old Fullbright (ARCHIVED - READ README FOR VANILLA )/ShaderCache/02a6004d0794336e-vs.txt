//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jul 18 00:44:58 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// ATTRIBUTE                0   xyzw        0     NONE   float   xyzw
// SV_VertexID              0   x           1   VERTID    uint
// SV_InstanceID            0   x           2   INSTID    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 6   xyzw        0     NONE   float   xyzw
// TEXCOORD                 7   xyzw        1     NONE   float   xyzw
// PACKED_EYE_INDEX         0   x           2     NONE    uint   x
// SV_POSITION              0   xyzw        3      POS   float   xyzw
// SV_ClipDistance          1   x           4  CLIPDST   float   x
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -1.000000, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 1.000000} }
dcl_constantbuffer cb0[7], immediateIndexed
dcl_constantbuffer cb1[164], immediateIndexed
dcl_constantbuffer cb2[4], immediateIndexed
dcl_constantbuffer cb3[164], immediateIndexed
dcl_input v0.xyzw
dcl_input_sgv v2.x, instance_id
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.x
dcl_output_siv o3.xyzw, position
dcl_output_siv o4.x, clip_distance
dcl_temps 14
and r0.x, v2.x, l(1)
if_z r0.x
  mov r1.x, cb1[0].x
  mov r1.y, cb1[1].x
  mov r1.z, cb1[2].x
  mov r1.w, cb1[3].x
  mov r2.x, cb1[0].y
  mov r2.y, cb1[1].y
  mov r2.z, cb1[2].y
  mov r2.w, cb1[3].y
  mov r3.x, cb1[0].z
  mov r3.y, cb1[1].z
  mov r3.z, cb1[2].z
  mov r3.w, cb1[3].z
  mov r4.x, cb1[0].w
  mov r4.y, cb1[1].w
  mov r4.z, cb1[2].w
  mov r4.w, cb1[3].w
  mov r5.x, cb1[83].x
  mov r5.y, cb1[84].x
  mov r5.z, cb1[85].x
  mov r5.w, cb1[86].x
  mov r6.x, cb1[83].y
  mov r6.y, cb1[84].y
  mov r6.z, cb1[85].y
  mov r6.w, cb1[86].y
  mov r7.x, cb1[83].z
  mov r7.y, cb1[84].z
  mov r7.z, cb1[85].z
  mov r7.w, cb1[86].z
  mov r8.x, cb1[83].w
  mov r8.y, cb1[84].w
  mov r8.z, cb1[85].w
  mov r8.w, cb1[86].w
  mov r0.yzw, cb1[105].xxyz
  mov r9.x, cb1[163].y
  mov r9.yzw, cb1[62].xxyz
else
  mov r1.x, cb3[0].x
  mov r1.y, cb3[1].x
  mov r1.z, cb3[2].x
  mov r1.w, cb3[3].x
  mov r2.x, cb3[0].y
  mov r2.y, cb3[1].y
  mov r2.z, cb3[2].y
  mov r2.w, cb3[3].y
  mov r3.x, cb3[0].z
  mov r3.y, cb3[1].z
  mov r3.z, cb3[2].z
  mov r3.w, cb3[3].z
  mov r4.x, cb3[0].w
  mov r4.y, cb3[1].w
  mov r4.z, cb3[2].w
  mov r4.w, cb3[3].w
  mov r5.x, cb3[83].x
  mov r5.y, cb3[84].x
  mov r5.z, cb3[85].x
  mov r5.w, cb3[86].x
  mov r6.x, cb3[83].y
  mov r6.y, cb3[84].y
  mov r6.z, cb3[85].y
  mov r6.w, cb3[86].y
  mov r7.x, cb3[83].z
  mov r7.y, cb3[84].z
  mov r7.z, cb3[85].z
  mov r7.w, cb3[86].z
  mov r8.x, cb3[83].w
  mov r8.y, cb3[84].w
  mov r8.z, cb3[85].w
  mov r8.w, cb3[86].w
  mov r0.yzw, cb3[105].xxyz
  mov r9.x, cb3[163].y
  mov r9.yzw, cb3[62].xxyz
endif
mul r10.xyz, v0.yyyy, cb2[1].xyzx
mad r10.xyz, cb2[0].xyzx, v0.xxxx, r10.xyzx
mad r10.xyz, cb2[2].xyzx, v0.zzzz, r10.xyzx
add r9.yzw, r9.yyzw, cb2[3].xxyz
add r10.xyz, r9.yzwy, r10.xyzx
add r11.xyw, r0.yzyw, cb0[6].xyxz
mov r12.x, cb0[3].x
mov r12.y, cb0[4].x
mov r12.z, cb0[5].x
mov r12.w, r11.x
dp4 r12.x, v0.xyzw, r12.xyzw
mov r13.x, cb0[3].y
mov r13.y, cb0[4].y
mov r13.z, cb0[5].y
mov r13.w, r11.y
dp4 r12.y, v0.xyzw, r13.xyzw
mov r11.x, cb0[3].z
mov r11.y, cb0[4].z
mov r11.z, cb0[5].z
dp4 r12.z, v0.xyzw, r11.xyzw
mov r12.w, l(1.000000)
dp4 o1.x, r12.xyzw, r5.xyzw
dp4 o1.y, r12.xyzw, r6.xyzw
dp4 o1.z, r12.xyzw, r7.xyzw
dp4 o1.w, r12.xyzw, r8.xyzw
mov r10.w, l(1.000000)
dp4 r1.x, r10.xyzw, r1.xyzw
dp4 r1.y, r10.xyzw, r2.xyzw
dp4 r1.z, r10.xyzw, r3.xyzw
dp4 r1.w, r10.xyzw, r4.xyzw
if_nz cb0[0].x
  mov r2.x, icb[r0.x + 0].x
  mov r2.y, l(1.000000)
  dp2 o4.x, r1.xwxx, r2.xyxx
  mul r0.y, r9.x, l(0.500000)
  mul r0.z, r1.w, icb[r0.x + 0].x
  mad r0.w, -r9.x, l(0.500000), l(1.000000)
  mul r0.z, r0.w, r0.z
  mad r2.x, r1.x, r0.y, r0.z
else
  mov r2.x, r1.x
  mov o4.x, l(0)
endif
ilt r0.y, l(1), cb1[125].x
mul r0.z, r1.w, l(0.001000)
and r0.y, r0.z, r0.y
add r2.y, r0.y, r1.z
movc r0.y, cb0[0].x, l(1), l(0)
imad o2.x, r0.y, l(0x80000000), r0.x
mov o0.xyzw, r1.xyzw
mov r2.zw, r1.yyyw
mov o3.xyzw, r2.xzyw
ret
// Approximately 0 instruction slots used
