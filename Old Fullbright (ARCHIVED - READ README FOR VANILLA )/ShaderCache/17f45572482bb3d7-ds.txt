//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jul 18 00:47:02 2019
//
//
// Patch Constant signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TessFactor            0   x           0  TRIEDGE   float
// SV_TessFactor            1   x           1  TRIEDGE   float
// SV_TessFactor            2   x           2  TRIEDGE   float
// SV_InsideTessFactor      0   x           3   TRIINT   float
// PN_POSITION              9   xyzw        4     NONE   float   xyzw
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyz
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy
// PN_TessellationMultiplier     0     z         2     NONE   float
// PN_WorldDisplacementMultiplier     0      w        2     NONE   float      w
// PACKED_EYE_INDEX         0   x           3     NONE    uint   x
// TEXCOORD                 7   xyzw        4     NONE   float   xyzw
// TEXCOORD                 9   xyz         5     NONE   float   xyz
// VS_To_DS_Position        0   xyzw        6     NONE   float
// PN_POSITION              0   xyzw        7     NONE   float   xyzw
// PN_POSITION              1   xyzw        8     NONE   float   xyzw
// PN_POSITION              2   xyzw        9     NONE   float   xyzw
// PN_DisplacementScales     0   xyz        10     NONE   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyz
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy
// PACKED_EYE_INDEX         0   x           3     NONE    uint   x
// TEXCOORD                 7   xyzw        4     NONE   float   xyzw
// TEXCOORD                 9   xyz         5     NONE   float   xyz
// SV_POSITION              0   xyzw        6      POS   float   xyzw
// SV_ClipDistance          1   x           7  CLIPDST   float   x
//
ds_5_0
dcl_input_control_point_count 3
dcl_tessellator_domain domain_tri
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -1.000000, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 1.000000} }
dcl_constantbuffer cb0[164], immediateIndexed
dcl_constantbuffer cb1[164], immediateIndexed
dcl_constantbuffer cb2[19], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input vpc4.xyzw
dcl_input vDomain.xyz
dcl_input vicp[3][0].xyz
dcl_input vicp[3][1].xyzw
dcl_input vicp[3][2].xy
dcl_input vicp[3][2].w
dcl_input vicp[3][3].x
dcl_input vicp[3][4].xyzw
dcl_input vicp[3][5].xyz
dcl_input vicp[3][7].xyzw
dcl_input vicp[3][8].xyzw
dcl_input vicp[3][9].xyzw
dcl_output o0.xyz
dcl_output o1.xyzw
dcl_output o2.xy
dcl_output o3.x
dcl_output o4.xyzw
dcl_output o5.xyz
dcl_output_siv o6.xyzw, position
dcl_output_siv o7.x, clip_distance
dcl_temps 10
and r0.x, l(1), vicp[0][3].x
if_z r0.x
  mov r1.x, cb0[0].x
  mov r1.y, cb0[1].x
  mov r1.z, cb0[2].x
  mov r1.w, cb0[3].x
  mov r2.x, cb0[0].y
  mov r2.y, cb0[1].y
  mov r2.z, cb0[2].y
  mov r2.w, cb0[3].y
  mov r3.x, cb0[0].z
  mov r3.y, cb0[1].z
  mov r3.z, cb0[2].z
  mov r3.w, cb0[3].z
  mov r4.x, cb0[0].w
  mov r4.y, cb0[1].w
  mov r4.z, cb0[2].w
  mov r4.w, cb0[3].w
  mov r0.y, cb0[163].y
else
  mov r1.x, cb1[0].x
  mov r1.y, cb1[1].x
  mov r1.z, cb1[2].x
  mov r1.w, cb1[3].x
  mov r2.x, cb1[0].y
  mov r2.y, cb1[1].y
  mov r2.z, cb1[2].y
  mov r2.w, cb1[3].y
  mov r3.x, cb1[0].z
  mov r3.y, cb1[1].z
  mov r3.z, cb1[2].z
  mov r3.w, cb1[3].z
  mov r4.x, cb1[0].w
  mov r4.y, cb1[1].w
  mov r4.z, cb1[2].w
  mov r4.w, cb1[3].w
  mov r0.y, cb1[163].y
endif
mul r5.xyz, vDomain.xyzx, vDomain.xyzx
mul r6.xyz, r5.xyzx, l(3.000000, 3.000000, 3.000000, 0.000000)
mul r7.xyzw, r5.xxxx, vicp[0][7].xyzw
mul r8.xyzw, r5.yyyy, vicp[1][7].xyzw
mul r8.xyzw, r8.xyzw, vDomain.yyyy
mad r7.xyzw, r7.xyzw, vDomain.xxxx, r8.xyzw
mul r5.xyzw, r5.zzzz, vicp[2][7].xyzw
mad r5.xyzw, r5.xyzw, vDomain.zzzz, r7.xyzw
mul r7.xyzw, r6.xxxx, vicp[0][8].xyzw
mad r5.xyzw, r7.xyzw, vDomain.yyyy, r5.xyzw
mul r7.xyzw, r6.yyyy, vicp[0][9].xyzw
mad r5.xyzw, r7.xyzw, vDomain.xxxx, r5.xyzw
mul r7.xyzw, r6.yyyy, vicp[1][8].xyzw
mad r5.xyzw, r7.xyzw, vDomain.zzzz, r5.xyzw
mul r7.xyzw, r6.zzzz, vicp[1][9].xyzw
mad r5.xyzw, r7.xyzw, vDomain.yyyy, r5.xyzw
mul r7.xyzw, r6.zzzz, vicp[2][8].xyzw
mad r5.xyzw, r7.xyzw, vDomain.xxxx, r5.xyzw
mul r6.xyzw, r6.xxxx, vicp[2][9].xyzw
mad r5.xyzw, r6.xyzw, vDomain.zzzz, r5.xyzw
mul r6.xyzw, vpc4.xyzw, vDomain.zzzz
mul r6.xyzw, r6.xyzw, vDomain.xxxx
mul r6.xyzw, r6.xyzw, vDomain.yyyy
mad r5.xyzw, r6.xyzw, l(6.000000, 6.000000, 6.000000, 6.000000), r5.xyzw
mul r6.xyz, vDomain.yyyy, vicp[1][0].xyzx
mad r6.xyz, vicp[0][0].xyzx, vDomain.xxxx, r6.xyzx
mul r7.xyzw, vDomain.yyyy, vicp[1][1].xyzw
mad r7.xyzw, vicp[0][1].xyzw, vDomain.xxxx, r7.xyzw
mul r0.zw, vDomain.yyyy, vicp[1][2].xxxy
mad r0.zw, vicp[0][2].xxxy, vDomain.xxxx, r0.zzzw
mul r8.xyzw, vDomain.yyyy, vicp[1][4].xyzw
mad r8.xyzw, vicp[0][4].xyzw, vDomain.xxxx, r8.xyzw
mul r9.xyz, vDomain.yyyy, vicp[1][5].xyzx
mad r9.xyz, vicp[0][5].xyzx, vDomain.xxxx, r9.xyzx
mad o0.xyz, vicp[2][0].xyzx, vDomain.zzzz, r6.xyzx
mad r6.xyzw, vicp[2][1].xyzw, vDomain.zzzz, r7.xyzw
mad r0.zw, vicp[2][2].xxxy, vDomain.zzzz, r0.zzzw
mad o4.xyzw, vicp[2][4].xyzw, vDomain.zzzz, r8.xyzw
mad o5.xyz, vicp[2][5].xyzx, vDomain.zzzz, r9.xyzx
mul r7.x, cb0[132].z, cb2[18].y
mul r8.xyzw, r0.zwzw, l(20.000000, 2.000000, 20.000000, 2.000000)
mad r9.xyzw, r7.xxxx, l(0.100000, 0.100000, -0.100000, -0.100000), r8.zwzw
sample_l_indexable(texture2d)(float,float,float,float) r7.yzw, r9.xyxx, t0.wxyz, s0, l(-1.000000)
add r9.xy, r9.zwzz, l(0.418100, 0.354800, 0.000000, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r9.xyz, r9.xyxx, t0.xyzw, s0, l(-1.000000)
add r7.yzw, r7.yyzw, r9.xxyz
mad r8.xyzw, r7.xxxx, l(-0.100000, 0.100000, 0.100000, -0.100000), r8.xyzw
add r8.xyzw, r8.xyzw, l(0.864861, 0.148384, 0.651340, 0.751638)
sample_l_indexable(texture2d)(float,float,float,float) r9.xyz, r8.xyxx, t0.xyzw, s0, l(-1.000000)
sample_l_indexable(texture2d)(float,float,float,float) r8.xyz, r8.zwzz, t0.xyzw, s0, l(-1.000000)
add r8.xyz, r8.xyzx, r9.xyzx
add r7.xyz, r7.yzwy, r8.xyzx
mul r7.xyz, r7.xyzx, cb2[18].zzzz
mul r7.xyz, r6.xyzx, r7.xyzx
mul r7.xyz, r7.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)
mad r7.xyz, cb2[17].zzzz, -r7.xyzx, r7.xyzx
mul r7.w, vDomain.y, vicp[1][2].w
mad r7.w, vicp[0][2].w, vDomain.x, r7.w
mad r7.w, vicp[2][2].w, vDomain.z, r7.w
mad r5.xyz, r7.xyzx, r7.wwww, r5.xyzx
dp4 r1.x, r5.xyzw, r1.xyzw
dp4 r1.y, r5.xyzw, r2.xyzw
dp4 r1.z, r5.xyzw, r3.xyzw
dp4 r1.w, r5.xyzw, r4.xyzw
ushr r2.x, vicp[0][3].x, l(1)
if_nz r2.x
  mov r2.x, icb[r0.x + 0].x
  mov r2.y, l(1.000000)
  dp2 o7.x, r1.xwxx, r2.xyxx
  mul r2.x, r0.y, l(0.500000)
  mul r0.x, r1.w, icb[r0.x + 0].x
  mad r0.y, -r0.y, l(0.500000), l(1.000000)
  mul r0.x, r0.y, r0.x
  mad r1.x, r1.x, r2.x, r0.x
else
  mov o7.x, l(0)
endif
mov o1.xyzw, r6.xyzw
mov o6.xyzw, r1.xyzw
mov o2.xy, r0.zwzz
mov o3.x, vicp[0][3].x
ret
// Approximately 0 instruction slots used
