//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jul 18 00:46:48 2019
//
//
// Patch Constant signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TessFactor            0   x           0  TRIEDGE   float   x
// SV_TessFactor            1   x           1  TRIEDGE   float   x
// SV_TessFactor            2   x           2  TRIEDGE   float   x
// SV_InsideTessFactor      0   x           3   TRIINT   float   x
// PN_POSITION              9   xyzw        4     NONE   float   xyzw
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyzw
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// PACKED_EYE_INDEX         0   x           3     NONE    uint   x
// VS_to_DS_Position        0   xyzw        4     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyzw
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// PACKED_EYE_INDEX         0   x           3     NONE    uint   x
// VS_to_DS_Position        0   xyzw        4     NONE   float   xyzw
// PN_POSITION              0   xyzw        5     NONE   float   xyzw
// PN_POSITION              1   xyzw        6     NONE   float   xyzw
// PN_POSITION              2   xyzw        7     NONE   float   xyzw
// PN_DisplacementScales     0   xyz         8     NONE   float   xyz
// PN_TessellationMultiplier     0      w        8     NONE   float      w
// PN_WorldDisplacementMultiplier     0   x           9     NONE   float   x
//
hs_5_0
hs_decls
dcl_input_control_point_count 12
dcl_output_control_point_count 3
dcl_tessellator_domain domain_tri
dcl_tessellator_partitioning partitioning_fractional_odd
dcl_tessellator_output_primitive output_triangle_cw
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[15], immediateIndexed
dcl_constantbuffer cb1[18], immediateIndexed
dcl_constantbuffer cb2[133], immediateIndexed
dcl_constantbuffer cb3[61], immediateIndexed
hs_control_point_phase
dcl_input vOutputControlPointID
dcl_input v[12][0].xyzw
dcl_input v[12][1].xyzw
dcl_input v[12][2].xyzw
dcl_input v[12][3].x
dcl_input v[12][4].xyzw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.x
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xyz
dcl_output o8.w
dcl_output o9.x
dcl_temps 4
mov r0.x, vOutputControlPointID
mov o0.xyzw, v[r0.x + 0][0].xyzw
mov o1.xyzw, v[r0.x + 0][1].xyzw
mov o2.xyzw, v[r0.x + 0][2].xyzw
mov o3.x, v[r0.x + 0][3].x
mov o4.xyzw, v[r0.x + 0][4].xyzw
mov o5.xyzw, v[r0.x + 0][4].xyzw
mov r1.w, l(0)
ishl r0.y, vOutputControlPointID, l(1)
add r2.xyz, -v[r0.y + 3][4].xyzx, v[r0.y + 4][4].xyzx
dp3 r0.z, r2.xyzx, v[r0.y + 3][1].xyzx
mad r2.xyzw, v[r0.y + 3][4].xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), v[r0.y + 4][4].xyzw
mov r1.xyz, v[r0.y + 3][1].xyzx
mad r1.xyzw, -r0.zzzz, r1.xyzw, r2.xyzw
mul r1.xyzw, r1.xyzw, l(0.333333343, 0.333333343, 0.333333343, 0.333333343)
mov r2.w, l(0)
ult r0.z, vOutputControlPointID, l(2)
iadd r0.w, vOutputControlPointID, l(1)
and r0.z, r0.w, r0.z
add r3.xyz, -v[r0.x + 0][4].xyzx, v[r0.z + 0][4].xyzx
dp3 r0.w, r3.xyzx, v[r0.x + 0][1].xyzx
mad r3.xyzw, v[r0.x + 0][4].xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), v[r0.z + 0][4].xyzw
mov r2.xyz, v[r0.x + 0][1].xyzx
mad r2.xyzw, -r0.wwww, r2.xyzw, r3.xyzw
mad r1.xyzw, r2.xyzw, l(0.333333343, 0.333333343, 0.333333343, 0.333333343), r1.xyzw
mul o6.xyzw, r1.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
add r1.xyz, -v[r0.y + 4][4].xyzx, v[r0.y + 3][4].xyzx
dp3 r0.w, r1.xyzx, v[r0.y + 4][1].xyzx
mov r1.w, l(0)
mad r2.xyzw, v[r0.y + 4][4].xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), v[r0.y + 3][4].xyzw
mov r1.xyz, v[r0.y + 4][1].xyzx
mad r1.xyzw, -r0.wwww, r1.xyzw, r2.xyzw
mul r1.xyzw, r1.xyzw, l(0.333333343, 0.333333343, 0.333333343, 0.333333343)
mov r2.w, l(0)
mov r2.xyz, v[r0.z + 0][1].xyzx
add r3.xyz, -v[r0.z + 0][4].xyzx, v[r0.x + 0][4].xyzx
dp3 r0.y, r3.xyzx, v[r0.z + 0][1].xyzx
mad r3.xyzw, v[r0.z + 0][4].xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), v[r0.x + 0][4].xyzw
mad r2.xyzw, -r0.yyyy, r2.xyzw, r3.xyzw
mad r1.xyzw, r2.xyzw, l(0.333333343, 0.333333343, 0.333333343, 0.333333343), r1.xyzw
mul o7.xyzw, r1.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
mul r0.yzw, v[r0.x + 0][0].yyzx, v[r0.x + 0][1].zzxy
mad r0.yzw, v[r0.x + 0][1].yyzx, v[r0.x + 0][0].zzxy, -r0.yyzw
mul r0.yzw, r0.yyzw, v[r0.x + 0][1].wwww
dp3 o8.y, r0.yzwy, cb0[14].xyzx
mad o8.w, cb1[17].z, l(-2.000000), l(2.000000)
dp3 o8.x, v[r0.x + 0][0].xyzx, cb0[14].xyzx
dp3 o8.z, v[r0.x + 0][1].xyzx, cb0[14].xyzx
mov o9.x, l(1.000000)
ret
hs_fork_phase
dcl_input vocp[3][3].x
dcl_input vocp[3][5].xyz
dcl_input vocp[3][8].w
dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
dcl_output_siv o3.x, finalTriInsideTessFactor
dcl_temps 13
and r0.x, l(1), vocp[0][3].x
if_z r0.x
  mov r0.x, cb2[0].x
  mov r0.y, cb2[1].x
  mov r0.z, cb2[2].x
  mov r0.w, cb2[3].x
  mov r1.x, cb2[0].y
  mov r1.y, cb2[1].y
  mov r1.z, cb2[2].y
  mov r1.w, cb2[3].y
  mov r2.x, cb2[0].z
  mov r2.y, cb2[1].z
  mov r2.z, cb2[2].z
  mov r2.w, cb2[3].z
  mov r3.x, cb2[0].w
  mov r3.y, cb2[1].w
  mov r3.z, cb2[2].w
  mov r3.w, cb2[3].w
  mov r4.x, cb2[24].x
  mov r4.y, cb2[25].x
  mov r4.z, cb2[26].x
  mov r5.x, cb2[24].y
  mov r5.y, cb2[25].y
  mov r5.z, cb2[26].y
  mov r6.x, cb2[24].z
  mov r6.y, cb2[25].z
  mov r6.z, cb2[26].z
  mov r7.x, cb2[24].w
  mov r7.y, cb2[25].w
  mov r7.z, cb2[26].w
  mov r8.xyz, cb2[60].xyzx
else
  mov r0.x, cb3[0].x
  mov r0.y, cb3[1].x
  mov r0.z, cb3[2].x
  mov r0.w, cb3[3].x
  mov r1.x, cb3[0].y
  mov r1.y, cb3[1].y
  mov r1.z, cb3[2].y
  mov r1.w, cb3[3].y
  mov r2.x, cb3[0].z
  mov r2.y, cb3[1].z
  mov r2.z, cb3[2].z
  mov r2.w, cb3[3].z
  mov r3.x, cb3[0].w
  mov r3.y, cb3[1].w
  mov r3.z, cb3[2].w
  mov r3.w, cb3[3].w
  mov r4.x, cb3[24].x
  mov r4.y, cb3[25].x
  mov r4.z, cb3[26].x
  mov r5.x, cb3[24].y
  mov r5.y, cb3[25].y
  mov r5.z, cb3[26].y
  mov r6.x, cb3[24].z
  mov r6.y, cb3[25].z
  mov r6.z, cb3[26].z
  mov r7.x, cb3[24].w
  mov r7.y, cb3[25].w
  mov r7.z, cb3[26].w
  mov r8.xyz, cb3[60].xyzx
endif
add r4.w, vocp[2][8].w, vocp[1][8].w
mul r9.x, r4.w, l(0.500000)
add r4.w, vocp[0][8].w, vocp[2][8].w
mul r9.y, r4.w, l(0.500000)
add r4.w, vocp[1][8].w, vocp[0][8].w
mul r9.z, r4.w, l(0.500000)
add r4.w, r4.w, vocp[2][8].w
mul r9.w, r4.w, l(0.333000)
dp3 r10.x, l(100.000000, 100.000000, 100.000000, 0.000000), r4.xyzx
dp3 r10.y, l(100.000000, 100.000000, 100.000000, 0.000000), r5.xyzx
dp3 r10.z, l(100.000000, 100.000000, 100.000000, 0.000000), r6.xyzx
dp3 r4.w, l(100.000000, 100.000000, 100.000000, 0.000000), r7.xyzx
mov r7.xyz, vocp[0][5].xyzx
mov r7.w, l(1.000000)
dp4 r11.x, r7.xyzw, r0.xyzw
dp4 r11.y, r7.xyzw, r1.xyzw
dp4 r11.z, r7.xyzw, r2.xyzw
dp4 r5.w, r7.xyzw, r3.xyzw
add r7.xyz, -r10.xyzx, r11.xyzx
add r6.w, r4.w, r5.w
lt r7.xyz, r7.xyzx, r6.wwww
add r10.xyz, r10.xyzx, r11.xyzx
add r5.w, -r4.w, -r5.w
lt r10.xyz, r5.wwww, r10.xyzx
bfi r10.xyz, l(1, 1, 1, 0), l(1, 1, 1, 0), r10.xyzx, l(0, 0, 0, 0)
bfi r7.xyz, l(1, 1, 1, 0), l(0, 0, 0, 0), r7.xyzx, r10.xyzx
dp3 r10.x, l(100.000000, 100.000000, 100.000000, 0.000000), r4.xyzx
dp3 r10.y, l(100.000000, 100.000000, 100.000000, 0.000000), r5.xyzx
dp3 r10.z, l(100.000000, 100.000000, 100.000000, 0.000000), r6.xyzx
mov r11.xyz, vocp[1][5].xyzx
mov r11.w, l(1.000000)
dp4 r12.x, r11.xyzw, r0.xyzw
dp4 r12.y, r11.xyzw, r1.xyzw
dp4 r12.z, r11.xyzw, r2.xyzw
dp4 r5.w, r11.xyzw, r3.xyzw
add r11.xyz, -r10.xyzx, r12.xyzx
add r6.w, r4.w, r5.w
lt r11.xyz, r11.xyzx, r6.wwww
add r10.xyz, r10.xyzx, r12.xyzx
add r5.w, -r4.w, -r5.w
lt r10.xyz, r5.wwww, r10.xyzx
bfi r10.xyz, l(1, 1, 1, 0), l(1, 1, 1, 0), r10.xyzx, l(0, 0, 0, 0)
bfi r10.xyz, l(1, 1, 1, 0), l(0, 0, 0, 0), r11.xyzx, r10.xyzx
or r7.xyz, r7.xyzx, r10.xyzx
dp3 r4.x, l(100.000000, 100.000000, 100.000000, 0.000000), r4.xyzx
dp3 r4.y, l(100.000000, 100.000000, 100.000000, 0.000000), r5.xyzx
dp3 r4.z, l(100.000000, 100.000000, 100.000000, 0.000000), r6.xyzx
mov r5.xyz, vocp[2][5].xyzx
mov r5.w, l(1.000000)
dp4 r0.x, r5.xyzw, r0.xyzw
dp4 r0.y, r5.xyzw, r1.xyzw
dp4 r0.z, r5.xyzw, r2.xyzw
dp4 r0.w, r5.xyzw, r3.xyzw
add r1.xyz, -r4.xyzx, r0.xyzx
add r1.w, r4.w, r0.w
lt r1.xyz, r1.xyzx, r1.wwww
add r0.xyz, r4.xyzx, r0.xyzx
add r0.w, -r4.w, -r0.w
lt r0.xyz, r0.wwww, r0.xyzx
bfi r0.xyz, l(1, 1, 1, 0), l(1, 1, 1, 0), r0.xyzx, l(0, 0, 0, 0)
bfi r0.xyz, l(1, 1, 1, 0), l(0, 0, 0, 0), r1.xyzx, r0.xyzx
or r0.xyz, r0.xyzx, r7.xyzx
ine r0.xyz, r0.xyzx, l(3, 3, 3, 0)
or r0.x, r0.y, r0.x
or r0.x, r0.z, r0.x
add r0.yzw, -vocp[1][5].xxyz, vocp[0][5].xxyz
add r1.xyz, -vocp[2][5].xyzx, vocp[1][5].xyzx
add r2.xyz, -vocp[0][5].xyzx, vocp[2][5].xyzx
add r3.xyz, vocp[1][5].xyzx, vocp[0][5].xyzx
mad r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -r8.xyzx
add r4.xyz, vocp[2][5].xyzx, vocp[1][5].xyzx
mad r4.xyz, r4.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -r8.xyzx
add r5.xyz, vocp[0][5].xyzx, vocp[2][5].xyzx
mad r5.xyz, r5.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -r8.xyzx
dp3 r1.x, r1.xyzx, r1.xyzx
dp3 r1.y, r4.xyzx, r4.xyzx
div r1.x, r1.x, r1.y
sqrt r1.x, r1.x
dp3 r2.x, r2.xyzx, r2.xyzx
dp3 r2.y, r5.xyzx, r5.xyzx
div r2.x, r2.x, r2.y
sqrt r1.y, r2.x
dp3 r0.y, r0.yzwy, r0.yzwy
dp3 r0.z, r3.xyzx, r3.xyzx
div r0.y, r0.y, r0.z
sqrt r1.z, r0.y
add r0.y, r1.y, r1.x
add r0.y, r1.z, r0.y
mul r1.w, r0.y, cb2[132].y
mov r2.x, cb2[132].y
mov r2.w, l(0.333000)
mul r1.xyzw, r1.xyzw, r2.xxxw
movc r0.xyzw, r0.xxxx, l(0,0,0,0), r1.xyzw
mul r0.xyzw, r0.xyzw, r9.xyzw
max r0.xyzw, r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
min r0.xyzw, r0.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000)
mov o0.x, r0.x
mov o1.x, r0.y
mov o2.x, r0.z
mov o3.x, r0.w
ret
hs_fork_phase
dcl_input vocp[3][5].x
dcl_input vocp[3][6].x
dcl_input vocp[3][7].x
dcl_output o4.x
dcl_temps 1
add r0.x, vocp[0][6].x, vocp[0][7].x
add r0.x, r0.x, vocp[1][6].x
add r0.x, r0.x, vocp[1][7].x
add r0.x, r0.x, vocp[2][6].x
add r0.x, r0.x, vocp[2][7].x
mul r0.x, r0.x, l(0.166666672)
add r0.y, vocp[1][5].x, vocp[2][5].x
add r0.y, r0.y, vocp[0][5].x
mad r0.y, -r0.y, l(0.333333343), r0.x
mad o4.x, r0.y, l(0.500000), r0.x
ret
hs_fork_phase
dcl_input vocp[3][5].y
dcl_input vocp[3][6].y
dcl_input vocp[3][7].y
dcl_output o4.y
dcl_temps 1
add r0.x, vocp[0][6].y, vocp[0][7].y
add r0.x, r0.x, vocp[1][6].y
add r0.x, r0.x, vocp[1][7].y
add r0.x, r0.x, vocp[2][6].y
add r0.x, r0.x, vocp[2][7].y
mul r0.x, r0.x, l(0.166666672)
add r0.y, vocp[1][5].y, vocp[2][5].y
add r0.y, r0.y, vocp[0][5].y
mad r0.y, -r0.y, l(0.333333343), r0.x
mad o4.y, r0.y, l(0.500000), r0.x
ret
hs_fork_phase
dcl_input vocp[3][5].z
dcl_input vocp[3][6].z
dcl_input vocp[3][7].z
dcl_output o4.z
dcl_temps 1
add r0.x, vocp[0][6].z, vocp[0][7].z
add r0.x, r0.x, vocp[1][6].z
add r0.x, r0.x, vocp[1][7].z
add r0.x, r0.x, vocp[2][6].z
add r0.x, r0.x, vocp[2][7].z
mul r0.x, r0.x, l(0.166666672)
add r0.y, vocp[1][5].z, vocp[2][5].z
add r0.y, r0.y, vocp[0][5].z
mad r0.y, -r0.y, l(0.333333343), r0.x
mad o4.z, r0.y, l(0.500000), r0.x
ret
hs_fork_phase
dcl_input vocp[3][5].w
dcl_input vocp[3][6].w
dcl_input vocp[3][7].w
dcl_output o4.w
dcl_temps 1
add r0.x, vocp[0][6].w, vocp[0][7].w
add r0.x, r0.x, vocp[1][6].w
add r0.x, r0.x, vocp[1][7].w
add r0.x, r0.x, vocp[2][6].w
add r0.x, r0.x, vocp[2][7].w
mul r0.x, r0.x, l(0.166666672)
add r0.y, vocp[1][5].w, vocp[2][5].w
add r0.y, r0.y, vocp[0][5].w
mad r0.y, -r0.y, l(0.333333343), r0.x
mad o4.w, r0.y, l(0.500000), r0.x
ret
// Approximately 0 instruction slots used
