// ---- Created with 3Dmigoto v1.3.16 on Thu Jul 18 00:47:04 2019
Texture2D<float4> t0 : register(t0);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[8];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[129];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[9];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  linear centroid float4 v0 : TEXCOORD10,
  linear centroid float4 v1 : TEXCOORD11,
  uint v2 : PACKED_EYE_INDEX0,
  float4 v3 : TEXCOORD6,
  float4 v4 : SV_Position0,
  uint v5 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = cb1[41].xyzw * v4.yyyy;
  r0.xyzw = v4.xxxx * cb1[40].xyzw + r0.xyzw;
  r0.xyzw = v4.zzzz * cb1[42].xyzw + r0.xyzw;
  r0.xyzw = cb1[43].xyzw + r0.xyzw;
  r0.xyz = r0.xyz / r0.www;
  r0.w = dot(-r0.xyz, -r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = -r0.xyz * r0.www;
  r1.xyz = v1.zxy * v0.yzx;
  r1.xyz = v1.yzx * v0.zxy + -r1.xyz;
  r1.xyz = v1.www * r1.xyz;
  r2.xyz = cb1[128].www * float3(0,0,1) + cb1[128].xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = r2.xyz * r0.www;
  r4.xyz = r3.yyy * r1.xyz;
  r1.xyz = r2.yyy * r1.xyz;
  r1.xyz = r2.xxx * v0.xyz + r1.xyz;
  r1.xyz = r2.zzz * v1.xyz + r1.xyz;
  r2.xyz = r3.xxx * v0.xyz + r4.xyz;
  r2.xyz = r3.zzz * v1.xyz + r2.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  r0.x = dot(r2.xyz, r0.xyz);
  r0.x = max(0, r0.x);
  r0.x = 1 + -r0.x;
  r0.x = log2(abs(r0.x));
  r0.x = cb2[5].w * r0.x;
  r0.x = exp2(r0.x);
  r0.x = r0.x * 0.959999979 + cb2[6].z;
  r0.x = 0.0399999991 + r0.x;
  r0.y = -cb2[7].x + cb2[6].w;
  r0.x = r0.x * r0.y + cb2[7].x;
  r0.x = -1 + r0.x;
  r0.yzw = cb1[9].xyz * r1.yyy;
  r0.yzw = r1.xxx * cb1[8].xyz + r0.yzw;
  r0.yzw = r1.zzz * cb1[10].xyz + r0.yzw;
  r0.w = dot(r0.yzw, r0.yzw);
  r0.w = rsqrt(r0.w);
  r0.yz = r0.yz * r0.ww;
  r0.xy = r0.yz * r0.xx;
  r0.xy = cb1[122].xy * r0.xy;
  r0.xy = cb1[123].zw * r0.xy;
  r0.z = dot(r0.xy, r0.xy);
  r0.z = -9.99999975e-006 + r0.z;
  r0.z = cmp(r0.z < 0);
  if (r0.z != 0) discard;
  r0.w = cb0[8].y * cb0[8].x;
  r0.z = cb0[8].x;
  r0.zw = cb0[8].zw * r0.zw;
  r0.xy = r0.zw * r0.xy;
  r0.zw = -cb1[121].xy + v4.xy;
  r0.zw = r0.zw * cb1[122].zw + float2(-0.5,-0.5);
  r1.xy = v4.ww * r0.zw;
  r1.z = v4.w;
  r1.xyw = float3(2,-2,1) * r1.xyz;
  r0.zw = r1.xy / r1.ww;
  r0.zw = r0.zw * cb1[58].xy + cb1[58].wz;
  r0.zw = r0.xy * float2(0.000230000005,-0.000230000005) + r0.zw;
  r0.xy = float2(0.000230000005,-0.000230000005) * r0.xy;
  r0.z = t0.SampleLevel(s0_s, r0.zw, 0).x;
  r0.w = r0.z * cb1[57].z + -cb1[57].w;
  r0.z = r0.z * cb1[57].x + cb1[57].y;
  r0.w = 1 / r0.w;
  r0.z = r0.z + r0.w;
  r0.z = -r1.z * 1 + r0.z;
  r0.w = -0.5 * cb2[7].y;
  r0.w = min(50, abs(r0.w));
  r0.w = max(1, r0.w);
  r0.w = 1 / r0.w;
  r0.z = saturate(r0.z * r0.w + -cb2[7].y);
  r0.xy = r0.xy * r0.zz;
  r0.xy = float2(4,4) * r0.xy;
  r0.zw = min(float2(0,0), r0.xy);
  o0.xy = max(float2(0,0), r0.xy);
  o0.zw = -r0.zw;
  return;
}