// ---- Created with 3Dmigoto v1.3.16 on Thu Oct 31 15:12:21 2019
Texture2D<float4> t11 : register(t11);

Texture3D<float4> t10 : register(t10);

Buffer<uint4> t9 : register(t9);

Buffer<uint4> t8 : register(t8);

Buffer<float4> t7 : register(t7);

Buffer<uint4> t6 : register(t6);

Buffer<uint4> t5 : register(t5);

Buffer<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture3D<float4> t2 : register(t2);

Texture3D<float4> t1 : register(t1);

Texture3D<uint4> t0 : register(t0);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb5 : register(b5)
{
  float4 cb5[3];
}

cbuffer cb4 : register(b4)
{
  float4 cb4[6];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[92];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[122];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[17];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[182];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : PARTICLE_SUBUVS0,
  float4 v1 : TEXCOORD4,
  float4 v2 : TEXCOORD5,
  float3 v3 : PARTICLE_LIGHTING_OFFSET0,
  float4 v4 : TANGENTX0,
  float4 v5 : TANGENTZ0,
  nointerpolation uint v6 : PACKED_EYE_INDEX0,
  float4 v7 : TEXCOORD7,
  float4 v8 : SV_Position0,
  uint v9 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0)
{
  const float4 icb[] = { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = (int)v6.x & 1;
  if (r0.x == 0) {
    r1.x = cb0[4].x;
    r1.y = cb0[5].x;
    r1.z = cb0[6].x;
    r1.w = cb0[7].x;
    r2.x = cb0[4].y;
    r2.y = cb0[5].y;
    r2.z = cb0[6].y;
    r2.w = cb0[7].y;
    r3.x = cb0[4].w;
    r3.y = cb0[5].w;
    r3.z = cb0[6].w;
    r3.w = cb0[7].w;
    r4.x = cb0[40].x;
    r4.y = cb0[41].x;
    r4.z = cb0[42].x;
    r4.w = cb0[43].x;
    r5.x = cb0[40].y;
    r5.y = cb0[41].y;
    r5.z = cb0[42].y;
    r5.w = cb0[43].y;
    r6.x = cb0[40].z;
    r6.y = cb0[41].z;
    r6.z = cb0[42].z;
    r6.w = cb0[43].z;
    r7.x = cb0[40].w;
    r7.y = cb0[41].w;
    r7.z = cb0[42].w;
    r7.w = cb0[43].w;
    r0.yz = cb0[121].xy;
    r8.xyz = cb0[62].xyz;
  } else {
    r1.x = cb2[4].x;
    r1.y = cb2[5].x;
    r1.z = cb2[6].x;
    r1.w = cb2[7].x;
    r2.x = cb2[4].y;
    r2.y = cb2[5].y;
    r2.z = cb2[6].y;
    r2.w = cb2[7].y;
    r3.x = cb2[4].w;
    r3.y = cb2[5].w;
    r3.z = cb2[6].w;
    r3.w = cb2[7].w;
    r4.x = cb2[40].x;
    r4.y = cb2[41].x;
    r4.z = cb2[42].x;
    r4.w = cb2[43].x;
    r5.x = cb2[40].y;
    r5.y = cb2[41].y;
    r5.z = cb2[42].y;
    r5.w = cb2[43].y;
    r6.x = cb2[40].z;
    r6.y = cb2[41].z;
    r6.z = cb2[42].z;
    r6.w = cb2[43].z;
    r7.x = cb2[40].w;
    r7.y = cb2[41].w;
    r7.z = cb2[42].w;
    r7.w = cb2[43].w;
    r0.yz = cb2[121].xy;
    r8.xyz = cb2[62].xyz;
  }
  r9.xyz = v8.xyz;
  r9.w = 1;
  r4.x = dot(r9.xyzw, r4.xyzw);
  r4.y = dot(r9.xyzw, r5.xyzw);
  r4.z = dot(r9.xyzw, r6.xyzw);
  r0.w = dot(r9.xyzw, r7.xyzw);
  r4.xyz = r4.xyz / r0.www;
  r4.xyz = r4.xyz + -r8.xyz;
  r0.w = t11.Sample(s2_s, v0.xy).x;
  r5.x = t11.Sample(s2_s, v0.zw).x;
  r5.x = r5.x + -r0.w;
  r0.w = v1.x * r5.x + r0.w;
  r5.w = saturate(v2.w * r0.w);
  r6.xyz = saturate(v2.xyz);
  r7.xyz = r4.xyz * cb0[178].xyz + cb0[179].xyz;
  r7.xyz = max(float3(0,0,0), r7.xyz);
  r7.xyz = min(float3(0.99000001,0.99000001,0.99000001), r7.xyz);
  r7.xyz = cb0[180].xyz * r7.xyz;
  r8.xyz = (int3)r7.xyz;
  r8.w = 0;
  r8.xyzw = t0.Load(r8.xyzw).xyzw;
  r8.xyzw = (uint4)r8.xyzw;
  r0.w = 1 + cb0[180].w;
  r7.xyz = r7.xyz / r8.www;
  r7.xyz = frac(r7.xyz);
  r7.xyz = cb0[180].www * r7.xyz;
  r7.xyz = r8.xyz * r0.www + r7.xyz;
  r7.xyz = float3(0.5,0.5,0.5) + r7.xyz;
  r7.xyz = cb0[181].xyz * r7.xyz;
  r0.w = cmp(0 < cb1[12].z);
  if (r0.w != 0) {
    r8.x = t2.SampleLevel(s0_s, r7.xyz, 0).x;
  } else {
    r0.w = cmp(0 < cb1[10].w);
    r8.x = r0.w ? cb4[5].x : 1;
  }
  r9.xyz = r6.xyz * cb0[126].www + cb0[126].xyz;
  r10.xyz = cb0[127].www * float3(0.0399999991,0.0399999991,0.0399999991) + cb0[127].xyz;
  r9.xyz = r10.xyz * float3(0.449999988,0.449999988,0.449999988) + r9.xyz;
  r7.xyz = t1.SampleLevel(s0_s, r7.xyz, 0).xyz;
  r7.xyz = float3(0.886227548,0.886227548,0.886227548) * r7.xyz;
  r7.xyz = max(float3(0,0,0), r7.xyz);
  r7.xyz = cb0[146].xyz * r7.xyz;
  r7.xyz = r7.xyz * r9.xyz;
  r7.xyz = float3(0.318309873,0.318309873,0.318309873) * r7.xyz;
  r10.xyz = r6.xyz * float3(2.04040003,2.04040003,2.04040003) + float3(-0.332399994,-0.332399994,-0.332399994);
  r10.xyz = r6.xyz * float3(-4.79510021,-4.79510021,-4.79510021) + r10.xyz;
  r6.xyz = r6.xyz * float3(2.75519991,2.75519991,2.75519991) + r10.xyz;
  r6.xyz = float3(1.33200002,1.33200002,1.33200002) + r6.xyz;
  r6.xyz = max(float3(1,1,1), r6.xyz);
  r0.yz = v8.xy + -r0.yz;
  if (r0.x == 0) {
    r0.w = cb3[3].x;
    r6.w = cb3[3].y;
    r7.w = cb3[3].z;
    r8.z = cb3[1].z;
    r10.xy = cb3[1].xy;
    r8.w = cb3[2].x;
  } else {
    r0.w = cb3[43].x;
    r6.w = cb3[43].y;
    r7.w = cb3[43].z;
    r8.z = cb3[41].z;
    r10.xy = cb3[41].xy;
    r8.w = cb3[42].x;
  }
  r0.w = v8.w * r0.w + r6.w;
  r0.w = log2(r0.w);
  r0.w = r0.w * r7.w;
  r0.w = max(0, r0.w);
  r0.yzw = (uint3)r0.yzw;
  r6.w = (int)r8.z + -1;
  r0.w = min((uint)r6.w, (uint)r0.w);
  r0.yz = (uint2)r0.yz >> (uint2)r8.ww;
  r0.z = mad((int)r0.w, (int)r10.y, (int)r0.z);
  r0.y = mad((int)r0.z, (int)r10.x, (int)r0.y);
  if (r0.x == 0) {
    r0.z = cb3[0].z;
    r0.w = cb3[6].x;
    r6.w = cb3[6].z;
    r7.w = cb3[6].w;
    r10.xyz = cb3[5].xyz;
  } else {
    r0.z = cb3[40].z;
    r0.w = cb3[46].x;
    r6.w = cb3[46].z;
    r7.w = cb3[46].w;
    r10.xyz = cb3[45].xyz;
  }
  if (r0.z != 0) {
    r11.xyzw = (int4)r0.wwww & int4(255,2,4,8);
    r11.xyzw = r11.xyzw ? float4(1,1,1,1) : float4(0,0,0,0);
    if (cb3[7].x != 0) {
      r0.z = cb3[7].x;
      r8.z = 0;
      while (true) {
        r8.w = cmp((uint)r8.z >= asuint(cb3[7].x));
        if (r8.w != 0) break;
        r8.w = dot(cb3[8].xyzw, icb[r8.z+0].xyzw);
        r8.w = cmp(v8.w < r8.w);
        if (r8.w != 0) {
          r0.z = r8.z;
          break;
        }
        r8.z = (int)r8.z + 1;
      }
      r8.z = cmp((uint)r0.z < asuint(cb3[7].x));
      if (r8.z != 0) {
        r8.z = (uint)r0.z << 2;
        r12.xyzw = cb3[r8.z+10].xyzw * r4.yyyy;
        r12.xyzw = r4.xxxx * cb3[r8.z+9].xyzw + r12.xyzw;
        r12.xyzw = r4.zzzz * cb3[r8.z+11].xyzw + r12.xyzw;
        r12.xyzw = cb3[r8.z+12].xyzw + r12.xyzw;
        r13.xyzw = r12.xyxy / r12.wwww;
        r8.zw = cmp(r13.zw >= cb3[r0.z+25].xy);
        r12.xy = cmp(cb3[r0.z+25].zw >= r13.zw);
        r8.zw = r8.zw ? r12.xy : 0;
        r0.z = r8.w ? r8.z : 0;
        if (r0.z != 0) {
          r13.xyzw = r13.xyzw * cb3[29].xyxy + float4(-0.5,-0.5,-0.5,-0.5);
          r8.zw = frac(r13.zw);
          r13.xyzw = floor(r13.xyzw);
          r14.xyzw = float4(0.5,1.5,0.5,0.5) + r13.zwzw;
          r14.xyzw = cb3[29].zwzw * r14.xyzw;
          r15.x = t3.SampleLevel(s1_s, r14.xy, 0).x;
          r13.xyzw = float4(1.5,1.5,1.5,0.5) + r13.xyzw;
          r13.xyzw = cb3[29].zwzw * r13.xyzw;
          r15.y = t3.SampleLevel(s1_s, r13.xy, 0).x;
          r15.z = t3.SampleLevel(s1_s, r13.zw, 0).x;
          r15.w = t3.SampleLevel(s1_s, r14.zw, 0).x;
          r12.xyzw = r15.xyzw + -r12.zzzz;
          r12.xyzw = saturate(r12.xyzw * float4(4000,4000,4000,4000) + float4(1,1,1,1));
          r12.yz = r12.zy + -r12.wx;
          r12.xy = r8.zz * r12.yz + r12.wx;
          r0.z = r12.y + -r12.x;
          r0.z = r8.w * r0.z + r12.x;
        } else {
          r0.z = 1;
        }
      } else {
        r0.z = 1;
      }
    } else {
      r0.z = 1;
    }
    if (r11.x != 0) {
      r11.x = 1;
      r8.z = dot(float4(1,1,1,1), r11.xyzw);
      r8.w = -1 + r8.z;
      r8.z = r8.z * r8.w + 1;
      r6.w = saturate(v8.w * r6.w + r7.w);
      r6.w = r6.w * r6.w;
      r7.w = r8.z + -r0.z;
      r11.x = r6.w * r7.w + r0.z;
      r11.y = min(1, r11.x);
    } else {
      r11.xy = float2(1,1);
    }
    r0.z = r11.x + r11.y;
    r0.z = cmp(0 < r0.z);
    if (r0.z != 0) {
      r11.yzw = float3(0.318309873,0.318309873,0.318309873) * r9.xyz;
      r10.xyz = r11.xxx * r10.xyz;
      r10.xyz = r11.yzw * r10.xyz;
    } else {
      r10.xyz = float3(0,0,0);
    }
    r0.z = (uint)r0.w >> 8;
    r0.z = (int)r0.z & asint(cb1[16].w);
    r10.xyz = r0.zzz ? r10.xyz : float3(0,0,0);
    r8.x = 1;
  } else {
    r10.xyz = float3(0,0,0);
  }
  if (r0.x == 0) {
    r0.z = (uint)r0.y << 1;
    r0.z = t5.Load(r0.z).x;
    r0.z = min(asuint(cb3[0].x), (uint)r0.z);
    bitmask.w = ((~(-1 << 31)) << 1) & 0xffffffff;  r0.w = (((uint)r0.y << 1) & bitmask.w) | ((uint)1 & ~bitmask.w);
    r0.w = t5.Load(r0.w).x;
  } else {
    r6.w = (uint)r0.y << 1;
    r6.w = t8.Load(r6.w).x;
    r0.z = min(asuint(cb3[40].x), (uint)r6.w);
    bitmask.y = ((~(-1 << 31)) << 1) & 0xffffffff;  r0.y = (((uint)r0.y << 1) & bitmask.y) | ((uint)1 & ~bitmask.y);
    r0.w = t8.Load(r0.y).x;
  }
  r0.y = r0.x ? cb3[40].x : cb3[0].x;
  r0.y = min((uint)r0.z, (uint)r0.y);
  r11.xyz = float3(0.318309873,0.318309873,0.318309873) * r9.xyz;
  r8.y = 1;
  r12.xyz = r10.xyz;
  r0.z = 0;
  while (true) {
    r6.w = cmp((uint)r0.z >= (uint)r0.y);
    if (r6.w != 0) break;
    r6.w = (int)r0.z + (int)r0.w;
    if (r0.x == 0) {
      r7.w = t6.Load(r6.w).x;
      r8.z = (int)r7.w * 5;
      r13.xyzw = t4.Load(r8.z).xyzw;
      r14.xyzw = mad((int4)r7.wwww, int4(5,5,5,5), int4(1,2,3,4));
      r15.xyzw = t4.Load(r14.x).xyzw;
      r16.xyzw = t4.Load(r14.y).wxyz;
      r14.xyz = t4.Load(r14.z).xyw;
      r17.xyz = t4.Load(r14.w).xyz;
    } else {
      r6.w = t9.Load(r6.w).x;
      r7.w = (int)r6.w * 5;
      r13.xyzw = t7.Load(r7.w).xyzw;
      r18.xyzw = mad((int4)r6.wwww, int4(5,5,5,5), int4(1,2,3,4));
      r15.xyzw = t7.Load(r18.x).xyzw;
      r16.xyzw = t7.Load(r18.y).wxyz;
      r14.xyz = t7.Load(r18.z).xyw;
      r17.xyz = t7.Load(r18.w).xyz;
    }
    r6.w = cmp(r15.w == 0.000000);
    r7.w = cmp(-2 < r14.x);
    r13.xyz = r13.xyz + -r4.xyz;
    r8.z = dot(r13.xyz, r13.xyz);
    r8.w = rsqrt(r8.z);
    r18.xyz = r13.xyz * r8.www;
    r8.w = r13.w * r13.w;
    r8.z = r8.z * r8.w;
    r8.z = -r8.z * r8.z + 1;
    r8.z = max(0, r8.z);
    r8.z = r8.z * r8.z;
    r19.xyz = r13.xyz * r13.www;
    r8.w = dot(r19.xyz, r19.xyz);
    r8.w = min(1, r8.w);
    r8.w = 1 + -r8.w;
    r8.w = log2(r8.w);
    r8.w = r15.w * r8.w;
    r8.w = exp2(r8.w);
    r8.z = r6.w ? r8.z : r8.w;
    r8.w = dot(r18.xyz, r16.yzw);
    r8.w = r8.w + -r14.x;
    r8.w = saturate(r8.w * r14.y);
    r8.w = r8.w * r8.w;
    r8.w = r8.z * r8.w;
    r7.w = r7.w ? r8.w : r8.z;
    r8.z = cmp(0 < r7.w);
    if (r8.z != 0) {
      r8.z = (int)r16.x & 255;
      r8.z = r8.z ? 1 : 0;
      if (r8.z != 0) {
        r18.xyzw = (int4)r16.xxxx & int4(1,2,4,8);
        r18.xyzw = r18.xyzw ? float4(1,1,1,1) : float4(0,0,0,0);
        r8.z = (uint)r16.x >> 4;
        if (1 == 0) r8.w = 0; else if (1+4 < 32) {         r8.w = (uint)r16.x << (32-(1 + 4)); r8.w = (uint)r8.w >> (32-1);        } else r8.w = (uint)r16.x >> 4;
        r19.x = r8.w ? 1 : 0;
        r14.xyw = (int3)r8.zzz & int3(2,4,8);
        r19.yzw = r14.xyw ? float3(1,1,1) : float3(0,0,0);
        r8.z = dot(r19.xyzw, float4(1,1,1,1));
        r8.w = dot(r18.xyzw, float4(1,1,1,1));
        r9.w = dot(r8.xyyy, r18.xyzw);
        r9.w = -1 + r9.w;
        r8.w = r8.w * r9.w + 1;
        r8.zw = r8.zz * r8.ww;
      } else {
        r8.zw = float2(1,1);
      }
      r8.w = r8.z + r8.w;
      r8.w = cmp(0 < r8.w);
      if (r8.w != 0) {
        r8.w = f16tof32(r14.z);
        r9.w = 0.5 * r8.w;
        r14.xyz = -r9.www * r17.xyz + r13.xyz;
        r13.xyz = r9.www * r17.xyz + r13.xyz;
        r8.w = cmp(0 < r8.w);
        if (r8.w != 0) {
          r8.w = dot(r14.xyz, r14.xyz);
          r9.w = dot(r13.xyz, r13.xyz);
          r8.w = rsqrt(r8.w);
          r9.w = rsqrt(r9.w);
          r8.w = r9.w * r8.w;
          r9.w = dot(r14.xyz, r13.xyz);
          r9.w = r9.w * r8.w;
          r9.w = r9.w * 0.5 + r8.w;
          r9.w = 0.5 + r9.w;
          r8.w = r8.w / r9.w;
        } else {
          r9.w = dot(r14.xyz, r14.xyz);
          r9.w = 1 + r9.w;
          r8.w = rcp(r9.w);
        }
        r6.w = r6.w ? r8.w : 1;
        r13.xyz = r11.xyz * r6.www;
        r14.xyz = r15.xyz * r7.www;
        r14.xyz = r14.xyz * r8.zzz;
        r13.xyz = r14.xyz * r13.xyz;
      } else {
        r13.xyz = float3(0,0,0);
      }
    } else {
      r13.xyz = float3(0,0,0);
    }
    r6.w = (uint)r16.x >> 8;
    r6.w = (int)r6.w & asint(cb1[16].w);
    r13.xyz = r13.xyz + r12.xyz;
    r12.xyz = r6.www ? r13.xyz : r12.xyz;
    r0.z = (int)r0.z + 1;
  }
  r0.x = cmp(0 < cb3[91].w);
  if (r0.x != 0) {
    r4.w = 1;
    r0.x = dot(r4.xyzw, r1.xyzw);
    r0.y = dot(r4.xyzw, r2.xyzw);
    r0.z = dot(r4.xyzw, r3.xyzw);
    r0.xy = r0.xy / r0.zz;
    r1.xy = r0.xy * float2(0.5,-0.5) + float2(0.5,0.5);
    r0.x = r0.z * cb0[176].x + cb0[176].y;
    r0.x = log2(r0.x);
    r0.x = cb0[176].z * r0.x;
    r1.z = cb0[175].z * r0.x;
    r0.xyzw = t10.SampleLevel(s0_s, r1.xyz, 0).xyzw;
    r1.x = v7.w * r0.w;
    r0.xyz = v7.xyz * r0.www + r0.xyz;
  } else {
    r0.xyz = v7.xyz;
    r1.x = v7.w;
  }
  r1.yzw = -r12.xyz + r9.xyz;
  r1.yzw = cb0[134].zzz * r1.yzw + r12.xyz;
  r5.xyz = max(float3(0,0,0), cb5[2].xyz);
  r0.w = cmp(0 < cb0[130].x);
  if (r0.w != 0) {
    r2.xyz = -cb1[5].xyz + r4.xyz;
    r3.xyz = float3(1,1,1) + cb1[11].xyz;
    r2.xyz = cmp(r3.xyz < abs(r2.xyz));
    r0.w = (int)r2.y | (int)r2.x;
    r0.w = (int)r2.z | (int)r0.w;
    r2.x = dot(r4.xyz, float3(0.577000022,0.577000022,0.577000022));
    r2.x = 0.00200000009 * r2.x;
    r2.x = frac(r2.x);
    r2.x = cmp(0.5 < r2.x);
    r2.yzw = r2.xxx ? float3(0,1,1) : float3(1,1,0);
    r2.x = 1;
    r5.xyzw = r0.wwww ? r2.yzwx : r5.xyzw;
    o0.w = r5.w;
  } else {
    o0.w = r5.w;
  }
  r1.yzw = r7.xyz * r6.xyz + r1.yzw;
  r1.yzw = r1.yzw + r5.xyz;
  o0.xyz = r1.yzw * r1.xxx + r0.xyz;
  return;
}