// ---- Created with 3Dmigoto v1.3.16 on Wed Oct 23 22:09:06 2019
Buffer<float4> t2 : register(t2);

Buffer<float4> t1 : register(t1);

TextureCube<float4> t0 : register(t0);

SamplerState s0_s : register(s0);

cbuffer cb6 : register(b6)
{
  float4 cb6[18];
}

cbuffer cb5 : register(b5)
{
  float4 cb5[1];
}

cbuffer cb4 : register(b4)
{
  float4 cb4[92];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[63];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[5];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[178];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[8];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : ATTRIBUTE0,
  uint v1 : SV_VertexID0,
  uint v2 : SV_InstanceID0,
  out float4 o0 : TEXCOORD10,
  out float4 o1 : TEXCOORD11,
  out float4 o2 : TEXCOORD0,
  out float4 o3 : TEXCOORD4,
  out uint o4 : PACKED_EYE_INDEX0,
  out float4 o5 : TEXCOORD7,
  out float3 o6 : TEXCOORD9,
  out float4 o7 : VS_To_DS_Position0,
  out float o8 : SV_ClipDistance1)
{
// Needs manual fix for instruction:
// unknown dcl_: dcl_input_sgv v1.x, vertex_id
// Needs manual fix for instruction:
// unknown dcl_: dcl_input_sgv v2.x, instance_id
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = (int)v2.x & 1;
  if (r0.x == 0) {
    r0.yzw = cb1[60].xyz;
    r1.xyz = cb1[62].xyz;
  } else {
    r0.yzw = cb3[60].xyz;
    r1.xyz = cb3[62].xyz;
  }
  r1.w = (int)v1.x + asint(cb0[7].y);
  r2.x = (uint)r1.w << 1;
  r2.xyz = t2.Load(r2.x).xyz;
  bitmask.w = ((~(-1 << 31)) << 1) & 0xffffffff;  r2.w = (((uint)r1.w << 1) & bitmask.w) | ((uint)1 & ~bitmask.w);
  r3.xyzw = t2.Load(r2.w).xyzw;
  r4.xyz = r3.yzx * r2.xyz;
  r2.xyz = r3.xyz * r2.yzx + -r4.xyz;
  r2.xyz = r2.xyz * r3.www;
  r4.xyz = r2.xyz * r3.yzx;
  r2.xyz = r2.zxy * r3.zxy + -r4.xyz;
  r2.xyz = r2.xyz * r3.www;
  r4.xyz = cb2[4].xxx * cb2[0].xyz;
  r5.xyz = cb2[4].yyy * cb2[1].xyz;
  r6.xyz = cb2[4].zzz * cb2[2].xyz;
  r7.xyz = r5.xyz * r2.yyy;
  r2.xyw = r2.xxx * r4.xyz + r7.xyz;
  o0.xyz = r2.zzz * r6.xyz + r2.xyw;
  r2.xyz = r5.xyz * r3.yyy;
  r2.xyz = r3.xxx * r4.xyz + r2.xyz;
  o1.xyz = r3.zzz * r6.xyz + r2.xyz;
  o1.w = cb2[4].w * r3.w;
  r2.xyz = cb2[1].xyz * v0.yyy;
  r2.xyz = cb2[0].xyz * v0.xxx + r2.xyz;
  r2.xyz = cb2[2].xyz * v0.zzz + r2.xyz;
  r1.xyz = cb2[3].xyz + r1.xyz;
  r1.xyz = r2.xyz + r1.xyz;
  r2.x = (int)r1.w * asint(cb5[0].y);
  r2.xy = t1.Load(r2.x).xy;
  r1.w = mad(asint(cb5[0].y), (int)r1.w, asint(cb5[0].z));
  r2.zw = t1.Load(r1.w).xy;
  o3.xy = r2.zw * cb6[16].xy + cb6[16].zw;
  o3.zw = r2.zw * cb6[17].xy + cb6[17].zw;
  r1.w = cb0[0].x ? 1 : 0;
  o4.x = mad((int)r1.w, 0x80000000, (int)r0.x);
  r0.xyz = r1.xyz + -r0.yzw;
  r0.w = dot(r0.xyz, r0.xyz);
  r1.w = sqrt(r0.w);
  r2.z = dot(r0.xyz, cb1[52].xyz);
  r1.w = r1.w / r2.z;
  r1.w = cb1[177].z * r1.w;
  r1.w = max(0, r1.w);
  r2.z = rsqrt(r0.w);
  r0.w = r2.z * r0.w;
  r3.xyz = r2.zzz * r0.xyz;
  r1.w = max(cb4[85].w, r1.w);
  r2.w = cmp(0 < r1.w);
  r3.w = r1.w * r2.z;
  r4.x = r3.w * r0.z + cb1[59].z;
  r3.w = -r3.w * r0.z + r0.z;
  r1.w = -r1.w * r2.z + 1;
  r1.w = r1.w * r0.w;
  r2.z = -cb4[87].y + r4.x;
  r2.z = cb4[85].y * r2.z;
  r2.z = max(-127, r2.z);
  r2.z = exp2(-r2.z);
  r2.z = cb4[87].x * r2.z;
  r2.z = r2.w ? r2.z : cb4[85].x;
  r1.w = r2.w ? r1.w : r0.w;
  r2.w = r2.w ? r3.w : r0.z;
  r2.w = cb4[85].y * r2.w;
  r2.w = max(-127, r2.w);
  r3.w = exp2(-r2.w);
  r3.w = 1 + -r3.w;
  r3.w = r3.w / r2.w;
  r4.x = -r2.w * 0.240226507 + 0.693147182;
  r2.w = cmp(0.00999999978 < abs(r2.w));
  r2.w = r2.w ? r3.w : r4.x;
  r2.z = r2.z * r2.w;
  r2.w = r2.z * r1.w;
  r4.xy = cmp(float2(0,0) < cb4[87].zw);
  if (r4.x != 0) {
    r3.w = saturate(r0.w * cb4[91].x + cb4[91].y);
    r4.xz = float2(1,-1) * cb4[90].yx;
    r5.x = dot(r0.xy, r4.xz);
    r5.y = dot(r0.xy, cb4[90].xy);
    r5.z = r0.z;
    r0.xyz = t0.SampleLevel(s0_s, r5.xyz, 0).xyz;
    r4.xzw = t0.SampleLevel(s0_s, r5.xyz, cb4[91].z).xyz;
    r0.xyz = -r4.xzw + r0.xyz;
    r0.xyz = r3.www * r0.xyz + r4.xzw;
    r0.xyz = cb4[86].xyz * r0.xyz;
  } else {
    r0.xyz = cb4[86].xyz;
  }
  r3.w = cmp(cb4[88].w >= 0);
  r4.x = cmp(cb4[87].z == 0.000000);
  r3.w = r3.w ? r4.x : 0;
  r3.x = saturate(dot(r3.xyz, cb4[88].xyz));
  r3.x = log2(r3.x);
  r3.x = cb4[89].w * r3.x;
  r3.x = exp2(r3.x);
  r3.xyz = cb4[89].xyz * r3.xxx;
  r1.w = -cb4[88].w + r1.w;
  r1.w = max(0, r1.w);
  r1.w = r2.z * r1.w;
  r1.w = exp2(-r1.w);
  r1.w = min(1, r1.w);
  r1.w = 1 + -r1.w;
  r3.xyz = r3.xyz * r1.www;
  r3.xyz = r3.www ? r3.xyz : 0;
  r1.w = exp2(-r2.w);
  r1.w = min(1, r1.w);
  r3.w = max(cb4[86].w, r1.w);
  r0.w = cmp(cb4[87].w < r0.w);
  r0.w = r0.w ? r4.y : 0;
  r3.xyzw = r0.wwww ? float4(0,0,0,1) : r3.xyzw;
  r0.w = 1 + -r3.w;
  o5.xyz = r0.xyz * r0.www + r3.xyz;
  o0.w = 0;
  o2.xy = r2.xy;
  o2.zw = float2(0,0);
  o5.w = r3.w;
  o7.xyz = r1.xyz;
  o7.w = 1;
  o6.xyz = r1.xyz;
  o8.x = 0;
  return;
}