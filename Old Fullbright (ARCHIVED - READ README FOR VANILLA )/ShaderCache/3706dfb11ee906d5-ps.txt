//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Wed Sep 18 18:36:43 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy
// SV_POSITION              0   xyzw        1      POS   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[5], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texturecube (float,float,float,float) t0
dcl_input_ps linear noperspective v0.xy
dcl_output o0.xyzw
dcl_temps 8
ieq r0.xyzw, cb0[2].xxxx, l(1, 2, 3, 4)
mad r1.xy, v0.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
mov r1.z, l(1.000000)
mad r2.xy, v0.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(1.000000, 1.000000, 0.000000, 0.000000)
mov r2.z, l(-1.000000)
movc r2.xyz, r0.wwww, r1.xyzx, r2.xyzx
mad r3.yz, v0.yyxy, l(0.000000, -2.000000, 2.000000, 0.000000), l(0.000000, 1.000000, -1.000000, 0.000000)
mov r3.x, l(-1.000000)
movc r2.xyz, r0.zzzz, r3.zxyz, r2.xyzx
mad r4.xz, v0.xxyx, l(2.000000, 0.000000, 2.000000, 0.000000), l(-1.000000, 0.000000, -1.000000, 0.000000)
mov r4.y, l(1.000000)
movc r0.yzw, r0.yyyy, r4.xxyz, r2.xxyz
movc r0.xyz, r0.xxxx, r3.xyzx, r0.yzwy
mad r1.w, v0.x, l(-2.000000), l(1.000000)
movc r0.xyz, cb0[2].xxxx, r0.xyzx, r1.zywz
utof r0.w, cb0[4].z
iadd r1.x, cb0[4].w, l(-1)
utof r1.y, r1.x
add r1.y, r1.y, l(-1.000000)
add r0.w, -r0.w, r1.y
add r0.w, -r0.w, l(1.000000)
mul r0.w, r0.w, l(0.833333313)
exp r0.w, r0.w
lt r1.y, r0.w, l(0.010000)
if_nz r1.y
  sample_l_indexable(texturecube)(float,float,float,float) o0.xyzw, r0.xyzx, t0.xyzw, s0, l(0.000000)
  ret
endif
dp3 r1.y, r0.xyzx, r0.xyzx
rsq r1.y, r1.y
mul r0.xyz, r0.xyzx, r1.yyyy
lt r1.y, |r0.z|, l(0.999000)
movc r1.yzw, r1.yyyy, l(0,1.000000,0,0), l(0,0,1.000000,0)
mul r2.xyz, r0.yzxy, r1.yzwy
mad r1.yzw, r1.wwyz, r0.zzxy, -r2.xxyz
dp3 r2.x, r1.yzwy, r1.yzwy
rsq r2.x, r2.x
mul r1.yzw, r1.yyzw, r2.xxxx
mul r2.xyz, r0.zxyz, r1.zwyz
mad r2.xyz, r0.yzxy, r1.wyzw, -r2.xyzx
ishl r3.xy, l(1, 6, 0, 0), r1.xxxx
imul null, r1.x, r3.x, r3.y
utof r1.x, r1.x
div r1.x, l(12.566371), r1.x
add r1.x, r1.x, r1.x
lt r2.w, r0.w, l(0.100000)
movc r3.x, r2.w, l(32), l(64)
lt r3.y, l(0.990000), r0.w
if_nz r3.y
  mov r4.xyzw, l(0,0,0,0)
  mov r3.y, l(0)
  loop
    uge r3.z, r3.y, r3.x
    breakc_nz r3.z
    utof r3.z, r3.y
    mul r3.z, r3.z, l(0.015625)
    frc r3.z, r3.z
    bfrev r3.w, r3.y
    xor r3.w, r3.w, l(0)
    utof r3.w, r3.w
    mul r3.zw, r3.zzzw, l(0.000000, 0.000000, 6.28318548, 2.328306437E-010)
    sqrt r3.w, r3.w
    add r5.x, -r3.w, l(1.000000)
    sqrt r5.x, r5.x
    sincos r6.x, r7.x, r3.z
    mul r3.z, r5.x, r7.x
    mul r5.x, r5.x, r6.x
    mul r5.y, r3.w, l(20.371832)
    div r5.y, l(1.000000, 1.000000, 1.000000, 1.000000), r5.y
    div r5.y, r5.y, r1.x
    log r5.y, r5.y
    mul r5.y, r5.y, l(0.500000)
    mul r5.xzw, r2.xxyz, r5.xxxx
    mad r5.xzw, r3.zzzz, r1.yyzw, r5.xxzw
    mad r5.xzw, r3.wwww, r0.xxyz, r5.xxzw
    sample_l_indexable(texturecube)(float,float,float,float) r5.xyzw, r5.xzwx, t0.xyzw, s0, r5.y
    add r4.xyzw, r4.xyzw, r5.xyzw
    iadd r3.y, r3.y, l(1)
  endloop
  mul o0.xyzw, r4.xyzw, l(0.015625, 0.015625, 0.015625, 0.015625)
else
  movc r2.w, r2.w, l(32.000000), l(64.000000)
  mul r0.w, r0.w, r0.w
  mul r3.y, r0.w, r0.w
  mad r0.w, r0.w, r0.w, l(-1.000000)
  mov r4.xyzw, l(0,0,0,0)
  mov r3.zw, l(0,0,0,0)
  loop
    uge r5.x, r3.w, r3.x
    breakc_nz r5.x
    utof r5.x, r3.w
    div r5.x, r5.x, r2.w
    frc r5.x, r5.x
    bfrev r5.y, r3.w
    xor r5.y, r5.y, l(0)
    utof r5.y, r5.y
    mul r5.xz, r5.xxyx, l(6.28318548, 0.000000, 2.316664915E-010, 0.000000)
    mad r5.y, -r5.y, l(2.316664915E-010), l(1.000000)
    mad r5.z, r0.w, r5.z, l(1.000000)
    div r5.y, r5.y, r5.z
    sqrt r6.z, r5.y
    add r5.y, -r5.y, l(1.000000)
    sqrt r5.y, r5.y
    sincos r5.x, r7.x, r5.x
    mul r6.x, r5.y, r7.x
    mul r6.y, r5.x, r5.y
    add r5.x, r6.z, r6.z
    mad r5.xyz, r5.xxxx, r6.xyzx, l(-0.000000, -0.000000, -1.000000, 0.000000)
    lt r5.w, l(0.000000), r5.z
    if_nz r5.w
      mad r5.w, r6.z, r3.y, -r6.z
      mad r5.w, r5.w, r6.z, l(1.000000)
      mul r5.w, r5.w, r5.w
      mul r5.w, r5.w, l(3.14159274)
      div r5.w, r3.y, r5.w
      mul r5.w, r2.w, r5.w
      mul r5.w, r5.w, l(0.250000)
      div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
      div r5.w, r5.w, r1.x
      log r5.w, r5.w
      mul r5.w, r5.w, l(0.500000)
      mul r6.xyz, r2.xyzx, r5.yyyy
      mad r6.xyz, r5.xxxx, r1.yzwy, r6.xyzx
      mad r6.xyz, r5.zzzz, r0.xyzx, r6.xyzx
      sample_l_indexable(texturecube)(float,float,float,float) r6.xyzw, r6.xyzx, t0.xyzw, s0, r5.w
      mad r4.xyzw, r6.xyzw, r5.zzzz, r4.xyzw
      add r3.z, r3.z, r5.z
    endif
    iadd r3.w, r3.w, l(1)
  endloop
  div o0.xyzw, r4.xyzw, r3.zzzz
endif
ret
// Approximately 0 instruction slots used
