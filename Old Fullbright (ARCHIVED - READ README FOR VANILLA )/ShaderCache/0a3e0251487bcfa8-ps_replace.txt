// ---- Created with 3Dmigoto v1.3.16 on Sun Sep 15 10:20:16 2019
Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[2];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[5];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[133];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[13];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = cb0[9].xyzw * v0.yyyy;
  r0.xyzw = v0.xxxx * cb0[8].xyzw + r0.xyzw;
  r1.xy = cb1[123].zw * v0.xy;
  r1.x = t0.SampleLevel(s0_s, r1.xy, 0).x;
  r0.xyzw = r1.xxxx * cb0[10].xyzw + r0.xyzw;
  r0.xyzw = cb0[11].xyzw + r0.xyzw;
  r0.xyz = r0.yzx / r0.www;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r1.yzw = r0.xyz * r0.www;
  r0.w = max(abs(r1.y), abs(r1.z));
  r0.w = 1 / r0.w;
  r2.x = min(abs(r1.y), abs(r1.z));
  r0.w = r2.x * r0.w;
  r2.x = r0.w * r0.w;
  r2.y = r2.x * 0.0208350997 + -0.0851330012;
  r2.y = r2.x * r2.y + 0.180141002;
  r2.y = r2.x * r2.y + -0.330299497;
  r2.x = r2.x * r2.y + 0.999866009;
  r2.y = r2.x * r0.w;
  r2.y = r2.y * -2 + 1.57079637;
  r2.z = cmp(abs(r1.z) < abs(r1.y));
  r2.y = r2.z ? r2.y : 0;
  r0.w = r0.w * r2.x + r2.y;
  r2.xy = cmp(r1.zw < -r1.zw);
  r2.x = r2.x ? -3.141593 : 0;
  r0.w = r2.x + r0.w;
  r2.x = min(r1.y, r1.z);
  r2.x = cmp(r2.x < -r2.x);
  r1.y = max(r1.y, r1.z);
  r1.y = cmp(r1.y >= -r1.y);
  r1.y = r1.y ? r2.x : 0;
  r0.w = r1.y ? -r0.w : r0.w;
  r0.w = 3.14159274 + r0.w;
  r3.x = 0.159154937 * r0.w;
  r0.w = abs(r1.w) * -0.0187292993 + 0.0742610022;
  r0.w = r0.w * abs(r1.w) + -0.212114394;
  r0.w = r0.w * abs(r1.w) + 1.57072878;
  r1.y = 1 + -abs(r1.w);
  r1.y = sqrt(r1.y);
  r1.z = r1.y * r0.w;
  r1.z = r1.z * -2 + 3.14159274;
  r1.z = r2.y ? r1.z : 0;
  r0.w = r0.w * r1.y + r1.z;
  r3.y = 0.318309873 * r0.w;
  r1.yz = cmp(float2(0,0) < cb0[3].zw);
  r1.zw = r1.zz ? r3.xy : r0.yx;
  r0.z = cb0[3].x * r0.z;
  r0.xy = r0.yx / r0.zz;
  r0.xy = r0.xy * float2(0.5,0.5) + float2(0.5,0.5);
  r0.xy = r1.yy ? r0.xy : r1.zw;
  r0.z = frac(cb1[132].z);
  r0.z = frac(r0.z);
  r0.zw = float2(25,5) * r0.zz;
  r0.zw = floor(r0.zw);
  r0.zw = float2(0.200000003,0.200000003) * r0.zw;
  r0.xy = r0.xy * float2(0.200000003,0.200000003) + r0.zw;
  r0.xyz = t1.Sample(s1_s, r0.xy).xyz;
  r0.xyz = float3(1,1,1) + -r0.xyz;
  r0.w = 6.28318548 * cb1[132].z;
  r0.w = sin(r0.w);
  r0.xyz = r0.xyz * r0.www + cb3[1].xyz;
  r0.xyz = max(float3(0,0,0), r0.xyz);
  r0.x = dot(r0.xyz, float3(0.333299994,0.333299994,0.333299994));
  r0.x = -cb0[12].y + r0.x;
  r2.xyzw = cb1[41].xyzw * v0.yyyy;
  r2.xyzw = v0.xxxx * cb1[40].xyzw + r2.xyzw;
  r1.xyzw = r1.xxxx * cb1[42].xyzw + r2.xyzw;
  r1.xyzw = cb1[43].xyzw + r1.xyzw;
  r0.yzw = r1.xyz / r1.www;
  r0.yzw = -cb1[62].xyz + r0.yzw;
  r1.xyz = cb1[59].xyz + -r0.yzw;
  r0.yzw = cb2[0].xyz + -r0.yzw;
  r1.x = dot(r1.xyz, r1.xyz);
  r1.x = sqrt(r1.x);
  r1.x = cb0[12].x + -r1.x;
  r1.y = 0.200000003 * cb0[12].x;
  r1.x = saturate(r1.x / r1.y);
  r0.x = r1.x * r0.x;
  r0.x = cb0[3].y * r0.x + cb0[12].y;
  r0.x = -1 + r0.x;
  r1.xyz = cb2[0].www * r0.yzw;
  r1.x = dot(r1.xyz, r1.xyz);
  r1.x = min(1, r1.x);
  r1.x = 1 + -r1.x;
  r1.x = log2(r1.x);
  r1.x = cb2[1].w * r1.x;
  r1.x = exp2(r1.x);
  r1.y = dot(r0.yzw, r0.yzw);
  r1.z = cb2[0].w * cb2[0].w;
  r1.z = r1.y * r1.z;
  r1.y = rsqrt(r1.y);
  r0.yzw = r1.yyy * r0.yzw;
  r0.y = dot(r0.yzw, cb2[2].xyz);
  r0.y = -cb2[4].x + r0.y;
  r0.y = saturate(cb2[4].y * r0.y);
  r0.y = r0.y * r0.y;
  r0.z = -r1.z * r1.z + 1;
  r0.z = max(0, r0.z);
  r0.z = r0.z * r0.z;
  r0.w = cmp(cb2[1].w == 0.000000);
  r1.x = r0.w ? r0.z : r1.x;
  r0.z = cmp(-2 < cb2[4].x);
  r1.y = r0.z ? r0.y : 1;
  r0.y = cmp(0 < cb2[0].w);
  r0.yz = r0.yy ? r1.xy : float2(1,1);
  r0.y = r0.y * r0.z;
  r0.y = cmp(0 < r0.y);
  r0.y = r0.y ? 1.000000 : 0;
  r0.x = r0.y * r0.x + 1;
  o0.xyzw = sqrt(r0.xxxx);
  return;
}