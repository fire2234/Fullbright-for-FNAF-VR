//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Wed Oct 23 19:13:28 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// ATTRIBUTE                0   xyzw        0     NONE   float   xyzw
// SV_InstanceID            0   x           1   INSTID    uint   x
// SV_VertexID              0   x           2   VERTID    uint
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// SV_ClipDistance          1   x           1  CLIPDST   float   x
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -1.000000, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 1.000000} }
dcl_constantbuffer cb0[15], immediateIndexed
dcl_constantbuffer cb1[166], immediateIndexed
dcl_constantbuffer cb2[4], immediateIndexed
dcl_constantbuffer cb3[164], immediateIndexed
dcl_resource_buffer (float,float,float,float) t0
dcl_resource_buffer (float,float,float,float) t1
dcl_input v0.xyzw
dcl_input_sgv v1.x, instance_id
dcl_output_siv o0.xyzw, position
dcl_output_siv o1.x, clip_distance
dcl_temps 12
if_nz cb0[14].z
  mov r0.x, cb1[165].w
else
  mov r0.x, cb0[7].x
endif
if_z r0.x
  mov r1.x, cb1[0].x
  mov r1.y, cb1[1].x
  mov r1.z, cb1[2].x
  mov r1.w, cb1[3].x
  mov r2.x, cb1[0].y
  mov r2.y, cb1[1].y
  mov r2.z, cb1[2].y
  mov r2.w, cb1[3].y
  mov r3.x, cb1[0].z
  mov r3.y, cb1[1].z
  mov r3.z, cb1[2].z
  mov r3.w, cb1[3].z
  mov r4.x, cb1[0].w
  mov r4.y, cb1[1].w
  mov r4.z, cb1[2].w
  mov r4.w, cb1[3].w
  mov r0.yzw, cb1[62].xxyz
  mov r5.x, cb1[163].y
else
  mov r1.x, cb3[0].x
  mov r1.y, cb3[1].x
  mov r1.z, cb3[2].x
  mov r1.w, cb3[3].x
  mov r2.x, cb3[0].y
  mov r2.y, cb3[1].y
  mov r2.z, cb3[2].y
  mov r2.w, cb3[3].y
  mov r3.x, cb3[0].z
  mov r3.y, cb3[1].z
  mov r3.z, cb3[2].z
  mov r3.w, cb3[3].z
  mov r4.x, cb3[0].w
  mov r4.y, cb3[1].w
  mov r4.z, cb3[2].w
  mov r4.w, cb3[3].w
  mov r0.yzw, cb3[62].xxyz
  mov r5.x, cb3[163].y
endif
iadd r5.y, v1.x, cb0[14].x
imul null, r5.z, r5.y, l(3)
ld_indexable(buffer)(float,float,float,float) r6.xyzw, r5.zzzz, t1.xyzw
imad r5.zw, l(0, 0, 3, 3), r5.yyyy, l(0, 0, 1, 2)
ld_indexable(buffer)(float,float,float,float) r7.xyz, r5.zzzz, t1.xyzw
ld_indexable(buffer)(float,float,float,float) r8.xyz, r5.wwww, t1.xyzw
ld_indexable(buffer)(float,float,float,float) r9.xyzw, r5.yyyy, t0.xywz
mul r5.y, r6.w, l(0.00390625000)
round_z r5.y, r5.y
mul r10.xyz, r9.yyyy, cb2[1].xyzx
mad r10.xyz, cb2[0].xyzx, r9.xxxx, r10.xyzx
mad r10.xyz, cb2[2].xyzx, r9.wwww, r10.xyzx
add r10.xyz, r10.xyzx, cb2[3].xyzx
add r5.z, -r5.y, l(1.000000)
mul r5.z, r5.z, cb0[13].w
mad r5.y, cb0[13].z, r5.y, r5.z
add r11.xyz, r10.xyzx, -cb0[11].xyzx
dp3 r5.z, r11.xyzx, r11.xyzx
sqrt r5.z, r5.z
mad r5.z, cb0[8].w, r9.z, r5.z
add r10.xyz, r10.xyzx, -cb0[12].xyzx
dp3 r5.w, r10.xyzx, r10.xyzx
sqrt r5.w, r5.w
mad r5.w, cb0[8].w, r9.z, r5.w
lt r10.xyz, cb0[8].xyzx, r5.zzzz
and r10.xyz, r10.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
dp3 r5.z, r10.xyzx, cb0[10].xyzx
lt r10.xyz, cb0[9].xyzx, r5.wwww
and r10.xyz, r10.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
dp3 r5.w, r10.xyzx, cb0[10].xyzx
mul r5.w, r5.w, cb0[12].w
mad r5.z, r5.z, cb0[11].w, r5.w
lt r5.z, |r5.z|, l(0.999000)
and r5.z, r5.z, l(0x3f800000)
mul r5.y, r5.z, r5.y
mov r10.x, r6.x
mov r10.y, r7.x
mov r10.z, r8.x
mov r10.w, r9.x
dp4 r5.z, v0.xyzw, r10.xyzw
mov r10.x, r6.y
mov r10.y, r7.y
mov r10.z, r8.y
mov r10.w, r9.y
dp4 r5.w, v0.xyzw, r10.xyzw
mov r9.x, r6.z
mov r9.y, r7.z
mov r9.z, r8.z
dp4 r6.x, v0.xyzw, r9.xyzw
mul r6.yzw, r5.wwww, cb2[1].xxyz
mad r6.yzw, cb2[0].xxyz, r5.zzzz, r6.yyzw
mad r6.xyz, cb2[2].xyzx, r6.xxxx, r6.yzwy
add r0.yzw, r0.yyzw, cb2[3].xxyz
add r6.xyz, r0.yzwy, r6.xyzx
mov r6.w, l(1.000000)
mul r6.xyzw, r5.yyyy, r6.xyzw
dp4 r1.x, r6.xyzw, r1.xyzw
dp4 r1.y, r6.xyzw, r2.xyzw
dp4 r1.z, r6.xyzw, r3.xyzw
dp4 r1.w, r6.xyzw, r4.xyzw
or r0.y, cb0[0].x, cb0[14].z
if_nz r0.y
  mov r2.x, icb[r0.x + 0].x
  mov r2.y, l(1.000000)
  dp2 o1.x, r1.xwxx, r2.xyxx
  mul r0.y, r5.x, l(0.500000)
  mul r0.x, r1.w, icb[r0.x + 0].x
  mad r0.z, -r5.x, l(0.500000), l(1.000000)
  mul r0.x, r0.z, r0.x
  mad r1.x, r1.x, r0.y, r0.x
else
  mov o1.x, l(0)
endif
mov o0.xyzw, r1.xyzw
ret
// Approximately 0 instruction slots used
