//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jul 18 19:03:54 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// ATTRIBUTE                0   xyzw        0     NONE   float   xyz
// ATTRIBUTE                1   xyz         1     NONE   float
// ATTRIBUTE                2   xyzw        2     NONE   float
// ATTRIBUTE                3   xyzw        3     NONE    uint   xyzw
// ATTRIBUTE                4   xyzw        4     NONE   float   xyzw
// ATTRIBUTE                5   xy          5     NONE   float   xy
// ATTRIBUTE               13   xyzw        6     NONE   float
// SV_InstanceID            0   x           7   INSTID    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy
// PACKED_EYE_INDEX         0   x           1     NONE    uint   x
// SV_POSITION              0   xyzw        2      POS   float   xyzw
// SV_ClipDistance          1   x           3  CLIPDST   float   x
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -1.000000, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 1.000000} }
dcl_constantbuffer cb0[8], immediateIndexed
dcl_constantbuffer cb1[166], immediateIndexed
dcl_constantbuffer cb2[4], immediateIndexed
dcl_constantbuffer cb3[164], immediateIndexed
dcl_resource_buffer (float,float,float,float) t0
dcl_input v0.xyz
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_input v5.xy
dcl_input_sgv v7.x, instance_id
dcl_output o0.xy
dcl_output o1.x
dcl_output_siv o2.xyzw, position
dcl_output_siv o3.x, clip_distance
dcl_temps 14
if_nz cb0[7].y
  mov r0.x, cb1[165].w
else
  and r0.x, v7.x, l(1)
endif
if_z r0.x
  mov r1.x, cb1[0].x
  mov r1.y, cb1[1].x
  mov r1.z, cb1[2].x
  mov r1.w, cb1[3].x
  mov r2.x, cb1[0].y
  mov r2.y, cb1[1].y
  mov r2.z, cb1[2].y
  mov r2.w, cb1[3].y
  mov r3.x, cb1[0].z
  mov r3.y, cb1[1].z
  mov r3.z, cb1[2].z
  mov r3.w, cb1[3].z
  mov r4.x, cb1[0].w
  mov r4.y, cb1[1].w
  mov r4.z, cb1[2].w
  mov r4.w, cb1[3].w
  mov r0.yzw, cb1[62].xxyz
  mov r5.x, cb1[163].y
else
  mov r1.x, cb3[0].x
  mov r1.y, cb3[1].x
  mov r1.z, cb3[2].x
  mov r1.w, cb3[3].x
  mov r2.x, cb3[0].y
  mov r2.y, cb3[1].y
  mov r2.z, cb3[2].y
  mov r2.w, cb3[3].y
  mov r3.x, cb3[0].z
  mov r3.y, cb3[1].z
  mov r3.z, cb3[2].z
  mov r3.w, cb3[3].z
  mov r4.x, cb3[0].w
  mov r4.y, cb3[1].w
  mov r4.z, cb3[2].w
  mov r4.w, cb3[3].w
  mov r0.yzw, cb3[62].xxyz
  mov r5.x, cb3[163].y
endif
imul null, r6.xyzw, v3.xyzw, l(3, 3, 3, 3)
ld_indexable(buffer)(float,float,float,float) r7.xyzw, r6.xxxx, t0.xyzw
imad r8.xyzw, v3.xxyy, l(3, 3, 3, 3), l(1, 2, 1, 2)
ld_indexable(buffer)(float,float,float,float) r9.xyzw, r8.xxxx, t0.xyzw
ld_indexable(buffer)(float,float,float,float) r10.xyzw, r8.yyyy, t0.xyzw
ld_indexable(buffer)(float,float,float,float) r11.xyzw, r6.yyyy, t0.xyzw
ld_indexable(buffer)(float,float,float,float) r12.xyzw, r8.zzzz, t0.xyzw
ld_indexable(buffer)(float,float,float,float) r8.xyzw, r8.wwww, t0.xyzw
mul r11.xyzw, r11.xyzw, v4.yyyy
mul r12.xyzw, r12.xyzw, v4.yyyy
mul r8.xyzw, r8.xyzw, v4.yyyy
mad r7.xyzw, v4.xxxx, r7.xyzw, r11.xyzw
mad r9.xyzw, v4.xxxx, r9.xyzw, r12.xyzw
mad r8.xyzw, v4.xxxx, r10.xyzw, r8.xyzw
ld_indexable(buffer)(float,float,float,float) r10.xyzw, r6.zzzz, t0.xyzw
imad r11.xyzw, v3.zzww, l(3, 3, 3, 3), l(1, 2, 1, 2)
ld_indexable(buffer)(float,float,float,float) r12.xyzw, r11.xxxx, t0.xyzw
ld_indexable(buffer)(float,float,float,float) r13.xyzw, r11.yyyy, t0.xyzw
mad r7.xyzw, v4.zzzz, r10.xyzw, r7.xyzw
mad r9.xyzw, v4.zzzz, r12.xyzw, r9.xyzw
mad r8.xyzw, v4.zzzz, r13.xyzw, r8.xyzw
ld_indexable(buffer)(float,float,float,float) r6.xyzw, r6.wwww, t0.xyzw
ld_indexable(buffer)(float,float,float,float) r10.xyzw, r11.zzzz, t0.xyzw
ld_indexable(buffer)(float,float,float,float) r11.xyzw, r11.wwww, t0.xyzw
mad r6.xyzw, v4.wwww, r6.xyzw, r7.xyzw
mad r7.xyzw, v4.wwww, r10.xyzw, r9.xyzw
mad r8.xyzw, v4.wwww, r11.xyzw, r8.xyzw
mov r9.xyz, v0.xyzx
mov r9.w, l(1.000000)
dp4 r5.y, r6.xyzw, r9.xyzw
dp4 r5.z, r7.xyzw, r9.xyzw
dp4 r5.w, r8.xyzw, r9.xyzw
mul r6.xyz, r5.zzzz, cb2[1].xyzx
mad r6.xyz, cb2[0].xyzx, r5.yyyy, r6.xyzx
mad r5.yzw, cb2[2].xxyz, r5.wwww, r6.xxyz
add r0.yzw, r0.yyzw, cb2[3].xxyz
add r6.xyz, r0.yzwy, r5.yzwy
mov r6.w, l(1.000000)
dp4 r1.x, r6.xyzw, r1.xyzw
dp4 r1.y, r6.xyzw, r2.xyzw
dp4 r1.z, r6.xyzw, r3.xyzw
dp4 r1.w, r6.xyzw, r4.xyzw
or r0.y, cb0[0].x, cb0[7].y
if_nz r0.y
  mov r2.x, icb[r0.x + 0].x
  mov r2.y, l(1.000000)
  dp2 o3.x, r1.xwxx, r2.xyxx
  mul r0.y, r5.x, l(0.500000)
  mul r0.z, r1.w, icb[r0.x + 0].x
  mad r0.w, -r5.x, l(0.500000), l(1.000000)
  mul r0.z, r0.w, r0.z
  mad r1.x, r1.x, r0.y, r0.z
else
  mov o3.x, l(0)
endif
movc r0.y, cb0[0].x, l(-0.000000), l(0)
or o1.x, r0.x, r0.y
mov o2.xyzw, r1.xyzw
mov o0.xy, v5.xyxx
ret
// Approximately 0 instruction slots used
