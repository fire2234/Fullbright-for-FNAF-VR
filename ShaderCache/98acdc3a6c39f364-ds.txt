//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jul 18 00:46:48 2019
//
//
// Patch Constant signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TessFactor            0   x           0  TRIEDGE   float
// SV_TessFactor            1   x           1  TRIEDGE   float
// SV_TessFactor            2   x           2  TRIEDGE   float
// SV_InsideTessFactor      0   x           3   TRIINT   float
// PN_POSITION              9   xyzw        4     NONE   float   xyzw
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyz
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// PACKED_EYE_INDEX         0   x           3     NONE    uint   x
// VS_to_DS_Position        0   xyzw        4     NONE   float
// PN_POSITION              0   xyzw        5     NONE   float   xyzw
// PN_POSITION              1   xyzw        6     NONE   float   xyzw
// PN_POSITION              2   xyzw        7     NONE   float   xyzw
// PN_DisplacementScales     0   xyz         8     NONE   float
// PN_TessellationMultiplier     0      w        8     NONE   float
// PN_WorldDisplacementMultiplier     0   x           9     NONE   float   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyz
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// PACKED_EYE_INDEX         0   x           3     NONE    uint   x
// TEXCOORD                 6   x           4     NONE   float
// TEXCOORD                 7    yzw        4     NONE   float
// SV_POSITION              0   xyzw        5      POS   float   xyzw
// SV_ClipDistance          1   x           6  CLIPDST   float   x
//
ds_5_0
dcl_input_control_point_count 3
dcl_tessellator_domain domain_tri
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -1.000000, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 1.000000} }
dcl_constantbuffer cb0[13], immediateIndexed
dcl_constantbuffer cb1[164], immediateIndexed
dcl_constantbuffer cb2[164], immediateIndexed
dcl_constantbuffer cb3[19], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input vpc4.xyzw
dcl_input vDomain.xyz
dcl_input vicp[3][0].xyz
dcl_input vicp[3][1].xyzw
dcl_input vicp[3][2].xyzw
dcl_input vicp[3][3].x
dcl_input vicp[3][5].xyzw
dcl_input vicp[3][6].xyzw
dcl_input vicp[3][7].xyzw
dcl_input vicp[3][9].x
dcl_output o0.xyz
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.x
dcl_output_siv o5.xyzw, position
dcl_output_siv o6.x, clip_distance
dcl_temps 7
and r0.x, l(1), vicp[0][3].x
if_z r0.x
  mov r0.y, cb1[163].y
else
  mov r0.y, cb2[163].y
endif
mul r1.xyz, vDomain.xyzx, vDomain.xyzx
mul r2.xyz, r1.xyzx, l(3.000000, 3.000000, 3.000000, 0.000000)
mul r3.xyzw, r1.xxxx, vicp[0][5].xyzw
mul r4.xyzw, r1.yyyy, vicp[1][5].xyzw
mul r4.xyzw, r4.xyzw, vDomain.yyyy
mad r3.xyzw, r3.xyzw, vDomain.xxxx, r4.xyzw
mul r1.xyzw, r1.zzzz, vicp[2][5].xyzw
mad r1.xyzw, r1.xyzw, vDomain.zzzz, r3.xyzw
mul r3.xyzw, r2.xxxx, vicp[0][6].xyzw
mad r1.xyzw, r3.xyzw, vDomain.yyyy, r1.xyzw
mul r3.xyzw, r2.yyyy, vicp[0][7].xyzw
mad r1.xyzw, r3.xyzw, vDomain.xxxx, r1.xyzw
mul r3.xyzw, r2.yyyy, vicp[1][6].xyzw
mad r1.xyzw, r3.xyzw, vDomain.zzzz, r1.xyzw
mul r3.xyzw, r2.zzzz, vicp[1][7].xyzw
mad r1.xyzw, r3.xyzw, vDomain.yyyy, r1.xyzw
mul r3.xyzw, r2.zzzz, vicp[2][6].xyzw
mad r1.xyzw, r3.xyzw, vDomain.xxxx, r1.xyzw
mul r2.xyzw, r2.xxxx, vicp[2][7].xyzw
mad r1.xyzw, r2.xyzw, vDomain.zzzz, r1.xyzw
mul r2.xyzw, vpc4.xyzw, vDomain.zzzz
mul r2.xyzw, r2.xyzw, vDomain.xxxx
mul r2.xyzw, r2.xyzw, vDomain.yyyy
mad r1.xyzw, r2.xyzw, l(6.000000, 6.000000, 6.000000, 6.000000), r1.xyzw
mul r2.xyz, vDomain.yyyy, vicp[1][0].xyzx
mad r2.xyz, vicp[0][0].xyzx, vDomain.xxxx, r2.xyzx
mul r3.xyzw, vDomain.yyyy, vicp[1][1].xyzw
mad r3.xyzw, vicp[0][1].xyzw, vDomain.xxxx, r3.xyzw
mul r4.xyzw, vDomain.yyyy, vicp[1][2].xyzw
mad r4.xyzw, vicp[0][2].xyzw, vDomain.xxxx, r4.xyzw
mad o0.xyz, vicp[2][0].xyzx, vDomain.zzzz, r2.xyzx
mad r2.xyzw, vicp[2][1].xyzw, vDomain.zzzz, r3.xyzw
mad r3.xyzw, vicp[2][2].xyzw, vDomain.zzzz, r4.xyzw
mul r0.z, cb1[132].z, cb3[18].y
mul r4.xyzw, r3.xyxy, l(20.000000, 2.000000, 20.000000, 2.000000)
mad r5.xyzw, r0.zzzz, l(0.100000, 0.100000, -0.100000, -0.100000), r4.zwzw
sample_l_indexable(texture2d)(float,float,float,float) r6.xyz, r5.xyxx, t0.xyzw, s0, l(-1.000000)
add r5.xy, r5.zwzz, l(0.418100, 0.354800, 0.000000, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r5.xyz, r5.xyxx, t0.xyzw, s0, l(-1.000000)
add r5.xyz, r5.xyzx, r6.xyzx
mad r4.xyzw, r0.zzzz, l(-0.100000, 0.100000, 0.100000, -0.100000), r4.xyzw
add r4.xyzw, r4.xyzw, l(0.864861, 0.148384, 0.651340, 0.751638)
sample_l_indexable(texture2d)(float,float,float,float) r6.xyz, r4.xyxx, t0.xyzw, s0, l(-1.000000)
sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, r4.zwzz, t0.xyzw, s0, l(-1.000000)
add r4.xyz, r4.xyzx, r6.xyzx
add r4.xyz, r4.xyzx, r5.xyzx
mul r4.xyz, r4.xyzx, cb3[18].zzzz
mul r4.xyz, r2.xyzx, r4.xyzx
mul r4.xyz, r4.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)
mad r4.xyz, cb3[17].zzzz, -r4.xyzx, r4.xyzx
mul r0.z, vDomain.y, vicp[1][9].x
mad r0.z, vicp[0][9].x, vDomain.x, r0.z
mad r0.z, vicp[2][9].x, vDomain.z, r0.z
mad r1.xyz, r4.xyzx, r0.zzzz, r1.xyzx
mul r4.xyzw, r1.yyyy, cb0[9].xyzw
mad r4.xyzw, r1.xxxx, cb0[8].xyzw, r4.xyzw
mad r4.xyzw, r1.zzzz, cb0[10].xyzw, r4.xyzw
mad r1.xyzw, r1.wwww, cb0[11].xzyw, r4.xzyw
ne r0.z, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[12].x
lt r0.w, r1.y, l(0.000000)
and r0.z, r0.w, r0.z
movc r4.xy, r0.zzzz, l(0.000001,1.000000,0,0), r1.ywyy
mad r0.z, r4.x, cb0[7].w, cb0[7].z
mul r1.y, r4.y, r0.z
ushr r0.z, vicp[0][3].x, l(1)
if_nz r0.z
  mov r4.z, r1.x
  mov r5.x, icb[r0.x + 0].x
  mov r5.y, l(1.000000)
  dp2 o6.x, r4.zyzz, r5.xyxx
  mul r0.z, r0.y, l(0.500000)
  mul r0.x, r4.y, icb[r0.x + 0].x
  mad r0.y, -r0.y, l(0.500000), l(1.000000)
  mul r0.x, r0.y, r0.x
  mad r1.x, r1.x, r0.z, r0.x
else
  mov o6.x, l(0)
endif
mov o1.xyzw, r2.xyzw
mov o2.xyzw, r3.xyzw
mov r1.w, r4.y
mov o5.xyzw, r1.xzyw
mov o3.x, vicp[0][3].x
ret
// Approximately 0 instruction slots used
