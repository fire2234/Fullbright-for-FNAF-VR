//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jul 18 00:46:48 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// ATTRIBUTE                0   xyzw        0     NONE   float   xyz
// SV_VertexID              0   x           1   VERTID    uint   x
// SV_InstanceID            0   x           2   INSTID    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyzw
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// PACKED_EYE_INDEX         0   x           3     NONE    uint   x
// TEXCOORD                 7   xyzw        4     NONE   float   xyzw
// TEXCOORD                 9   xyz         5     NONE   float   xyz
// VS_To_DS_Position        0   xyzw        6     NONE   float   xyzw
// SV_ClipDistance          1   x           7  CLIPDST   float   x
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[8], immediateIndexed
dcl_constantbuffer cb1[178], immediateIndexed
dcl_constantbuffer cb2[5], immediateIndexed
dcl_constantbuffer cb3[63], immediateIndexed
dcl_constantbuffer cb4[92], immediateIndexed
dcl_constantbuffer cb5[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texturecube (float,float,float,float) t0
dcl_resource_buffer (float,float,float,float) t1
dcl_resource_buffer (float,float,float,float) t2
dcl_input v0.xyz
dcl_input_sgv v1.x, vertex_id
dcl_input_sgv v2.x, instance_id
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.x
dcl_output o4.xyzw
dcl_output o5.xyz
dcl_output o6.xyzw
dcl_output_siv o7.x, clip_distance
dcl_temps 8
and r0.x, v2.x, l(1)
if_z r0.x
  mov r0.yzw, cb1[60].xxyz
  mov r1.xyz, cb1[62].xyzx
else
  mov r0.yzw, cb3[60].xxyz
  mov r1.xyz, cb3[62].xyzx
endif
iadd r1.w, v1.x, cb0[7].y
ishl r2.x, r1.w, l(1)
ld_indexable(buffer)(float,float,float,float) r2.xyz, r2.xxxx, t2.xyzw
bfi r2.w, l(31), l(1), r1.w, l(1)
ld_indexable(buffer)(float,float,float,float) r3.xyzw, r2.wwww, t2.xyzw
mul r4.xyz, r2.xyzx, r3.yzxy
mad r2.xyz, r3.xyzx, r2.yzxy, -r4.xyzx
mul r2.xyz, r3.wwww, r2.xyzx
mul r4.xyz, r3.yzxy, r2.xyzx
mad r2.xyz, r2.zxyz, r3.zxyz, -r4.xyzx
mul r2.xyz, r3.wwww, r2.xyzx
mul r4.xyz, cb2[0].xyzx, cb2[4].xxxx
mul r5.xyz, cb2[1].xyzx, cb2[4].yyyy
mul r6.xyz, cb2[2].xyzx, cb2[4].zzzz
mul r7.xyz, r2.yyyy, r5.xyzx
mad r2.xyw, r2.xxxx, r4.xyxz, r7.xyxz
mad o0.xyz, r2.zzzz, r6.xyzx, r2.xywx
mul r2.xyz, r3.yyyy, r5.xyzx
mad r2.xyz, r3.xxxx, r4.xyzx, r2.xyzx
mad o1.xyz, r3.zzzz, r6.xyzx, r2.xyzx
mul o1.w, r3.w, cb2[4].w
mul r2.xyz, v0.yyyy, cb2[1].xyzx
mad r2.xyz, cb2[0].xyzx, v0.xxxx, r2.xyzx
mad r2.xyz, cb2[2].xyzx, v0.zzzz, r2.xyzx
add r1.xyz, r1.xyzx, cb2[3].xyzx
add r1.xyz, r1.xyzx, r2.xyzx
imul null, r1.w, r1.w, cb5[0].y
ld_indexable(buffer)(float,float,float,float) r2.xy, r1.wwww, t1.xyzw
movc r1.w, cb0[0].x, l(1), l(0)
imad o3.x, r1.w, l(0x80000000), r0.x
add r0.xyz, -r0.yzwy, r1.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
sqrt r1.w, r0.w
dp3 r2.z, r0.xyzx, cb1[52].xyzx
div r1.w, r1.w, r2.z
mul r1.w, r1.w, cb1[177].z
max r1.w, r1.w, l(0.000000)
rsq r2.z, r0.w
mul r0.w, r0.w, r2.z
mul r3.xyz, r0.xyzx, r2.zzzz
max r1.w, r1.w, cb4[85].w
lt r2.w, l(0.000000), r1.w
mul r3.w, r2.z, r1.w
mad r4.x, r3.w, r0.z, cb1[59].z
mad r3.w, -r3.w, r0.z, r0.z
mad r1.w, -r1.w, r2.z, l(1.000000)
mul r1.w, r0.w, r1.w
add r2.z, r4.x, -cb4[87].y
mul r2.z, r2.z, cb4[85].y
max r2.z, r2.z, l(-127.000000)
exp r2.z, -r2.z
mul r2.z, r2.z, cb4[87].x
movc r2.z, r2.w, r2.z, cb4[85].x
movc r1.w, r2.w, r1.w, r0.w
movc r2.w, r2.w, r3.w, r0.z
mul r2.w, r2.w, cb4[85].y
max r2.w, r2.w, l(-127.000000)
exp r3.w, -r2.w
add r3.w, -r3.w, l(1.000000)
div r3.w, r3.w, r2.w
mad r4.x, -r2.w, l(0.240226507), l(0.693147182)
lt r2.w, l(0.010000), |r2.w|
movc r2.w, r2.w, r3.w, r4.x
mul r2.z, r2.w, r2.z
mul r2.w, r1.w, r2.z
lt r4.xy, l(0.000000, 0.000000, 0.000000, 0.000000), cb4[87].zwzz
if_nz r4.x
  mad_sat r3.w, r0.w, cb4[91].x, cb4[91].y
  mul r4.xz, cb4[90].yyxy, l(1.000000, 0.000000, -1.000000, 0.000000)
  dp2 r5.x, r0.xyxx, r4.xzxx
  dp2 r5.y, r0.xyxx, cb4[90].xyxx
  mov r5.z, r0.z
  sample_l_indexable(texturecube)(float,float,float,float) r0.xyz, r5.xyzx, t0.xyzw, s0, l(0.000000)
  sample_l_indexable(texturecube)(float,float,float,float) r4.xzw, r5.xyzx, t0.xwyz, s0, cb4[91].z
  add r0.xyz, r0.xyzx, -r4.xzwx
  mad r0.xyz, r3.wwww, r0.xyzx, r4.xzwx
  mul r0.xyz, r0.xyzx, cb4[86].xyzx
else
  mov r0.xyz, cb4[86].xyzx
endif
ge r3.w, cb4[88].w, l(0.000000)
eq r4.x, cb4[87].z, l(0.000000)
and r3.w, r3.w, r4.x
dp3_sat r3.x, r3.xyzx, cb4[88].xyzx
log r3.x, r3.x
mul r3.x, r3.x, cb4[89].w
exp r3.x, r3.x
mul r3.xyz, r3.xxxx, cb4[89].xyzx
add r1.w, r1.w, -cb4[88].w
max r1.w, r1.w, l(0.000000)
mul r1.w, r1.w, r2.z
exp r1.w, -r1.w
min r1.w, r1.w, l(1.000000)
add r1.w, -r1.w, l(1.000000)
mul r3.xyz, r1.wwww, r3.xyzx
and r3.xyz, r3.xyzx, r3.wwww
exp r1.w, -r2.w
min r1.w, r1.w, l(1.000000)
max r3.w, r1.w, cb4[86].w
lt r0.w, cb4[87].w, r0.w
and r0.w, r0.w, r4.y
movc r3.xyzw, r0.wwww, l(0,0,0,1.000000), r3.xyzw
add r0.w, -r3.w, l(1.000000)
mad o4.xyz, r0.xyzx, r0.wwww, r3.xyzx
mov o0.w, l(0)
mov o2.xy, r2.xyxx
mov o2.zw, l(0,0,0,0)
mov o4.w, r3.w
mov o6.xyz, r1.xyzx
mov o6.w, l(1.000000)
mov o5.xyz, r1.xyzx
mov o7.x, l(0)
ret
// Approximately 0 instruction slots used
