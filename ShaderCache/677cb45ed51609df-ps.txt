//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jul 18 00:46:53 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyz
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// PACKED_EYE_INDEX         0   x           2     NONE    uint   x
// TEXCOORD                 7   xyzw        3     NONE   float   xyzw
// SV_Position              0   xyzw        4      POS   float   xyzw
// SV_IsFrontFace           0   x           5    FFACE    uint
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer cb0[32], immediateIndexed
dcl_constantbuffer cb1[182], immediateIndexed
dcl_constantbuffer cb2[17], immediateIndexed
dcl_constantbuffer cb3[153], immediateIndexed
dcl_constantbuffer cb4[92], dynamicIndexed
dcl_constantbuffer cb5[6], immediateIndexed
dcl_constantbuffer cb6[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture3d (uint,uint,uint,uint) t0
dcl_resource_texture3d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_buffer (float,float,float,float) t3
dcl_resource_buffer (uint,uint,uint,uint) t4
dcl_resource_buffer (uint,uint,uint,uint) t5
dcl_resource_buffer (float,float,float,float) t6
dcl_resource_buffer (uint,uint,uint,uint) t7
dcl_resource_buffer (uint,uint,uint,uint) t8
dcl_resource_texturecubearray (float,float,float,float) t9
dcl_resource_texture3d (float,float,float,float) t10
dcl_input_ps linear centroid v0.xyz
dcl_input_ps linear centroid v1.xyzw
dcl_input_ps constant v2.x
dcl_input_ps linear v3.xyzw
dcl_input_ps_siv linear noperspective v4.xyzw, position
dcl_output o0.xyzw
dcl_temps 18
and r0.x, v2.x, l(1)
if_z r0.x
  mov r1.x, cb1[4].x
  mov r1.y, cb1[5].x
  mov r1.z, cb1[6].x
  mov r1.w, cb1[7].x
  mov r2.x, cb1[4].y
  mov r2.y, cb1[5].y
  mov r2.z, cb1[6].y
  mov r2.w, cb1[7].y
  mov r3.x, cb1[4].w
  mov r3.y, cb1[5].w
  mov r3.z, cb1[6].w
  mov r3.w, cb1[7].w
  mov r4.x, cb1[40].x
  mov r4.y, cb1[41].x
  mov r4.z, cb1[42].x
  mov r4.w, cb1[43].x
  mov r5.x, cb1[40].y
  mov r5.y, cb1[41].y
  mov r5.z, cb1[42].y
  mov r5.w, cb1[43].y
  mov r6.x, cb1[40].z
  mov r6.y, cb1[41].z
  mov r6.z, cb1[42].z
  mov r6.w, cb1[43].z
  mov r7.x, cb1[40].w
  mov r7.y, cb1[41].w
  mov r7.z, cb1[42].w
  mov r7.w, cb1[43].w
  mov r0.y, cb1[128].w
  mov r0.zw, cb1[129].xxxy
  mov r8.x, cb1[152].w
  mov r8.yzw, cb1[62].xxyz
  mov r9.xyz, cb1[128].xyzx
  mov r10.xy, cb1[121].xyxx
else
  mov r1.x, cb3[4].x
  mov r1.y, cb3[5].x
  mov r1.z, cb3[6].x
  mov r1.w, cb3[7].x
  mov r2.x, cb3[4].y
  mov r2.y, cb3[5].y
  mov r2.z, cb3[6].y
  mov r2.w, cb3[7].y
  mov r3.x, cb3[4].w
  mov r3.y, cb3[5].w
  mov r3.z, cb3[6].w
  mov r3.w, cb3[7].w
  mov r4.x, cb3[40].x
  mov r4.y, cb3[41].x
  mov r4.z, cb3[42].x
  mov r4.w, cb3[43].x
  mov r5.x, cb3[40].y
  mov r5.y, cb3[41].y
  mov r5.z, cb3[42].y
  mov r5.w, cb3[43].y
  mov r6.x, cb3[40].z
  mov r6.y, cb3[41].z
  mov r6.z, cb3[42].z
  mov r6.w, cb3[43].z
  mov r7.x, cb3[40].w
  mov r7.y, cb3[41].w
  mov r7.z, cb3[42].w
  mov r7.w, cb3[43].w
  mov r0.y, cb3[128].w
  mov r0.zw, cb3[129].xxxy
  mov r8.x, cb3[152].w
  mov r8.yzw, cb3[62].xxyz
  mov r9.xyz, cb3[128].xyzx
  mov r10.xy, cb3[121].xyxx
endif
mul r11.xyz, v0.yzxy, v1.zxyz
mad r11.xyz, v1.yzxy, v0.zxyz, -r11.xyzx
mul r11.xyz, r11.xyzx, v1.wwww
mov r12.xyz, v4.xyzx
mov r12.w, l(1.000000)
dp4 r4.x, r12.xyzw, r4.xyzw
dp4 r4.y, r12.xyzw, r5.xyzw
dp4 r4.z, r12.xyzw, r6.xyzw
dp4 r4.w, r12.xyzw, r7.xyzw
div r4.xyz, r4.xyzx, r4.wwww
add r5.xyz, -r8.yzwy, r4.xyzx
dp3 r4.w, -r4.xyzx, -r4.xyzx
rsq r4.w, r4.w
mul r4.xyz, r4.wwww, -r4.xyzx
mad r6.xyz, r0.yyyy, l(0.000000, 0.000000, 1.000000, 0.000000), r9.xyzx
dp3 r0.y, r6.xyzx, r6.xyzx
rsq r0.y, r0.y
mul r6.xyz, r0.yyyy, r6.xyzx
mul r7.xyz, r11.xyzx, r6.yyyy
mad r6.xyw, r6.xxxx, v0.xyxz, r7.xyxz
mad r6.xyz, r6.zzzz, v1.xyzx, r6.xywx
dp3 r0.y, r6.xyzx, r6.xyzx
rsq r0.y, r0.y
mul r6.xyz, r0.yyyy, r6.xyzx
mad r0.y, r0.w, l(0.500000), r0.z
lt r0.z, l(0.000000), cb2[12].z
if_nz r0.z
  mad r7.xyz, r5.xyzx, cb1[178].xyzx, cb1[179].xyzx
  max r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r7.xyz, r7.xyzx, l(0.990000, 0.990000, 0.990000, 0.000000)
  mul r7.xyz, r7.xyzx, cb1[180].xyzx
  ftoi r9.xyz, r7.xyzx
  mov r9.w, l(0)
  ld_indexable(texture3d)(uint,uint,uint,uint) r9.xyzw, r9.xyzw, t0.xyzw
  utof r9.xyzw, r9.xyzw
  add r0.z, cb1[180].w, l(1.000000)
  div r7.xyz, r7.xyzx, r9.wwww
  frc r7.xyz, r7.xyzx
  mul r7.xyz, r7.xyzx, cb1[180].wwww
  mad r7.xyz, r9.xyzx, r0.zzzz, r7.xyzx
  add r7.xyz, r7.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mul r7.xyz, r7.xyzx, cb1[181].xyzx
  sample_l_indexable(texture3d)(float,float,float,float) r0.z, r7.xyzx, t1.zwxy, s0, l(0.000000)
else
  lt r4.w, l(0.000000), cb2[10].w
  movc r0.z, r4.w, cb5[5].x, l(1.000000)
endif
mad r7.xyz, cb1[127].wwww, l(0.040000, 0.040000, 0.040000, 0.000000), cb1[127].xyzx
add r8.yz, -r10.xxyx, v4.xxyx
ftou r8.yz, r8.yyzy
if_z r0.x
  mov r4.w, cb4[3].x
  mov r6.w, cb4[3].y
  mov r7.w, cb4[3].z
  mov r8.w, cb4[1].z
  mov r9.xy, cb4[1].xyxx
  mov r9.z, cb4[2].x
else
  mov r4.w, cb4[43].x
  mov r6.w, cb4[43].y
  mov r7.w, cb4[43].z
  mov r8.w, cb4[41].z
  mov r9.xy, cb4[41].xyxx
  mov r9.z, cb4[42].x
endif
mad r4.w, v4.w, r4.w, r6.w
log r4.w, r4.w
mul r4.w, r7.w, r4.w
max r4.w, r4.w, l(0.000000)
ftou r4.w, r4.w
iadd r6.w, r8.w, l(-1)
umin r4.w, r4.w, r6.w
ushr r8.yz, r8.yyzy, r9.zzzz
imad r4.w, r4.w, r9.y, r8.z
imad r4.w, r4.w, r9.x, r8.y
if_z r0.x
  mov r6.w, cb4[0].z
  mov r7.w, cb4[6].x
  mov r8.yz, cb4[6].zzwz
  mov r9.xyz, cb4[5].xyzx
else
  mov r6.w, cb4[40].z
  mov r7.w, cb4[46].x
  mov r8.yz, cb4[46].zzwz
  mov r9.xyz, cb4[45].xyzx
endif
if_nz r6.w
  and r10.xyzw, r7.wwww, l(255, 2, 4, 8)
  movc r10.xyzw, r10.xyzw, l(1,1.000000,1.000000,1.000000), l(0,0,0,0)
  if_nz cb4[7].x
    mov r6.w, cb4[7].x
    mov r8.w, l(0)
    loop
      uge r9.w, r8.w, cb4[7].x
      breakc_nz r9.w
      dp4 r9.w, cb4[8].xyzw, icb[r8.w + 0].xyzw
      lt r9.w, v4.w, r9.w
      if_nz r9.w
        mov r6.w, r8.w
        break
      endif
      iadd r8.w, r8.w, l(1)
    endloop
    ult r8.w, r6.w, cb4[7].x
    if_nz r8.w
      ishl r8.w, r6.w, l(2)
      mul r11.xyzw, r5.yyyy, cb4[r8.w + 10].xyzw
      mad r11.xyzw, r5.xxxx, cb4[r8.w + 9].xyzw, r11.xyzw
      mad r11.xyzw, r5.zzzz, cb4[r8.w + 11].xyzw, r11.xyzw
      add r11.xyzw, r11.xyzw, cb4[r8.w + 12].xyzw
      div r12.xyzw, r11.xyxy, r11.wwww
      ge r11.xy, r12.zwzz, cb4[r6.w + 25].xyxx
      ge r13.xy, cb4[r6.w + 25].zwzz, r12.zwzz
      and r11.xy, r11.xyxx, r13.xyxx
      and r6.w, r11.y, r11.x
      if_nz r6.w
        mad r12.xyzw, r12.xyzw, cb4[29].xyxy, l(-0.500000, -0.500000, -0.500000, -0.500000)
        frc r11.xy, r12.zwzz
        round_ni r12.xyzw, r12.xyzw
        add r13.xyzw, r12.zwzw, l(0.500000, 1.500000, 0.500000, 0.500000)
        mul r13.xyzw, r13.xyzw, cb4[29].zwzw
        sample_l_indexable(texture2d)(float,float,float,float) r14.x, r13.xyxx, t2.xyzw, s1, l(0.000000)
        add r12.xyzw, r12.xyzw, l(1.500000, 1.500000, 1.500000, 0.500000)
        mul r12.xyzw, r12.xyzw, cb4[29].zwzw
        sample_l_indexable(texture2d)(float,float,float,float) r14.y, r12.xyxx, t2.yxzw, s1, l(0.000000)
        sample_l_indexable(texture2d)(float,float,float,float) r14.z, r12.zwzz, t2.yzxw, s1, l(0.000000)
        sample_l_indexable(texture2d)(float,float,float,float) r14.w, r13.zwzz, t2.yzwx, s1, l(0.000000)
        add r12.xyzw, -r11.zzzz, r14.xyzw
        mad_sat r12.xyzw, r12.xyzw, l(4000.000000, 4000.000000, 4000.000000, 4000.000000), l(1.000000, 1.000000, 1.000000, 1.000000)
        add r11.zw, -r12.wwwx, r12.zzzy
        mad r11.xz, r11.xxxx, r11.zzwz, r12.wwxw
        add r6.w, -r11.x, r11.z
        mad r6.w, r11.y, r6.w, r11.x
      else
        mov r6.w, l(1.000000)
      endif
    else
      mov r6.w, l(1.000000)
    endif
  else
    mov r6.w, l(1.000000)
  endif
  if_nz r10.x
    mov r10.x, l(1.000000)
    dp4 r8.w, l(1.000000, 1.000000, 1.000000, 1.000000), r10.xyzw
    add r9.w, r8.w, l(-1.000000)
    mad r8.w, r8.w, r9.w, l(1.000000)
    mad_sat r8.y, v4.w, r8.y, r8.z
    mul r8.y, r8.y, r8.y
    add r8.z, -r6.w, r8.w
    mad r10.x, r8.y, r8.z, r6.w
    min r10.y, r10.x, l(1.000000)
  else
    mov r10.xy, l(1.000000,1.000000,0,0)
  endif
  add r6.w, r10.y, r10.x
  lt r6.w, l(0.000000), r6.w
  if_nz r6.w
    mul r8.yzw, cb1[126].xxyz, l(0.000000, 0.318309873, 0.318309873, 0.318309873)
    mul r9.xyz, r9.xyzx, r10.xxxx
    mul r8.yzw, r8.yyzw, r9.xxyz
  else
    mov r8.yzw, l(0,0,0,0)
  endif
  ushr r6.w, r7.w, l(8)
  and r6.w, r6.w, cb2[16].w
  movc r8.yzw, r6.wwww, r8.yyzw, l(0,0,0,0)
  mov r0.z, l(1.000000)
else
  mov r8.yzw, l(0,0,0,0)
endif
if_z r0.x
  ishl r6.w, r4.w, l(1)
  ld_indexable(buffer)(uint,uint,uint,uint) r6.w, r6.wwww, t4.yzwx
  umin r6.w, r6.w, cb4[0].x
  bfi r7.w, l(31), l(1), r4.w, l(1)
  ld_indexable(buffer)(uint,uint,uint,uint) r7.w, r7.wwww, t4.yzwx
else
  ishl r9.x, r4.w, l(1)
  ld_indexable(buffer)(uint,uint,uint,uint) r9.x, r9.xxxx, t7.xyzw
  umin r6.w, r9.x, cb4[40].x
  bfi r4.w, l(31), l(1), r4.w, l(1)
  ld_indexable(buffer)(uint,uint,uint,uint) r7.w, r4.wwww, t7.yzwx
endif
movc r4.w, r0.x, cb4[40].x, cb4[0].x
umin r4.w, r4.w, r6.w
mul r9.xyz, cb1[126].xyzx, l(0.318309873, 0.318309873, 0.318309873, 0.000000)
mov r0.w, l(1.000000)
mov r10.xyz, r8.yzwy
mov r6.w, l(0)
loop
  uge r9.w, r6.w, r4.w
  breakc_nz r9.w
  iadd r9.w, r6.w, r7.w
  if_z r0.x
    ld_indexable(buffer)(uint,uint,uint,uint) r10.w, r9.wwww, t5.yzwx
    imul null, r11.x, r10.w, l(5)
    ld_indexable(buffer)(float,float,float,float) r11.xyzw, r11.xxxx, t3.xyzw
    imad r12.xyzw, r10.wwww, l(5, 5, 5, 5), l(1, 2, 3, 4)
    ld_indexable(buffer)(float,float,float,float) r13.xyzw, r12.xxxx, t3.xyzw
    ld_indexable(buffer)(float,float,float,float) r14.xyzw, r12.yyyy, t3.wxyz
    ld_indexable(buffer)(float,float,float,float) r12.xyz, r12.zzzz, t3.xywz
    ld_indexable(buffer)(float,float,float,float) r15.xyz, r12.wwww, t3.xyzw
  else
    ld_indexable(buffer)(uint,uint,uint,uint) r9.w, r9.wwww, t8.yzwx
    imul null, r10.w, r9.w, l(5)
    ld_indexable(buffer)(float,float,float,float) r11.xyzw, r10.wwww, t6.xyzw
    imad r16.xyzw, r9.wwww, l(5, 5, 5, 5), l(1, 2, 3, 4)
    ld_indexable(buffer)(float,float,float,float) r13.xyzw, r16.xxxx, t6.xyzw
    ld_indexable(buffer)(float,float,float,float) r14.xyzw, r16.yyyy, t6.wxyz
    ld_indexable(buffer)(float,float,float,float) r12.xyz, r16.zzzz, t6.xywz
    ld_indexable(buffer)(float,float,float,float) r15.xyz, r16.wwww, t6.xyzw
  endif
  eq r9.w, r13.w, l(0.000000)
  lt r10.w, l(-2.000000), r12.x
  add r11.xyz, -r5.xyzx, r11.xyzx
  dp3 r12.w, r11.xyzx, r11.xyzx
  rsq r15.w, r12.w
  mul r16.xyz, r11.xyzx, r15.wwww
  mul r15.w, r11.w, r11.w
  mul r12.w, r12.w, r15.w
  mad r12.w, -r12.w, r12.w, l(1.000000)
  max r12.w, r12.w, l(0.000000)
  mul r12.w, r12.w, r12.w
  mul r17.xyz, r11.wwww, r11.xyzx
  dp3 r11.w, r17.xyzx, r17.xyzx
  min r11.w, r11.w, l(1.000000)
  add r11.w, -r11.w, l(1.000000)
  log r11.w, r11.w
  mul r11.w, r11.w, r13.w
  exp r11.w, r11.w
  movc r11.w, r9.w, r12.w, r11.w
  dp3 r12.w, r16.xyzx, r14.yzwy
  add r12.x, -r12.x, r12.w
  mul_sat r12.x, r12.y, r12.x
  mul r12.x, r12.x, r12.x
  mul r12.x, r11.w, r12.x
  movc r10.w, r10.w, r12.x, r11.w
  lt r11.w, l(0.000000), r10.w
  if_nz r11.w
    and r11.w, r14.x, l(255)
    movc r11.w, r11.w, l(1), l(0)
    if_nz r11.w
      and r16.xyzw, r14.xxxx, l(1, 2, 4, 8)
      movc r16.xyzw, r16.xyzw, l(1.000000,1.000000,1.000000,1.000000), l(0,0,0,0)
      ushr r11.w, r14.x, l(4)
      ubfe r12.x, l(1), l(4), r14.x
      movc r17.x, r12.x, l(1.000000), l(0)
      and r12.xyw, r11.wwww, l(2, 4, 0, 8)
      movc r17.yzw, r12.xxyw, l(0,1.000000,1.000000,1.000000), l(0,0,0,0)
      dp4 r11.w, r17.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
      dp4 r12.x, r16.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
      dp4 r12.y, r0.zwww, r16.xyzw
      add r12.y, r12.y, l(-1.000000)
      mad r12.x, r12.x, r12.y, l(1.000000)
      mul r12.xy, r11.wwww, r12.xxxx
    else
      mov r12.xy, l(1.000000,1.000000,0,0)
    endif
    add r11.w, r12.y, r12.x
    lt r11.w, l(0.000000), r11.w
    if_nz r11.w
      f16tof32 r11.w, r12.z
      mul r12.y, r11.w, l(0.500000)
      mad r14.yzw, -r12.yyyy, r15.xxyz, r11.xxyz
      mad r11.xyz, r12.yyyy, r15.xyzx, r11.xyzx
      lt r11.w, l(0.000000), r11.w
      if_nz r11.w
        dp3 r11.w, r14.yzwy, r14.yzwy
        dp3 r12.y, r11.xyzx, r11.xyzx
        rsq r11.w, r11.w
        rsq r12.y, r12.y
        mul r11.w, r11.w, r12.y
        dp3 r11.x, r14.yzwy, r11.xyzx
        mul r11.x, r11.w, r11.x
        mad r11.x, r11.x, l(0.500000), r11.w
        add r11.x, r11.x, l(0.500000)
        div r11.x, r11.w, r11.x
      else
        dp3 r11.y, r14.yzwy, r14.yzwy
        add r11.y, r11.y, l(1.000000)
        rcp r11.x, r11.y
      endif
      movc r9.w, r9.w, r11.x, l(1.000000)
      mul r11.xyz, r9.wwww, r9.xyzx
      mul r12.yzw, r10.wwww, r13.xxyz
      mul r12.xyz, r12.xxxx, r12.yzwy
      mul r11.xyz, r11.xyzx, r12.xyzx
    else
      mov r11.xyz, l(0,0,0,0)
    endif
  else
    mov r11.xyz, l(0,0,0,0)
  endif
  ushr r9.w, r14.x, l(8)
  and r9.w, r9.w, cb2[16].w
  add r11.xyz, r10.xyzx, r11.xyzx
  movc r10.xyz, r9.wwww, r11.xyzx, r10.xyzx
  iadd r6.w, r6.w, l(1)
endloop
dp3 r0.x, r4.xyzx, r6.xyzx
add r0.z, r0.x, r0.x
mad r4.xyz, r0.zzzz, r6.xyzx, -r4.xyzx
mov_sat r0.x, r0.x
log r0.z, r0.y
mad r0.z, -r0.z, l(1.200000), l(1.000000)
add r0.w, cb1[163].z, l(-1.000000)
add r0.z, -r0.z, r0.w
itof r4.w, cb0[28].x
sample_l_indexable(texturecubearray)(float,float,float,float) r4.xyz, r4.xyzw, t9.xyzw, s2, r0.z
mul r4.xyz, r4.xyzx, cb0[31].xxxx
mul r4.xyz, r4.xyzx, cb1[146].xyzx
mad_sat r0.z, r0.y, cb1[165].x, cb1[165].y
mad r0.w, r0.z, l(-2.000000), l(3.000000)
mul r0.z, r0.z, r0.z
mul r0.z, r0.z, r0.w
min r0.w, cb1[165].z, l(0.000000)
add r0.w, r0.w, l(-1.000000)
mad r0.z, r0.z, r0.w, l(1.000000)
mul r4.xyz, r0.zzzz, r4.xyzx
mad r4.xyz, r8.xxxx, -r4.xyzx, r4.xyzx
mad r6.xyzw, r0.yyyy, l(-1.000000, -0.027500, -0.572000, 0.022000), l(1.000000, 0.042500, 1.040000, -0.040000)
mul r0.y, r6.x, r6.x
mul r0.x, r0.x, l(-9.280000)
exp r0.x, r0.x
min r0.x, r0.x, r0.y
mad r0.x, r0.x, r6.x, r6.y
mad r0.xy, r0.xxxx, l(-1.040000, 1.040000, 0.000000, 0.000000), r6.zwzz
mul r0.z, r7.y, l(50.000000)
mov_sat r0.z, r0.z
mul r0.y, r0.z, r0.y
mad r0.xyz, r7.xyzx, r0.xxxx, r0.yyyy
mul r0.xyz, r0.xyzx, r4.xyzx
mad r4.xyz, r7.xyzx, l(2.040400, 2.040400, 2.040400, 0.000000), l(-0.332400, -0.332400, -0.332400, 0.000000)
mad r4.xyz, r7.xyzx, l(-4.795100, -4.795100, -4.795100, 0.000000), r4.xyzx
mad r4.xyz, r7.xyzx, l(2.755200, 2.755200, 2.755200, 0.000000), r4.xyzx
add r4.xyz, r4.xyzx, l(1.332000, 1.332000, 1.332000, 0.000000)
max r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r0.xyz, r0.xyzx, r4.xyzx, r10.xyzx
lt r0.w, l(0.000000), cb4[91].w
if_nz r0.w
  mov r5.w, l(1.000000)
  dp4 r1.x, r5.xyzw, r1.xyzw
  dp4 r1.y, r5.xyzw, r2.xyzw
  dp4 r0.w, r5.xyzw, r3.xyzw
  div r1.xy, r1.xyxx, r0.wwww
  mad r1.xy, r1.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  mad r0.w, r0.w, cb1[176].x, cb1[176].y
  log r0.w, r0.w
  mul r0.w, r0.w, cb1[176].z
  mul r1.z, r0.w, cb1[175].z
  sample_l_indexable(texture3d)(float,float,float,float) r1.xyzw, r1.xyzx, t10.xyzw, s0, l(0.000000)
  mul r2.x, r1.w, v3.w
  mad r1.xyz, v3.xyzx, r1.wwww, r1.xyzx
else
  mov r1.xyz, v3.xyzx
  mov r2.x, v3.w
endif
mad r2.yzw, r7.xxyz, l(0.000000, 0.450000, 0.450000, 0.450000), cb1[126].xxyz
add r2.yzw, -r0.xxyz, r2.yyzw
mad r0.xyz, cb1[134].zzzz, r2.yzwy, r0.xyzx
max r3.xyz, cb6[2].xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r0.w, l(0.000000), cb1[130].x
if_nz r0.w
  add r2.yzw, r5.xxyz, -cb2[5].xxyz
  add r4.xyz, cb2[11].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  lt r2.yzw, r4.xxyz, |r2.yyzw|
  or r0.w, r2.z, r2.y
  or r0.w, r2.w, r0.w
  dp3 r1.w, r5.xyzx, l(0.577000, 0.577000, 0.577000, 0.000000)
  mul r1.w, r1.w, l(0.002000)
  frc r1.w, r1.w
  lt r1.w, l(0.500000), r1.w
  movc r4.yzw, r1.wwww, l(0,0,1.000000,1.000000), l(0,1.000000,1.000000,0)
  mov r4.x, l(1.000000)
  mov r3.w, l(0)
  movc r3.xyzw, r0.wwww, r4.yzwx, r3.xyzw
  mov o0.w, r3.w
else
  mov o0.w, l(0)
endif
add r0.xyz, r0.xyzx, r3.xyzx
mad o0.xyz, r0.xyzx, r2.xxxx, r1.xyzx
ret
// Approximately 0 instruction slots used
