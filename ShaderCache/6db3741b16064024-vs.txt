//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Wed Oct 23 22:09:09 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// ATTRIBUTE                0   xyzw        0     NONE   float   xyz
// ATTRIBUTE                1   xyzw        1     NONE   float   xyz
// ATTRIBUTE                2   xyzw        2     NONE   float   xyzw
// ATTRIBUTE                3   xyzw        3     NONE   float
// ATTRIBUTE                4   xy          4     NONE   float   xy
// SV_VertexID              0   x           5   VERTID    uint   x
// SV_InstanceID            0   x           6   INSTID    uint
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// SV_ClipDistance          1   x           1  CLIPDST   float   x
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -1.000000, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 1.000000} }
dcl_constantbuffer cb0[4], immediateIndexed
dcl_constantbuffer cb1[166], immediateIndexed
dcl_constantbuffer cb2[4], immediateIndexed
dcl_constantbuffer cb3[164], immediateIndexed
dcl_constantbuffer cb4[10], immediateIndexed
dcl_resource_buffer (float,float,float,float) t0
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v2.xyzw
dcl_input v4.xy
dcl_input_sgv v5.x, vertex_id
dcl_output_siv o0.xyzw, position
dcl_output_siv o1.x, clip_distance
dcl_temps 14
if_nz cb0[3].z
  mov r0.x, cb1[165].w
else
  movc r0.y, cb0[0].x, l(1), l(0)
  and r0.x, r0.y, cb0[3].y
endif
if_z r0.x
  mov r1.x, cb1[0].x
  mov r1.y, cb1[1].x
  mov r1.z, cb1[2].x
  mov r1.w, cb1[3].x
  mov r2.x, cb1[0].y
  mov r2.y, cb1[1].y
  mov r2.z, cb1[2].y
  mov r2.w, cb1[3].y
  mov r3.x, cb1[0].z
  mov r3.y, cb1[1].z
  mov r3.z, cb1[2].z
  mov r3.w, cb1[3].z
  mov r4.x, cb1[0].w
  mov r4.y, cb1[1].w
  mov r4.z, cb1[2].w
  mov r4.w, cb1[3].w
  mov r0.yzw, cb1[62].xxyz
  mov r5.x, cb1[163].y
  mov r5.yzw, cb1[53].xxyz
  mov r6.xyz, cb1[54].xyzx
  mov r7.xyz, cb1[55].xyzx
  mov r8.xyz, cb1[56].xyzx
  mov r9.xyz, cb1[59].xyzx
else
  mov r1.x, cb3[0].x
  mov r1.y, cb3[1].x
  mov r1.z, cb3[2].x
  mov r1.w, cb3[3].x
  mov r2.x, cb3[0].y
  mov r2.y, cb3[1].y
  mov r2.z, cb3[2].y
  mov r2.w, cb3[3].y
  mov r3.x, cb3[0].z
  mov r3.y, cb3[1].z
  mov r3.z, cb3[2].z
  mov r3.w, cb3[3].z
  mov r4.x, cb3[0].w
  mov r4.y, cb3[1].w
  mov r4.z, cb3[2].w
  mov r4.w, cb3[3].w
  mov r0.yzw, cb3[62].xxyz
  mov r5.x, cb3[163].y
  mov r5.yzw, cb3[53].xxyz
  mov r6.xyz, cb3[54].xyzx
  mov r7.xyz, cb3[55].xyzx
  mov r8.xyz, cb3[56].xyzx
  mov r9.xyz, cb3[59].xyzx
endif
mul r10.xyz, v0.yyyy, cb2[1].xyzx
mad r10.xyz, v0.xxxx, cb2[0].xyzx, r10.xyzx
mad r10.xyz, v0.zzzz, cb2[2].xyzx, r10.xyzx
add r10.xyz, r10.xyzx, cb2[3].xyzx
mul r11.xyz, v1.yyyy, cb2[1].xyzx
mad r11.xyz, v1.xxxx, cb2[0].xyzx, r11.xyzx
mad r11.xyz, v1.zzzz, cb2[2].xyzx, r11.xyzx
add r11.xyz, r11.xyzx, cb2[3].xyzx
add r8.xyz, -r6.xyzx, r8.xyzx
mad r6.xyz, cb4[6].wwww, r8.xyzx, r6.xyzx
add r7.xyz, -r5.yzwy, r7.xyzx
mad r5.yzw, cb4[6].wwww, r7.xxyz, r5.yyzw
add r7.xyz, -r6.xyzx, cb4[0].xyzx
mad r6.xyz, cb4[0].wwww, r7.xyzx, r6.xyzx
add r7.xyz, r5.yzwy, cb4[1].xyzx
mad r5.yzw, cb4[1].wwww, r7.xxyz, -r5.yyzw
add r7.xyz, r9.zxyz, -r10.zxyz
dp3 r6.w, r7.xyzx, r7.xyzx
max r7.w, r6.w, l(0.010000)
rsq r7.w, r7.w
mul r7.xyz, r7.wwww, r7.xyzx
add r8.xyz, r10.xyzx, -r11.xyzx
dp3 r7.w, r8.xyzx, r8.xyzx
max r7.w, r7.w, l(0.010000)
rsq r7.w, r7.w
mul r8.xyz, r7.wwww, r8.xyzx
mul r9.xyz, r7.xyzx, r8.yzxy
mad r9.xyz, r7.zxyz, r8.zxyz, -r9.xyzx
dp3 r7.w, r9.xyzx, r9.xyzx
max r7.w, r7.w, l(0.010000)
rsq r7.w, r7.w
mul r9.xyz, r7.wwww, r9.xyzx
mul r11.xyz, r7.zxyz, cb4[0].zxyz
mad r11.xyz, cb4[0].yzxy, r7.xyzx, -r11.xyzx
dp3 r7.w, r11.xyzx, r11.xyzx
max r7.w, r7.w, l(0.010000)
rsq r7.w, r7.w
mul r11.xyz, r7.wwww, r11.xyzx
mul r12.xyz, r7.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
mad r12.xyz, r7.zxyz, l(1.000000, 0.000000, 0.000000, 0.000000), -r12.xyzx
dp2 r7.w, r12.xyxx, r12.xyxx
max r7.w, r7.w, l(0.010000)
rsq r7.w, r7.w
mul r12.xyz, r7.wwww, r12.xyzx
mul r13.xyz, r7.xyzx, r12.yzxy
mad r7.xyz, r7.zxyz, r12.zxyz, -r13.xyzx
lt r7.w, l(0.000000), cb4[6].x
if_nz r7.w
  mad_sat r6.w, r6.w, cb4[6].y, -cb4[6].z
  add r7.w, -r6.w, l(1.000000)
else
  mov r7.w, cb4[2].x
  mov r6.w, cb4[2].w
endif
mul r9.xyz, r9.xyzx, cb4[2].yyyy
mad r6.xyz, r6.xyzx, r7.wwww, r9.xyzx
mad r6.xyz, cb4[0].xyzx, cb4[2].zzzz, r6.xyzx
mad r6.xyz, r12.xyzx, r6.wwww, r6.xyzx
mul r8.xyz, -r8.xyzx, cb4[2].yyyy
mad r5.yzw, r5.yyzw, r7.wwww, r8.xxyz
mad r5.yzw, -r11.xxyz, cb4[2].zzzz, r5.yyzw
mad r5.yzw, r7.xxyz, r6.wwww, r5.yyzw
dp3 r6.w, r6.xyzx, r6.xyzx
rsq r6.w, r6.w
mul r6.xyz, r6.wwww, r6.xyzx
dp3 r6.w, r5.yzwy, r5.yzwy
rsq r6.w, r6.w
mul r5.yzw, r5.yyzw, r6.wwww
mad r6.w, v2.z, cb4[8].x, cb4[8].y
sincos r7.x, r8.x, r6.w
mul r7.yzw, r6.xxyz, r8.xxxx
mad r7.yzw, r7.xxxx, r5.yyzw, r7.yyzw
mul r6.xyz, r6.xyzx, r7.xxxx
mad r5.yzw, r8.xxxx, r5.yyzw, -r6.xxyz
if_nz cb0[3].x
  lt r6.xy, l(0.000000, 0.000000, 0.000000, 0.000000), v2.xyxx
  lt r6.zw, v2.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
  iadd r6.xy, -r6.xyxx, r6.zwzz
  itof r6.xy, r6.xyxx
  utof r6.z, v5.x
  utof r6.w, cb0[3].x
  div r6.z, r6.z, r6.w
  ge r7.x, r6.z, -r6.z
  frc r6.z, r6.z
  movc r6.z, r7.x, r6.z, -r6.z
  mul r6.z, r6.w, r6.z
  mul r6.w, cb4[5].y, cb4[5].x
  div r7.x, v2.w, r6.w
  ge r8.x, r7.x, -r7.x
  frc r7.x, |r7.x|
  movc r7.x, r8.x, r7.x, -r7.x
  mul r6.w, r6.w, r7.x
  ftou r6.zw, r6.zzzw
  mul r7.x, r6.y, r6.x
  lt r7.x, r7.x, l(0.000000)
  iadd r8.x, cb0[3].x, l(-1)
  iadd r8.x, -r6.z, r8.x
  movc r6.z, r7.x, r8.x, r6.z
  imad r6.z, r6.w, cb0[3].x, r6.z
  ld_indexable(buffer)(float,float,float,float) r6.zw, r6.zzzz, t0.zwxy
  lt r6.xy, r6.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
  add r8.xy, -r6.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
  movc r6.xy, r6.xyxx, r8.xyxx, r6.zwzz
else
  mov r6.xy, v4.xyxx
endif
add r0.yzw, r0.yyzw, r10.xxyz
add r6.xy, r6.xyxx, cb4[9].xyxx
mul r6.xy, r6.xyxx, |v2.xyxx|
mad r0.yzw, r6.xxxx, r7.yyzw, r0.yyzw
mad r6.xyz, r6.yyyy, r5.yzwy, r0.yzwy
mov r6.w, l(1.000000)
dp4 r1.x, r6.xyzw, r1.xyzw
dp4 r1.y, r6.xyzw, r2.xyzw
dp4 r1.z, r6.xyzw, r3.xyzw
dp4 r1.w, r6.xyzw, r4.xyzw
or r0.y, cb0[0].x, cb0[3].z
if_nz r0.y
  mov r2.x, icb[r0.x + 0].x
  mov r2.y, l(1.000000)
  dp2 o1.x, r1.xwxx, r2.xyxx
  mul r0.y, r5.x, l(0.500000)
  mul r0.x, r1.w, icb[r0.x + 0].x
  mad r0.z, -r5.x, l(0.500000), l(1.000000)
  mul r0.x, r0.z, r0.x
  mad r1.x, r1.x, r0.y, r0.x
else
  mov o1.x, l(0)
endif
mov o0.xyzw, r1.xyzw
ret
// Approximately 0 instruction slots used
