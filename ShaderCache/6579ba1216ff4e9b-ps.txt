//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Wed Oct 23 22:41:07 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyz
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float    y
// PACKED_EYE_INDEX         0   x           3     NONE    uint   x
// TEXCOORD                 7   xyzw        4     NONE   float      w
// SV_Position              0   xyzw        5      POS   float   xyzw
// SV_IsFrontFace           0   x           6    FFACE    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[177], immediateIndexed
dcl_constantbuffer cb1[12], immediateIndexed
dcl_constantbuffer cb2[132], immediateIndexed
dcl_constantbuffer cb3[92], immediateIndexed
dcl_constantbuffer cb4[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture3d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear centroid v0.xyz
dcl_input_ps linear centroid v1.xyzw
dcl_input_ps linear v2.y
dcl_input_ps constant v3.x
dcl_input_ps linear v4.w
dcl_input_ps_siv linear noperspective v5.xyzw, position
dcl_input_ps_sgv v6.x, is_front_face
dcl_output o0.xyzw
dcl_temps 14
and r0.x, v3.x, l(1)
if_z r0.x
  mov r0.x, cb0[4].x
  mov r0.y, cb0[5].x
  mov r0.z, cb0[6].x
  mov r0.w, cb0[7].x
  mov r1.x, cb0[4].y
  mov r1.y, cb0[5].y
  mov r1.z, cb0[6].y
  mov r1.w, cb0[7].y
  mov r2.x, cb0[4].w
  mov r2.y, cb0[5].w
  mov r2.z, cb0[6].w
  mov r2.w, cb0[7].w
  mov r3.x, cb0[40].x
  mov r3.y, cb0[41].x
  mov r3.z, cb0[42].x
  mov r3.w, cb0[43].x
  mov r4.x, cb0[40].y
  mov r4.y, cb0[41].y
  mov r4.z, cb0[42].y
  mov r4.w, cb0[43].y
  mov r5.x, cb0[40].z
  mov r5.y, cb0[41].z
  mov r5.z, cb0[42].z
  mov r5.w, cb0[43].z
  mov r6.x, cb0[40].w
  mov r6.y, cb0[41].w
  mov r6.z, cb0[42].w
  mov r6.w, cb0[43].w
  mov r7.xy, cb0[122].zwzz
  mov r7.z, cb0[128].w
  mov r7.w, cb0[131].w
  mov r8.xyz, cb0[62].xyzx
  mov r9.xyz, cb0[128].xyzx
  mov r10.xyzw, cb0[58].xyzw
  mov r11.xy, cb0[121].xyxx
else
  mov r0.x, cb2[4].x
  mov r0.y, cb2[5].x
  mov r0.z, cb2[6].x
  mov r0.w, cb2[7].x
  mov r1.x, cb2[4].y
  mov r1.y, cb2[5].y
  mov r1.z, cb2[6].y
  mov r1.w, cb2[7].y
  mov r2.x, cb2[4].w
  mov r2.y, cb2[5].w
  mov r2.z, cb2[6].w
  mov r2.w, cb2[7].w
  mov r3.x, cb2[40].x
  mov r3.y, cb2[41].x
  mov r3.z, cb2[42].x
  mov r3.w, cb2[43].x
  mov r4.x, cb2[40].y
  mov r4.y, cb2[41].y
  mov r4.z, cb2[42].y
  mov r4.w, cb2[43].y
  mov r5.x, cb2[40].z
  mov r5.y, cb2[41].z
  mov r5.z, cb2[42].z
  mov r5.w, cb2[43].z
  mov r6.x, cb2[40].w
  mov r6.y, cb2[41].w
  mov r6.z, cb2[42].w
  mov r6.w, cb2[43].w
  mov r7.xy, cb2[122].zwzz
  mov r7.z, cb2[128].w
  mov r7.w, cb2[131].w
  mov r8.xyz, cb2[62].xyzx
  mov r9.xyz, cb2[128].xyzx
  mov r10.xyzw, cb2[58].xyzw
  mov r11.xy, cb2[121].xyxx
endif
mul r12.xyz, v0.yzxy, v1.zxyz
mad r12.xyz, v1.yzxy, v0.zxyz, -r12.xyzx
mul r12.xyz, r12.xyzx, v1.wwww
add r11.xy, -r11.xyxx, v5.xyxx
mad r7.xy, r11.xyxx, r7.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
mul r11.xy, r7.xyxx, v5.wwww
mov r11.z, v5.w
mul r11.xyw, r11.xyxz, l(2.000000, -2.000000, 0.000000, 1.000000)
mov r13.xyz, v5.xyzx
mov r13.w, l(1.000000)
dp4 r3.x, r13.xyzw, r3.xyzw
dp4 r3.y, r13.xyzw, r4.xyzw
dp4 r3.z, r13.xyzw, r5.xyzw
dp4 r3.w, r13.xyzw, r6.xyzw
div r3.xyz, r3.xyzx, r3.wwww
add r4.xyz, -r8.xyzx, r3.xyzx
dp3 r3.w, -r3.xyzx, -r3.xyzx
rsq r3.w, r3.w
mul r3.xyz, r3.wwww, -r3.xyzx
mul r3.w, r7.w, cb1[4].w
movc r5.x, v6.x, l(1.000000), l(-1.000000)
mul r3.w, r3.w, r5.x
mad r5.xyz, r7.zzzz, l(0.000000, 0.000000, 1.000000, 0.000000), r9.xyzx
dp3 r5.w, r5.xyzx, r5.xyzx
rsq r5.w, r5.w
mul r5.xyz, r5.wwww, r5.xyzx
mul r6.xyz, r12.xyzx, r5.yyyy
mad r5.xyw, r5.xxxx, v0.xyxz, r6.xyxz
mad r5.xyz, r5.zzzz, v1.xyzx, r5.xywx
dp3 r5.w, r5.xyzx, r5.xyzx
rsq r5.w, r5.w
mul r5.xyz, r5.wwww, r5.xyzx
mul r5.xyz, r3.wwww, r5.xyzx
add r6.xyz, cb4[3].xyzx, cb4[4].xyzx
mul_sat r3.w, r11.w, cb4[5].z
add r5.w, -v2.y, l(1.000000)
dp3 r3.x, r5.xyzx, r3.xyzx
max r3.x, r3.x, l(0.000000)
add r3.x, -r3.x, l(1.000000)
log r3.x, |r3.x|
mul r3.x, r3.x, cb4[5].w
exp r3.x, r3.x
mad r3.x, r3.x, cb4[6].y, cb4[6].x
add r3.x, -r3.x, l(1.000000)
max r3.x, r3.x, l(0.000000)
log r3.x, r3.x
mul r3.x, r3.x, cb4[6].z
exp r3.x, r3.x
mul r3.x, r3.x, cb4[6].w
mul r3.x, r3.x, r5.w
mul r3.x, r3.x, r3.w
div r3.yz, r11.xxyx, r11.wwww
mad r3.yz, r3.yyzy, r10.xxyx, r10.wwzw
sample_l_indexable(texture2d)(float,float,float,float) r3.y, r3.yzyy, t1.yxzw, s1, l(0.000000)
mad r3.z, r3.y, cb0[57].x, cb0[57].y
mad r3.y, r3.y, cb0[57].z, -cb0[57].w
div r3.y, l(1.000000, 1.000000, 1.000000, 1.000000), r3.y
add r3.y, r3.y, r3.z
mad r3.y, -r11.z, l(1.000000), r3.y
div_sat r3.y, r3.y, cb4[7].y
mul_sat r3.w, r3.y, r3.x
lt r5.x, l(0.000000), cb3[91].w
if_nz r5.x
  mov r4.w, l(1.000000)
  dp4 r0.x, r4.xyzw, r0.xyzw
  dp4 r0.y, r4.xyzw, r1.xyzw
  dp4 r0.z, r4.xyzw, r2.xyzw
  div r0.xy, r0.xyxx, r0.zzzz
  mad r1.xy, r0.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  mad r0.x, r0.z, cb0[176].x, cb0[176].y
  log r0.x, r0.x
  mul r0.x, r0.x, cb0[176].z
  mul r1.z, r0.x, cb0[175].z
  sample_l_indexable(texture3d)(float,float,float,float) r0.x, r1.xyzx, t0.wxyz, s0, l(0.000000)
  mul r0.x, r0.x, v4.w
else
  mov r0.x, v4.w
endif
max r3.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r0.y, l(0.000000), cb0[130].x
if_nz r0.y
  add r0.yzw, r4.xxyz, -cb1[5].xxyz
  add r1.xyz, cb1[11].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  lt r0.yzw, r1.xxyz, |r0.yyzw|
  or r0.y, r0.z, r0.y
  or r0.y, r0.w, r0.y
  dp3 r0.z, r4.xyzx, l(0.577000, 0.577000, 0.577000, 0.000000)
  mul r0.z, r0.z, l(0.002000)
  frc r0.z, r0.z
  lt r0.z, l(0.500000), r0.z
  movc r1.yzw, r0.zzzz, l(0,0,1.000000,1.000000), l(0,1.000000,1.000000,0)
  mov r1.x, l(1.000000)
  movc r3.xyzw, r0.yyyy, r1.yzwx, r3.xyzw
endif
mul r0.xyz, r0.xxxx, r3.xyzx
mul o0.xyz, r3.wwww, r0.xyzx
mov o0.w, l(0)
ret
// Approximately 0 instruction slots used
