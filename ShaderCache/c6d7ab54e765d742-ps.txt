//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Oct 31 15:12:21 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// PARTICLE_SUBUVS          0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 4   xyz         1     NONE   float   x
// TEXCOORD                 5   xyzw        2     NONE   float   xyzw
// PARTICLE_LIGHTING_OFFSET     0   xyz         3     NONE   float
// TANGENTX                 0   xyzw        4     NONE   float
// TANGENTZ                 0   xyzw        5     NONE   float
// PACKED_EYE_INDEX         0   x           6     NONE    uint   x
// TEXCOORD                 7   xyzw        7     NONE   float   xyzw
// SV_Position              0   xyzw        8      POS   float   xyzw
// SV_IsFrontFace           0   x           9    FFACE    uint
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer cb0[182], immediateIndexed
dcl_constantbuffer cb1[17], immediateIndexed
dcl_constantbuffer cb2[122], immediateIndexed
dcl_constantbuffer cb3[92], dynamicIndexed
dcl_constantbuffer cb4[6], immediateIndexed
dcl_constantbuffer cb5[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture3d (uint,uint,uint,uint) t0
dcl_resource_texture3d (float,float,float,float) t1
dcl_resource_texture3d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_buffer (float,float,float,float) t4
dcl_resource_buffer (uint,uint,uint,uint) t5
dcl_resource_buffer (uint,uint,uint,uint) t6
dcl_resource_buffer (float,float,float,float) t7
dcl_resource_buffer (uint,uint,uint,uint) t8
dcl_resource_buffer (uint,uint,uint,uint) t9
dcl_resource_texture3d (float,float,float,float) t10
dcl_resource_texture2d (float,float,float,float) t11
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.x
dcl_input_ps linear v2.xyzw
dcl_input_ps constant v6.x
dcl_input_ps linear v7.xyzw
dcl_input_ps_siv linear noperspective v8.xyzw, position
dcl_output o0.xyzw
dcl_temps 20
and r0.x, v6.x, l(1)
if_z r0.x
  mov r1.x, cb0[4].x
  mov r1.y, cb0[5].x
  mov r1.z, cb0[6].x
  mov r1.w, cb0[7].x
  mov r2.x, cb0[4].y
  mov r2.y, cb0[5].y
  mov r2.z, cb0[6].y
  mov r2.w, cb0[7].y
  mov r3.x, cb0[4].w
  mov r3.y, cb0[5].w
  mov r3.z, cb0[6].w
  mov r3.w, cb0[7].w
  mov r4.x, cb0[40].x
  mov r4.y, cb0[41].x
  mov r4.z, cb0[42].x
  mov r4.w, cb0[43].x
  mov r5.x, cb0[40].y
  mov r5.y, cb0[41].y
  mov r5.z, cb0[42].y
  mov r5.w, cb0[43].y
  mov r6.x, cb0[40].z
  mov r6.y, cb0[41].z
  mov r6.z, cb0[42].z
  mov r6.w, cb0[43].z
  mov r7.x, cb0[40].w
  mov r7.y, cb0[41].w
  mov r7.z, cb0[42].w
  mov r7.w, cb0[43].w
  mov r0.yz, cb0[121].xxyx
  mov r8.xyz, cb0[62].xyzx
else
  mov r1.x, cb2[4].x
  mov r1.y, cb2[5].x
  mov r1.z, cb2[6].x
  mov r1.w, cb2[7].x
  mov r2.x, cb2[4].y
  mov r2.y, cb2[5].y
  mov r2.z, cb2[6].y
  mov r2.w, cb2[7].y
  mov r3.x, cb2[4].w
  mov r3.y, cb2[5].w
  mov r3.z, cb2[6].w
  mov r3.w, cb2[7].w
  mov r4.x, cb2[40].x
  mov r4.y, cb2[41].x
  mov r4.z, cb2[42].x
  mov r4.w, cb2[43].x
  mov r5.x, cb2[40].y
  mov r5.y, cb2[41].y
  mov r5.z, cb2[42].y
  mov r5.w, cb2[43].y
  mov r6.x, cb2[40].z
  mov r6.y, cb2[41].z
  mov r6.z, cb2[42].z
  mov r6.w, cb2[43].z
  mov r7.x, cb2[40].w
  mov r7.y, cb2[41].w
  mov r7.z, cb2[42].w
  mov r7.w, cb2[43].w
  mov r0.yz, cb2[121].xxyx
  mov r8.xyz, cb2[62].xyzx
endif
mov r9.xyz, v8.xyzx
mov r9.w, l(1.000000)
dp4 r4.x, r9.xyzw, r4.xyzw
dp4 r4.y, r9.xyzw, r5.xyzw
dp4 r4.z, r9.xyzw, r6.xyzw
dp4 r0.w, r9.xyzw, r7.xyzw
div r4.xyz, r4.xyzx, r0.wwww
add r4.xyz, -r8.xyzx, r4.xyzx
sample_indexable(texture2d)(float,float,float,float) r0.w, v0.xyxx, t11.yzwx, s2
sample_indexable(texture2d)(float,float,float,float) r5.x, v0.zwzz, t11.xyzw, s2
add r5.x, -r0.w, r5.x
mad r0.w, v1.x, r5.x, r0.w
mul_sat r5.w, r0.w, v2.w
mov_sat r6.xyz, v2.xyzx
mad r7.xyz, r4.xyzx, cb0[178].xyzx, cb0[179].xyzx
max r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
min r7.xyz, r7.xyzx, l(0.990000, 0.990000, 0.990000, 0.000000)
mul r7.xyz, r7.xyzx, cb0[180].xyzx
ftoi r8.xyz, r7.xyzx
mov r8.w, l(0)
ld_indexable(texture3d)(uint,uint,uint,uint) r8.xyzw, r8.xyzw, t0.xyzw
utof r8.xyzw, r8.xyzw
add r0.w, cb0[180].w, l(1.000000)
div r7.xyz, r7.xyzx, r8.wwww
frc r7.xyz, r7.xyzx
mul r7.xyz, r7.xyzx, cb0[180].wwww
mad r7.xyz, r8.xyzx, r0.wwww, r7.xyzx
add r7.xyz, r7.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
mul r7.xyz, r7.xyzx, cb0[181].xyzx
lt r0.w, l(0.000000), cb1[12].z
if_nz r0.w
  sample_l_indexable(texture3d)(float,float,float,float) r8.x, r7.xyzx, t2.xyzw, s0, l(0.000000)
else
  lt r0.w, l(0.000000), cb1[10].w
  movc r8.x, r0.w, cb4[5].x, l(1.000000)
endif
mad r9.xyz, r6.xyzx, cb0[126].wwww, cb0[126].xyzx
mad r10.xyz, cb0[127].wwww, l(0.040000, 0.040000, 0.040000, 0.000000), cb0[127].xyzx
mad r9.xyz, r10.xyzx, l(0.450000, 0.450000, 0.450000, 0.000000), r9.xyzx
sample_l_indexable(texture3d)(float,float,float,float) r7.xyz, r7.xyzx, t1.xyzw, s0, l(0.000000)
mul r7.xyz, r7.xyzx, l(0.886227548, 0.886227548, 0.886227548, 0.000000)
max r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mul r7.xyz, r7.xyzx, cb0[146].xyzx
mul r7.xyz, r9.xyzx, r7.xyzx
mul r7.xyz, r7.xyzx, l(0.318309873, 0.318309873, 0.318309873, 0.000000)
mad r10.xyz, r6.xyzx, l(2.040400, 2.040400, 2.040400, 0.000000), l(-0.332400, -0.332400, -0.332400, 0.000000)
mad r10.xyz, r6.xyzx, l(-4.795100, -4.795100, -4.795100, 0.000000), r10.xyzx
mad r6.xyz, r6.xyzx, l(2.755200, 2.755200, 2.755200, 0.000000), r10.xyzx
add r6.xyz, r6.xyzx, l(1.332000, 1.332000, 1.332000, 0.000000)
max r6.xyz, r6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
add r0.yz, -r0.yyzy, v8.xxyx
if_z r0.x
  mov r0.w, cb3[3].x
  mov r6.w, cb3[3].y
  mov r7.w, cb3[3].z
  mov r8.z, cb3[1].z
  mov r10.xy, cb3[1].xyxx
  mov r8.w, cb3[2].x
else
  mov r0.w, cb3[43].x
  mov r6.w, cb3[43].y
  mov r7.w, cb3[43].z
  mov r8.z, cb3[41].z
  mov r10.xy, cb3[41].xyxx
  mov r8.w, cb3[42].x
endif
mad r0.w, v8.w, r0.w, r6.w
log r0.w, r0.w
mul r0.w, r7.w, r0.w
max r0.w, r0.w, l(0.000000)
ftou r0.yzw, r0.yyzw
iadd r6.w, r8.z, l(-1)
umin r0.w, r0.w, r6.w
ushr r0.yz, r0.yyzy, r8.wwww
imad r0.z, r0.w, r10.y, r0.z
imad r0.y, r0.z, r10.x, r0.y
if_z r0.x
  mov r0.z, cb3[0].z
  mov r0.w, cb3[6].x
  mov r6.w, cb3[6].z
  mov r7.w, cb3[6].w
  mov r10.xyz, cb3[5].xyzx
else
  mov r0.z, cb3[40].z
  mov r0.w, cb3[46].x
  mov r6.w, cb3[46].z
  mov r7.w, cb3[46].w
  mov r10.xyz, cb3[45].xyzx
endif
if_nz r0.z
  and r11.xyzw, r0.wwww, l(255, 2, 4, 8)
  movc r11.xyzw, r11.xyzw, l(1,1.000000,1.000000,1.000000), l(0,0,0,0)
  if_nz cb3[7].x
    mov r0.z, cb3[7].x
    mov r8.z, l(0)
    loop
      uge r8.w, r8.z, cb3[7].x
      breakc_nz r8.w
      dp4 r8.w, cb3[8].xyzw, icb[r8.z + 0].xyzw
      lt r8.w, v8.w, r8.w
      if_nz r8.w
        mov r0.z, r8.z
        break
      endif
      iadd r8.z, r8.z, l(1)
    endloop
    ult r8.z, r0.z, cb3[7].x
    if_nz r8.z
      ishl r8.z, r0.z, l(2)
      mul r12.xyzw, r4.yyyy, cb3[r8.z + 10].xyzw
      mad r12.xyzw, r4.xxxx, cb3[r8.z + 9].xyzw, r12.xyzw
      mad r12.xyzw, r4.zzzz, cb3[r8.z + 11].xyzw, r12.xyzw
      add r12.xyzw, r12.xyzw, cb3[r8.z + 12].xyzw
      div r13.xyzw, r12.xyxy, r12.wwww
      ge r8.zw, r13.zzzw, cb3[r0.z + 25].xxxy
      ge r12.xy, cb3[r0.z + 25].zwzz, r13.zwzz
      and r8.zw, r8.zzzw, r12.xxxy
      and r0.z, r8.w, r8.z
      if_nz r0.z
        mad r13.xyzw, r13.xyzw, cb3[29].xyxy, l(-0.500000, -0.500000, -0.500000, -0.500000)
        frc r8.zw, r13.zzzw
        round_ni r13.xyzw, r13.xyzw
        add r14.xyzw, r13.zwzw, l(0.500000, 1.500000, 0.500000, 0.500000)
        mul r14.xyzw, r14.xyzw, cb3[29].zwzw
        sample_l_indexable(texture2d)(float,float,float,float) r15.x, r14.xyxx, t3.xyzw, s1, l(0.000000)
        add r13.xyzw, r13.xyzw, l(1.500000, 1.500000, 1.500000, 0.500000)
        mul r13.xyzw, r13.xyzw, cb3[29].zwzw
        sample_l_indexable(texture2d)(float,float,float,float) r15.y, r13.xyxx, t3.yxzw, s1, l(0.000000)
        sample_l_indexable(texture2d)(float,float,float,float) r15.z, r13.zwzz, t3.yzxw, s1, l(0.000000)
        sample_l_indexable(texture2d)(float,float,float,float) r15.w, r14.zwzz, t3.yzwx, s1, l(0.000000)
        add r12.xyzw, -r12.zzzz, r15.xyzw
        mad_sat r12.xyzw, r12.xyzw, l(4000.000000, 4000.000000, 4000.000000, 4000.000000), l(1.000000, 1.000000, 1.000000, 1.000000)
        add r12.yz, -r12.wwxw, r12.zzyz
        mad r12.xy, r8.zzzz, r12.yzyy, r12.wxww
        add r0.z, -r12.x, r12.y
        mad r0.z, r8.w, r0.z, r12.x
      else
        mov r0.z, l(1.000000)
      endif
    else
      mov r0.z, l(1.000000)
    endif
  else
    mov r0.z, l(1.000000)
  endif
  if_nz r11.x
    mov r11.x, l(1.000000)
    dp4 r8.z, l(1.000000, 1.000000, 1.000000, 1.000000), r11.xyzw
    add r8.w, r8.z, l(-1.000000)
    mad r8.z, r8.z, r8.w, l(1.000000)
    mad_sat r6.w, v8.w, r6.w, r7.w
    mul r6.w, r6.w, r6.w
    add r7.w, -r0.z, r8.z
    mad r11.x, r6.w, r7.w, r0.z
    min r11.y, r11.x, l(1.000000)
  else
    mov r11.xy, l(1.000000,1.000000,0,0)
  endif
  add r0.z, r11.y, r11.x
  lt r0.z, l(0.000000), r0.z
  if_nz r0.z
    mul r11.yzw, r9.xxyz, l(0.000000, 0.318309873, 0.318309873, 0.318309873)
    mul r10.xyz, r10.xyzx, r11.xxxx
    mul r10.xyz, r10.xyzx, r11.yzwy
  else
    mov r10.xyz, l(0,0,0,0)
  endif
  ushr r0.z, r0.w, l(8)
  and r0.z, r0.z, cb1[16].w
  movc r10.xyz, r0.zzzz, r10.xyzx, l(0,0,0,0)
  mov r8.x, l(1.000000)
else
  mov r10.xyz, l(0,0,0,0)
endif
if_z r0.x
  ishl r0.z, r0.y, l(1)
  ld_indexable(buffer)(uint,uint,uint,uint) r0.z, r0.zzzz, t5.yzxw
  umin r0.z, r0.z, cb3[0].x
  bfi r0.w, l(31), l(1), r0.y, l(1)
  ld_indexable(buffer)(uint,uint,uint,uint) r0.w, r0.wwww, t5.yzwx
else
  ishl r6.w, r0.y, l(1)
  ld_indexable(buffer)(uint,uint,uint,uint) r6.w, r6.wwww, t8.yzwx
  umin r0.z, r6.w, cb3[40].x
  bfi r0.y, l(31), l(1), r0.y, l(1)
  ld_indexable(buffer)(uint,uint,uint,uint) r0.w, r0.yyyy, t8.yzwx
endif
movc r0.y, r0.x, cb3[40].x, cb3[0].x
umin r0.y, r0.y, r0.z
mul r11.xyz, r9.xyzx, l(0.318309873, 0.318309873, 0.318309873, 0.000000)
mov r8.y, l(1.000000)
mov r12.xyz, r10.xyzx
mov r0.z, l(0)
loop
  uge r6.w, r0.z, r0.y
  breakc_nz r6.w
  iadd r6.w, r0.z, r0.w
  if_z r0.x
    ld_indexable(buffer)(uint,uint,uint,uint) r7.w, r6.wwww, t6.yzwx
    imul null, r8.z, r7.w, l(5)
    ld_indexable(buffer)(float,float,float,float) r13.xyzw, r8.zzzz, t4.xyzw
    imad r14.xyzw, r7.wwww, l(5, 5, 5, 5), l(1, 2, 3, 4)
    ld_indexable(buffer)(float,float,float,float) r15.xyzw, r14.xxxx, t4.xyzw
    ld_indexable(buffer)(float,float,float,float) r16.xyzw, r14.yyyy, t4.wxyz
    ld_indexable(buffer)(float,float,float,float) r14.xyz, r14.zzzz, t4.xywz
    ld_indexable(buffer)(float,float,float,float) r17.xyz, r14.wwww, t4.xyzw
  else
    ld_indexable(buffer)(uint,uint,uint,uint) r6.w, r6.wwww, t9.yzwx
    imul null, r7.w, r6.w, l(5)
    ld_indexable(buffer)(float,float,float,float) r13.xyzw, r7.wwww, t7.xyzw
    imad r18.xyzw, r6.wwww, l(5, 5, 5, 5), l(1, 2, 3, 4)
    ld_indexable(buffer)(float,float,float,float) r15.xyzw, r18.xxxx, t7.xyzw
    ld_indexable(buffer)(float,float,float,float) r16.xyzw, r18.yyyy, t7.wxyz
    ld_indexable(buffer)(float,float,float,float) r14.xyz, r18.zzzz, t7.xywz
    ld_indexable(buffer)(float,float,float,float) r17.xyz, r18.wwww, t7.xyzw
  endif
  eq r6.w, r15.w, l(0.000000)
  lt r7.w, l(-2.000000), r14.x
  add r13.xyz, -r4.xyzx, r13.xyzx
  dp3 r8.z, r13.xyzx, r13.xyzx
  rsq r8.w, r8.z
  mul r18.xyz, r8.wwww, r13.xyzx
  mul r8.w, r13.w, r13.w
  mul r8.z, r8.w, r8.z
  mad r8.z, -r8.z, r8.z, l(1.000000)
  max r8.z, r8.z, l(0.000000)
  mul r8.z, r8.z, r8.z
  mul r19.xyz, r13.wwww, r13.xyzx
  dp3 r8.w, r19.xyzx, r19.xyzx
  min r8.w, r8.w, l(1.000000)
  add r8.w, -r8.w, l(1.000000)
  log r8.w, r8.w
  mul r8.w, r8.w, r15.w
  exp r8.w, r8.w
  movc r8.z, r6.w, r8.z, r8.w
  dp3 r8.w, r18.xyzx, r16.yzwy
  add r8.w, -r14.x, r8.w
  mul_sat r8.w, r14.y, r8.w
  mul r8.w, r8.w, r8.w
  mul r8.w, r8.w, r8.z
  movc r7.w, r7.w, r8.w, r8.z
  lt r8.z, l(0.000000), r7.w
  if_nz r8.z
    and r8.z, r16.x, l(255)
    movc r8.z, r8.z, l(1), l(0)
    if_nz r8.z
      and r18.xyzw, r16.xxxx, l(1, 2, 4, 8)
      movc r18.xyzw, r18.xyzw, l(1.000000,1.000000,1.000000,1.000000), l(0,0,0,0)
      ushr r8.z, r16.x, l(4)
      ubfe r8.w, l(1), l(4), r16.x
      movc r19.x, r8.w, l(1.000000), l(0)
      and r14.xyw, r8.zzzz, l(2, 4, 0, 8)
      movc r19.yzw, r14.xxyw, l(0,1.000000,1.000000,1.000000), l(0,0,0,0)
      dp4 r8.z, r19.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
      dp4 r8.w, r18.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
      dp4 r9.w, r8.xyyy, r18.xyzw
      add r9.w, r9.w, l(-1.000000)
      mad r8.w, r8.w, r9.w, l(1.000000)
      mul r8.zw, r8.wwww, r8.zzzz
    else
      mov r8.zw, l(0,0,1.000000,1.000000)
    endif
    add r8.w, r8.w, r8.z
    lt r8.w, l(0.000000), r8.w
    if_nz r8.w
      f16tof32 r8.w, r14.z
      mul r9.w, r8.w, l(0.500000)
      mad r14.xyz, -r9.wwww, r17.xyzx, r13.xyzx
      mad r13.xyz, r9.wwww, r17.xyzx, r13.xyzx
      lt r8.w, l(0.000000), r8.w
      if_nz r8.w
        dp3 r8.w, r14.xyzx, r14.xyzx
        dp3 r9.w, r13.xyzx, r13.xyzx
        rsq r8.w, r8.w
        rsq r9.w, r9.w
        mul r8.w, r8.w, r9.w
        dp3 r9.w, r14.xyzx, r13.xyzx
        mul r9.w, r8.w, r9.w
        mad r9.w, r9.w, l(0.500000), r8.w
        add r9.w, r9.w, l(0.500000)
        div r8.w, r8.w, r9.w
      else
        dp3 r9.w, r14.xyzx, r14.xyzx
        add r9.w, r9.w, l(1.000000)
        rcp r8.w, r9.w
      endif
      movc r6.w, r6.w, r8.w, l(1.000000)
      mul r13.xyz, r6.wwww, r11.xyzx
      mul r14.xyz, r7.wwww, r15.xyzx
      mul r14.xyz, r8.zzzz, r14.xyzx
      mul r13.xyz, r13.xyzx, r14.xyzx
    else
      mov r13.xyz, l(0,0,0,0)
    endif
  else
    mov r13.xyz, l(0,0,0,0)
  endif
  ushr r6.w, r16.x, l(8)
  and r6.w, r6.w, cb1[16].w
  add r13.xyz, r12.xyzx, r13.xyzx
  movc r12.xyz, r6.wwww, r13.xyzx, r12.xyzx
  iadd r0.z, r0.z, l(1)
endloop
lt r0.x, l(0.000000), cb3[91].w
if_nz r0.x
  mov r4.w, l(1.000000)
  dp4 r0.x, r4.xyzw, r1.xyzw
  dp4 r0.y, r4.xyzw, r2.xyzw
  dp4 r0.z, r4.xyzw, r3.xyzw
  div r0.xy, r0.xyxx, r0.zzzz
  mad r1.xy, r0.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  mad r0.x, r0.z, cb0[176].x, cb0[176].y
  log r0.x, r0.x
  mul r0.x, r0.x, cb0[176].z
  mul r1.z, r0.x, cb0[175].z
  sample_l_indexable(texture3d)(float,float,float,float) r0.xyzw, r1.xyzx, t10.xyzw, s0, l(0.000000)
  mul r1.x, r0.w, v7.w
  mad r0.xyz, v7.xyzx, r0.wwww, r0.xyzx
else
  mov r0.xyz, v7.xyzx
  mov r1.x, v7.w
endif
add r1.yzw, r9.xxyz, -r12.xxyz
mad r1.yzw, cb0[134].zzzz, r1.yyzw, r12.xxyz
max r5.xyz, cb5[2].xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r0.w, l(0.000000), cb0[130].x
if_nz r0.w
  add r2.xyz, r4.xyzx, -cb1[5].xyzx
  add r3.xyz, cb1[11].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  lt r2.xyz, r3.xyzx, |r2.xyzx|
  or r0.w, r2.y, r2.x
  or r0.w, r2.z, r0.w
  dp3 r2.x, r4.xyzx, l(0.577000, 0.577000, 0.577000, 0.000000)
  mul r2.x, r2.x, l(0.002000)
  frc r2.x, r2.x
  lt r2.x, l(0.500000), r2.x
  movc r2.yzw, r2.xxxx, l(0,0,1.000000,1.000000), l(0,1.000000,1.000000,0)
  mov r2.x, l(1.000000)
  movc r5.xyzw, r0.wwww, r2.yzwx, r5.xyzw
  mov o0.w, r5.w
else
  mov o0.w, r5.w
endif
mad r1.yzw, r7.xxyz, r6.xxyz, r1.yyzw
add r1.yzw, r5.xxyz, r1.yyzw
mad o0.xyz, r1.yzwy, r1.xxxx, r0.xyzx
ret
// Approximately 0 instruction slots used
