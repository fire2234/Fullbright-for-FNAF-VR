//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Oct 31 12:50:22 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// ATTRIBUTE                0   xyzw        0     NONE   float   xyzw
// SV_InstanceID            0   x           1   INSTID    uint   x
// SV_VertexID              0   x           2   VERTID    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyzw
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// COLOR                    1   xyzw        2     NONE   float   xyzw
// PACKED_EYE_INDEX         0   x           3     NONE    uint   x
// TEXCOORD                 7   xyzw        4     NONE   float   xyzw
// SV_POSITION              0   xyzw        5      POS   float   xyzw
// SV_ClipDistance          1   x           6  CLIPDST   float   x
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -1.000000, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 1.000000} }
dcl_constantbuffer cb0[15], immediateIndexed
dcl_constantbuffer cb1[92], immediateIndexed
dcl_constantbuffer cb2[178], immediateIndexed
dcl_constantbuffer cb3[5], immediateIndexed
dcl_constantbuffer cb4[164], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texturecube (float,float,float,float) t0
dcl_resource_buffer (float,float,float,float) t1
dcl_resource_buffer (float,float,float,float) t2
dcl_resource_buffer (float,float,float,float) t3
dcl_input v0.xyzw
dcl_input_sgv v1.x, instance_id
dcl_input_sgv v2.x, vertex_id
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.x
dcl_output o4.xyzw
dcl_output_siv o5.xyzw, position
dcl_output_siv o6.x, clip_distance
dcl_temps 16
if_z cb0[7].x
  mov r0.x, cb2[0].x
  mov r0.y, cb2[1].x
  mov r0.z, cb2[2].x
  mov r0.w, cb2[3].x
  mov r1.x, cb2[0].y
  mov r1.y, cb2[1].y
  mov r1.z, cb2[2].y
  mov r1.w, cb2[3].y
  mov r2.x, cb2[0].z
  mov r2.y, cb2[1].z
  mov r2.z, cb2[2].z
  mov r2.w, cb2[3].z
  mov r3.x, cb2[0].w
  mov r3.y, cb2[1].w
  mov r3.z, cb2[2].w
  mov r3.w, cb2[3].w
  mov r4.xyz, cb2[62].xyzx
  mov r4.w, cb2[163].y
  mov r5.xyz, cb2[60].xyzx
else
  mov r0.x, cb4[0].x
  mov r0.y, cb4[1].x
  mov r0.z, cb4[2].x
  mov r0.w, cb4[3].x
  mov r1.x, cb4[0].y
  mov r1.y, cb4[1].y
  mov r1.z, cb4[2].y
  mov r1.w, cb4[3].y
  mov r2.x, cb4[0].z
  mov r2.y, cb4[1].z
  mov r2.z, cb4[2].z
  mov r2.w, cb4[3].z
  mov r3.x, cb4[0].w
  mov r3.y, cb4[1].w
  mov r3.z, cb4[2].w
  mov r3.w, cb4[3].w
  mov r4.xyz, cb4[62].xyzx
  mov r4.w, cb4[163].y
  mov r5.xyz, cb4[60].xyzx
endif
iadd r5.w, v1.x, cb0[14].x
imul null, r6.x, r5.w, l(3)
ld_indexable(buffer)(float,float,float,float) r6.xyzw, r6.xxxx, t3.xyzw
imad r7.xy, l(3, 3, 0, 0), r5.wwww, l(1, 2, 0, 0)
ld_indexable(buffer)(float,float,float,float) r7.xzw, r7.xxxx, t3.xwyz
ld_indexable(buffer)(float,float,float,float) r8.xyz, r7.yyyy, t3.xyzw
ld_indexable(buffer)(float,float,float,float) r9.xyzw, r5.wwww, t2.xyzw
iadd r5.w, v2.x, cb0[14].y
ishl r7.y, r5.w, l(1)
ld_indexable(buffer)(float,float,float,float) r10.xyz, r7.yyyy, t1.xyzw
bfi r5.w, l(31), l(1), r5.w, l(1)
ld_indexable(buffer)(float,float,float,float) r11.xyzw, r5.wwww, t1.xyzw
mul r12.xyz, r10.xyzx, r11.yzxy
mad r10.xyz, r11.xyzx, r10.yzxy, -r12.xyzx
mul r10.xyz, r11.wwww, r10.xyzx
mul r12.xyz, r11.yzxy, r10.xyzx
mad r10.xyz, r10.zxyz, r11.zxyz, -r12.xyzx
mul r10.xyz, r11.wwww, r10.xyzx
mul r12.xyz, r6.yyyy, cb3[1].xyzx
mad r12.xyz, r6.xxxx, cb3[0].xyzx, r12.xyzx
mad r12.xyz, r6.zzzz, cb3[2].xyzx, r12.xyzx
mul r13.xyz, r7.zzzz, cb3[1].xyzx
mad r13.xyz, r7.xxxx, cb3[0].xyzx, r13.xyzx
mad r13.xyz, r7.wwww, cb3[2].xyzx, r13.xyzx
mul r14.xyz, r8.yyyy, cb3[1].xyzx
mad r14.xyz, r8.xxxx, cb3[0].xyzx, r14.xyzx
mad r14.xyz, r8.zzzz, cb3[2].xyzx, r14.xyzx
dp3 r5.w, r12.xyzx, r12.xyzx
rsq r5.w, r5.w
mul r12.xyz, r5.wwww, r12.xyzx
dp3 r5.w, r13.xyzx, r13.xyzx
rsq r5.w, r5.w
mul r13.xyz, r5.wwww, r13.xyzx
dp3 r5.w, r14.xyzx, r14.xyzx
rsq r5.w, r5.w
mul r14.xyz, r5.wwww, r14.xyzx
mul r15.xyz, r10.yyyy, r13.xyzx
mad r10.xyw, r10.xxxx, r12.xyxz, r15.xyxz
mad o0.xyz, r10.zzzz, r14.xyzx, r10.xywx
mul r10.xyz, r11.yyyy, r13.xyzx
mad r10.xyz, r11.xxxx, r12.xyzx, r10.xyzx
mad o1.xyz, r11.zzzz, r14.xyzx, r10.xyzx
mul o1.w, r11.w, cb3[4].w
mul r5.w, r6.w, l(0.00390625000)
round_z r5.w, r5.w
mul r10.xyz, r9.yyyy, cb3[1].xyzx
mad r10.xyz, cb3[0].xyzx, r9.xxxx, r10.xyzx
mad r10.xyz, cb3[2].xyzx, r9.zzzz, r10.xyzx
add r10.xyz, r10.xyzx, cb3[3].xyzx
add r11.xyz, r4.xyzx, r10.xyzx
dp3 r6.w, r11.xyzx, r11.xyzx
sqrt r6.w, r6.w
add r6.w, r6.w, -cb0[13].x
mul_sat r6.w, r6.w, cb0[13].y
add o2.y, -r6.w, l(1.000000)
add r6.w, -r5.w, l(1.000000)
mul r6.w, r6.w, cb0[13].w
mad r5.w, cb0[13].z, r5.w, r6.w
add r11.xyz, r10.xyzx, -cb0[11].xyzx
dp3 r6.w, r11.xyzx, r11.xyzx
sqrt r6.w, r6.w
mad r6.w, cb0[8].w, r9.w, r6.w
add r10.xyz, r10.xyzx, -cb0[12].xyzx
dp3 r7.y, r10.xyzx, r10.xyzx
sqrt r7.y, r7.y
mad r7.y, cb0[8].w, r9.w, r7.y
lt r10.xyz, cb0[8].xyzx, r6.wwww
and r10.xyz, r10.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
dp3 r6.w, r10.xyzx, cb0[10].xyzx
lt r10.xyz, cb0[9].xyzx, r7.yyyy
and r10.xyz, r10.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
dp3 r7.y, r10.xyzx, cb0[10].xyzx
mul r7.y, r7.y, cb0[12].w
mad r10.w, r6.w, cb0[11].w, r7.y
lt r6.w, |r10.w|, l(0.999000)
and r6.w, r6.w, l(0x3f800000)
mul r10.z, r5.w, r6.w
mov r11.x, r6.x
mov r11.y, r7.x
mov r11.z, r8.x
mov r11.w, r9.x
dp4 r5.w, v0.xyzw, r11.xyzw
mov r11.x, r6.y
mov r11.y, r7.z
mov r11.z, r8.y
mov r11.w, r9.y
dp4 r6.x, v0.xyzw, r11.xyzw
mov r8.x, r6.z
mov r8.y, r7.w
mov r8.w, r9.z
dp4 r6.y, v0.xyzw, r8.xyzw
mul r6.xzw, r6.xxxx, cb3[1].xxyz
mad r6.xzw, cb3[0].xxyz, r5.wwww, r6.xxzw
mad r6.xyz, cb3[2].xyzx, r6.yyyy, r6.xzwx
add r4.xyz, r4.xyzx, cb3[3].xyzx
add r6.xyz, r4.xyzx, r6.xyzx
mov r6.w, l(1.000000)
mul r7.xyzw, r10.zzzz, r6.xyzw
dp4 r0.x, r7.xyzw, r0.xyzw
dp4 r0.y, r7.xyzw, r1.xyzw
dp4 r0.z, r7.xyzw, r2.xyzw
dp4 r0.w, r7.xyzw, r3.xyzw
if_nz cb0[0].x
  mov r1.x, cb0[7].x
  mov r2.x, icb[r1.x + 0].x
  mov r2.y, l(1.000000)
  dp2 o6.x, r0.xwxx, r2.xyxx
  mul r1.y, r4.w, l(0.500000)
  mul r1.x, r0.w, icb[r1.x + 0].x
  mad r1.z, -r4.w, l(0.500000), l(1.000000)
  mul r1.x, r1.z, r1.x
  mad r0.x, r0.x, r1.y, r1.x
else
  mov o6.x, l(0)
endif
movc r1.x, cb0[0].x, l(-0.000000), l(0)
or o3.x, r1.x, cb0[7].x
mad r1.xyz, r6.xyzx, r10.zzzz, -r5.xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
sqrt r2.x, r1.w
dp3 r2.y, r1.xyzx, cb2[52].xyzx
div r2.x, r2.x, r2.y
mul r2.x, r2.x, cb2[177].z
max r2.x, r2.x, l(0.000000)
rsq r2.y, r1.w
mul r1.w, r1.w, r2.y
mul r3.xyz, r1.xyzx, r2.yyyy
max r2.x, r2.x, cb1[85].w
lt r2.z, l(0.000000), r2.x
mul r2.w, r2.y, r2.x
mad r3.w, r2.w, r1.z, cb2[59].z
mad r2.w, -r2.w, r1.z, r1.z
mad r2.x, -r2.x, r2.y, l(1.000000)
mul r2.x, r1.w, r2.x
add r2.y, r3.w, -cb1[87].y
mul r2.y, r2.y, cb1[85].y
max r2.y, r2.y, l(-127.000000)
exp r2.y, -r2.y
mul r2.y, r2.y, cb1[87].x
movc r2.y, r2.z, r2.y, cb1[85].x
movc r2.x, r2.z, r2.x, r1.w
movc r2.z, r2.z, r2.w, r1.z
mul r2.z, r2.z, cb1[85].y
max r2.z, r2.z, l(-127.000000)
exp r2.w, -r2.z
add r2.w, -r2.w, l(1.000000)
div r2.w, r2.w, r2.z
mad r3.w, -r2.z, l(0.240226507), l(0.693147182)
lt r2.z, l(0.010000), |r2.z|
movc r2.z, r2.z, r2.w, r3.w
mul r2.y, r2.z, r2.y
mul r2.z, r2.x, r2.y
lt r4.xy, l(0.000000, 0.000000, 0.000000, 0.000000), cb1[87].zwzz
if_nz r4.x
  mad_sat r2.w, r1.w, cb1[91].x, cb1[91].y
  mul r4.xz, cb1[90].yyxy, l(1.000000, 0.000000, -1.000000, 0.000000)
  dp2 r5.x, r1.xyxx, r4.xzxx
  dp2 r5.y, r1.xyxx, cb1[90].xyxx
  mov r5.z, r1.z
  sample_l_indexable(texturecube)(float,float,float,float) r1.xyz, r5.xyzx, t0.xyzw, s0, l(0.000000)
  sample_l_indexable(texturecube)(float,float,float,float) r4.xzw, r5.xyzx, t0.xwyz, s0, cb1[91].z
  add r1.xyz, r1.xyzx, -r4.xzwx
  mad r1.xyz, r2.wwww, r1.xyzx, r4.xzwx
  mul r1.xyz, r1.xyzx, cb1[86].xyzx
else
  mov r1.xyz, cb1[86].xyzx
endif
ge r2.w, cb1[88].w, l(0.000000)
eq r3.w, cb1[87].z, l(0.000000)
and r2.w, r2.w, r3.w
dp3_sat r3.x, r3.xyzx, cb1[88].xyzx
log r3.x, r3.x
mul r3.x, r3.x, cb1[89].w
exp r3.x, r3.x
mul r3.xyz, r3.xxxx, cb1[89].xyzx
add r2.x, r2.x, -cb1[88].w
max r2.x, r2.x, l(0.000000)
mul r2.x, r2.x, r2.y
exp r2.x, -r2.x
min r2.x, r2.x, l(1.000000)
add r2.x, -r2.x, l(1.000000)
mul r3.xyz, r2.xxxx, r3.xyzx
and r3.xyz, r2.wwww, r3.xyzx
exp r2.x, -r2.z
min r2.x, r2.x, l(1.000000)
max r3.w, r2.x, cb1[86].w
lt r1.w, cb1[87].w, r1.w
and r1.w, r1.w, r4.y
movc r2.xyzw, r1.wwww, l(0,0,0,1.000000), r3.xyzw
add r1.w, -r2.w, l(1.000000)
mad o4.xyz, r1.xyzx, r1.wwww, r2.xyzx
mov o0.w, l(0)
mov o2.x, r9.w
mov o2.zw, r10.zzzw
mov o4.w, r2.w
mov o5.xyzw, r0.xyzw
ret
// Approximately 0 instruction slots used
