//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Oct 31 12:50:20 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// ATTRIBUTE                0   xyzw        0     NONE   float   xyz
// ATTRIBUTE                1   xyzw        1     NONE   float   xyz
// ATTRIBUTE                2   xyzw        2     NONE   float   xyzw
// ATTRIBUTE                3   xyzw        3     NONE   float
// ATTRIBUTE                4   xy          4     NONE   float   xy
// SV_VertexID              0   x           5   VERTID    uint   x
// SV_InstanceID            0   x           6   INSTID    uint
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyzw
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// PACKED_EYE_INDEX         0   x           2     NONE    uint   x
// TEXCOORD                 7   xyzw        3     NONE   float   xyzw
// SV_POSITION              0   xyzw        4      POS   float   xyzw
// SV_ClipDistance          1   x           5  CLIPDST   float   x
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -1.000000, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 1.000000} }
dcl_constantbuffer cb0[4], immediateIndexed
dcl_constantbuffer cb1[92], immediateIndexed
dcl_constantbuffer cb2[178], immediateIndexed
dcl_constantbuffer cb3[4], immediateIndexed
dcl_constantbuffer cb4[164], immediateIndexed
dcl_constantbuffer cb5[10], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texturecube (float,float,float,float) t0
dcl_resource_buffer (float,float,float,float) t1
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v2.xyzw
dcl_input v4.xy
dcl_input_sgv v5.x, vertex_id
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.x
dcl_output o3.xyzw
dcl_output_siv o4.xyzw, position
dcl_output_siv o5.x, clip_distance
dcl_temps 16
movc r0.x, cb0[0].x, l(1), l(0)
and r0.y, r0.x, cb0[3].y
if_z r0.y
  mov r1.x, cb2[0].x
  mov r1.y, cb2[1].x
  mov r1.z, cb2[2].x
  mov r1.w, cb2[3].x
  mov r2.x, cb2[0].y
  mov r2.y, cb2[1].y
  mov r2.z, cb2[2].y
  mov r2.w, cb2[3].y
  mov r3.x, cb2[0].z
  mov r3.y, cb2[1].z
  mov r3.z, cb2[2].z
  mov r3.w, cb2[3].z
  mov r4.x, cb2[0].w
  mov r4.y, cb2[1].w
  mov r4.z, cb2[2].w
  mov r4.w, cb2[3].w
  mov r5.xyz, cb2[62].xyzx
  mov r0.z, cb2[163].y
  mov r6.xyz, cb2[53].xyzx
  mov r7.xyz, cb2[54].xyzx
  mov r8.xyz, cb2[55].xyzx
  mov r9.xyz, cb2[56].xyzx
  mov r10.xyz, cb2[59].xyzx
  mov r11.xyz, cb2[60].xyzx
else
  mov r1.x, cb4[0].x
  mov r1.y, cb4[1].x
  mov r1.z, cb4[2].x
  mov r1.w, cb4[3].x
  mov r2.x, cb4[0].y
  mov r2.y, cb4[1].y
  mov r2.z, cb4[2].y
  mov r2.w, cb4[3].y
  mov r3.x, cb4[0].z
  mov r3.y, cb4[1].z
  mov r3.z, cb4[2].z
  mov r3.w, cb4[3].z
  mov r4.x, cb4[0].w
  mov r4.y, cb4[1].w
  mov r4.z, cb4[2].w
  mov r4.w, cb4[3].w
  mov r5.xyz, cb4[62].xyzx
  mov r0.z, cb4[163].y
  mov r6.xyz, cb4[53].xyzx
  mov r7.xyz, cb4[54].xyzx
  mov r8.xyz, cb4[55].xyzx
  mov r9.xyz, cb4[56].xyzx
  mov r10.xyz, cb4[59].xyzx
  mov r11.xyz, cb4[60].xyzx
endif
mul r12.xyz, v0.yyyy, cb3[1].xyzx
mad r12.xyz, v0.xxxx, cb3[0].xyzx, r12.xyzx
mad r12.xyz, v0.zzzz, cb3[2].xyzx, r12.xyzx
add r12.xyz, r12.xyzx, cb3[3].xyzx
mul r13.xyz, v1.yyyy, cb3[1].zxyz
mad r13.xyz, v1.xxxx, cb3[0].zxyz, r13.xyzx
mad r13.xyz, v1.zzzz, cb3[2].zxyz, r13.xyzx
add r13.xyz, r13.xyzx, cb3[3].zxyz
add r9.xyz, -r7.zxyz, r9.zxyz
mad r7.xyz, cb5[6].wwww, r9.xyzx, r7.zxyz
add r8.xyz, -r6.zxyz, r8.zxyz
mad r6.xyz, cb5[6].wwww, r8.xyzx, r6.zxyz
add r8.xyz, -r7.xyzx, cb5[0].zxyz
mad r7.xyz, cb5[0].wwww, r8.xyzx, r7.xyzx
add r8.xyz, r6.xyzx, cb5[1].zxyz
mad r6.xyz, cb5[1].wwww, r8.xyzx, -r6.xyzx
add r8.xyz, r10.yzxy, -r12.yzxy
dp3 r0.w, r8.xyzx, r8.xyzx
max r5.w, r0.w, l(0.010000)
rsq r5.w, r5.w
mul r8.xyz, r5.wwww, r8.xyzx
add r9.xyz, r12.zxyz, -r13.xyzx
dp3 r5.w, r9.xyzx, r9.xyzx
max r5.w, r5.w, l(0.010000)
rsq r5.w, r5.w
mul r9.xyz, r5.wwww, r9.xyzx
mul r10.xyz, r8.xyzx, r9.yzxy
mad r10.xyz, r8.zxyz, r9.zxyz, -r10.xyzx
dp3 r5.w, r10.xyzx, r10.xyzx
max r5.w, r5.w, l(0.010000)
rsq r5.w, r5.w
mul r10.xyz, r5.wwww, r10.xyzx
mul r13.xyz, r8.zxyz, cb5[0].yzxy
mad r13.xyz, cb5[0].xyzx, r8.xyzx, -r13.xyzx
dp3 r5.w, r13.xyzx, r13.xyzx
max r5.w, r5.w, l(0.010000)
rsq r5.w, r5.w
mul r13.xyz, r5.wwww, r13.xyzx
mul r14.xyz, r8.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)
mad r14.xyz, r8.zxyz, l(0.000000, 1.000000, 0.000000, 0.000000), -r14.xyzx
dp2 r5.w, r14.yzyy, r14.yzyy
max r5.w, r5.w, l(0.010000)
rsq r5.w, r5.w
mul r14.xyz, r5.wwww, r14.xyzx
mul r15.xyz, r8.xyzx, r14.yzxy
mad r8.xyz, r8.zxyz, r14.zxyz, -r15.xyzx
lt r5.w, l(0.000000), cb5[6].x
if_nz r5.w
  mad_sat r0.w, r0.w, cb5[6].y, -cb5[6].z
  add r5.w, -r0.w, l(1.000000)
else
  mov r5.w, cb5[2].x
  mov r0.w, cb5[2].w
endif
mul r10.xyz, r10.xyzx, cb5[2].yyyy
mad r7.xyz, r7.xyzx, r5.wwww, r10.xyzx
mad r7.xyz, cb5[0].zxyz, cb5[2].zzzz, r7.xyzx
mad r7.xyz, r14.xyzx, r0.wwww, r7.xyzx
mul r9.xyz, -r9.xyzx, cb5[2].yyyy
mad r6.xyz, r6.xyzx, r5.wwww, r9.xyzx
mad r6.xyz, -r13.xyzx, cb5[2].zzzz, r6.xyzx
mad r6.xyz, r8.xyzx, r0.wwww, r6.xyzx
dp3 r0.w, r7.xyzx, r7.xyzx
rsq r0.w, r0.w
mul r7.xyz, r0.wwww, r7.xyzx
dp3 r0.w, r6.xyzx, r6.xyzx
rsq r0.w, r0.w
mul r6.xyz, r0.wwww, r6.xyzx
mad r0.w, v2.z, cb5[8].x, cb5[8].y
sincos r8.x, r9.x, r0.w
mul r8.yzw, r7.yyzx, r9.xxxx
mad r8.yzw, r8.xxxx, r6.yyzx, r8.yyzw
mul r7.xyz, r7.xyzx, r8.xxxx
mad r6.xyz, r9.xxxx, r6.xyzx, -r7.xyzx
if_nz cb0[3].x
  lt r7.xy, l(0.000000, 0.000000, 0.000000, 0.000000), v2.xyxx
  lt r7.zw, v2.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
  iadd r7.xy, -r7.xyxx, r7.zwzz
  itof r7.xy, r7.xyxx
  utof r0.w, v5.x
  utof r5.w, cb0[3].x
  div r0.w, r0.w, r5.w
  ge r6.w, r0.w, -r0.w
  frc r0.w, r0.w
  movc r0.w, r6.w, r0.w, -r0.w
  mul r0.w, r5.w, r0.w
  ftou r0.w, r0.w
  mul r5.w, cb5[5].y, cb5[5].x
  div r6.w, v2.w, r5.w
  ge r7.z, r6.w, -r6.w
  frc r6.w, |r6.w|
  movc r6.w, r7.z, r6.w, -r6.w
  mul r5.w, r5.w, r6.w
  ftou r5.w, r5.w
  mul r6.w, r7.y, r7.x
  lt r6.w, r6.w, l(0.000000)
  iadd r7.z, cb0[3].x, l(-1)
  iadd r7.z, -r0.w, r7.z
  movc r0.w, r6.w, r7.z, r0.w
  imad r0.w, r5.w, cb0[3].x, r0.w
  ld_indexable(buffer)(float,float,float,float) r7.zw, r0.wwww, t1.zwxy
  lt r7.xy, r7.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
  add r9.xy, -r7.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
  movc r7.xy, r7.xyxx, r9.xyxx, r7.zwzz
else
  mov r7.xy, v4.xyxx
endif
add r5.xyz, r5.xyzx, r12.xyzx
add r7.xy, r7.xyxx, cb5[9].xyxx
mul r7.xy, r7.xyxx, |v2.xyxx|
mad r5.xyz, r7.xxxx, r8.yzwy, r5.xyzx
mad r5.xyz, r7.yyyy, r6.yzxy, r5.xyzx
frc o0.w, v2.w
mul r7.xyz, r6.zxyz, r8.wyzw
mad r7.xyz, r8.zwyz, r6.xyzx, -r7.xyzx
dp3 r0.w, r7.xyzx, r7.xyzx
rsq r0.w, r0.w
mul r7.xyz, r0.wwww, r7.xyzx
lt r9.xy, cb5[8].zzzz, l(0.500000, 1.500000, 0.000000, 0.000000)
add r10.xyz, r12.xyzx, -cb5[3].xyzx
dp3 r0.w, r10.xyzx, r10.xyzx
rsq r0.w, r0.w
mul r13.xyz, r0.wwww, r10.xyzx
dp3 r0.w, cb5[4].xyzx, r10.xyzx
mad r10.xyz, r0.wwww, cb5[4].xyzx, cb5[3].xyzx
add r10.xyz, -r10.xyzx, r12.xyzx
dp3 r0.w, r10.xyzx, r10.xyzx
rsq r0.w, r0.w
mul r10.xyz, r0.wwww, r10.xyzx
movc r9.yzw, r9.yyyy, r13.xxyz, r10.xxyz
movc r7.xyz, r9.xxxx, r7.xyzx, r9.yzwy
mov r5.w, l(1.000000)
dp4 r1.x, r5.xyzw, r1.xyzw
dp4 r1.y, r5.xyzw, r2.xyzw
dp4 r1.z, r5.xyzw, r3.xyzw
dp4 r1.w, r5.xyzw, r4.xyzw
if_nz cb0[0].x
  mov r2.x, icb[r0.y + 0].x
  mov r2.y, l(1.000000)
  dp2 o5.x, r1.xwxx, r2.xyxx
  mul r0.w, r0.z, l(0.500000)
  mul r2.x, r1.w, icb[r0.y + 0].x
  mad r0.z, -r0.z, l(0.500000), l(1.000000)
  mul r0.z, r0.z, r2.x
  mad r1.x, r1.x, r0.w, r0.z
else
  mov o5.x, l(0)
endif
mul r2.xyz, r6.xyzx, r7.yzxy
mad r2.xyz, r6.zxyz, r7.zxyz, -r2.xyzx
dp3 r0.z, r2.xyzx, r8.yzwy
lt r0.w, l(0.000000), r0.z
lt r0.z, r0.z, l(0.000000)
iadd r0.z, -r0.w, r0.z
itof o1.w, r0.z
imad o2.x, r0.x, l(0x80000000), r0.y
add r0.xyz, -r11.xyzx, r5.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
sqrt r2.x, r0.w
dp3 r2.y, r0.xyzx, cb2[52].xyzx
div r2.x, r2.x, r2.y
mul r2.x, r2.x, cb2[177].z
max r2.x, r2.x, l(0.000000)
rsq r2.y, r0.w
mul r0.w, r0.w, r2.y
mul r3.xyz, r0.xyzx, r2.yyyy
max r2.x, r2.x, cb1[85].w
lt r2.z, l(0.000000), r2.x
mul r2.w, r2.y, r2.x
mad r3.w, r2.w, r0.z, cb2[59].z
mad r2.w, -r2.w, r0.z, r0.z
mad r2.x, -r2.x, r2.y, l(1.000000)
mul r2.x, r0.w, r2.x
add r2.y, r3.w, -cb1[87].y
mul r2.y, r2.y, cb1[85].y
max r2.y, r2.y, l(-127.000000)
exp r2.y, -r2.y
mul r2.y, r2.y, cb1[87].x
movc r2.y, r2.z, r2.y, cb1[85].x
movc r2.x, r2.z, r2.x, r0.w
movc r2.z, r2.z, r2.w, r0.z
mul r2.z, r2.z, cb1[85].y
max r2.z, r2.z, l(-127.000000)
exp r2.w, -r2.z
add r2.w, -r2.w, l(1.000000)
div r2.w, r2.w, r2.z
mad r3.w, -r2.z, l(0.240226507), l(0.693147182)
lt r2.z, l(0.010000), |r2.z|
movc r2.z, r2.z, r2.w, r3.w
mul r2.y, r2.z, r2.y
mul r2.z, r2.x, r2.y
lt r4.xy, l(0.000000, 0.000000, 0.000000, 0.000000), cb1[87].zwzz
if_nz r4.x
  mad_sat r2.w, r0.w, cb1[91].x, cb1[91].y
  mul r4.xz, cb1[90].yyxy, l(1.000000, 0.000000, -1.000000, 0.000000)
  dp2 r5.x, r0.xyxx, r4.xzxx
  dp2 r5.y, r0.xyxx, cb1[90].xyxx
  mov r5.z, r0.z
  sample_l_indexable(texturecube)(float,float,float,float) r0.xyz, r5.xyzx, t0.xyzw, s0, l(0.000000)
  sample_l_indexable(texturecube)(float,float,float,float) r4.xzw, r5.xyzx, t0.xwyz, s0, cb1[91].z
  add r0.xyz, r0.xyzx, -r4.xzwx
  mad r0.xyz, r2.wwww, r0.xyzx, r4.xzwx
  mul r0.xyz, r0.xyzx, cb1[86].xyzx
else
  mov r0.xyz, cb1[86].xyzx
endif
ge r2.w, cb1[88].w, l(0.000000)
eq r3.w, cb1[87].z, l(0.000000)
and r2.w, r2.w, r3.w
dp3_sat r3.x, r3.xyzx, cb1[88].xyzx
log r3.x, r3.x
mul r3.x, r3.x, cb1[89].w
exp r3.x, r3.x
mul r3.xyz, r3.xxxx, cb1[89].xyzx
add r2.x, r2.x, -cb1[88].w
max r2.x, r2.x, l(0.000000)
mul r2.x, r2.x, r2.y
exp r2.x, -r2.x
min r2.x, r2.x, l(1.000000)
add r2.x, -r2.x, l(1.000000)
mul r3.xyz, r2.xxxx, r3.xyzx
and r3.xyz, r2.wwww, r3.xyzx
exp r2.x, -r2.z
min r2.x, r2.x, l(1.000000)
max r3.w, r2.x, cb1[86].w
lt r0.w, cb1[87].w, r0.w
and r0.w, r0.w, r4.y
movc r2.xyzw, r0.wwww, l(0,0,0,1.000000), r3.xyzw
add r0.w, -r2.w, l(1.000000)
mad o3.xyz, r0.xyzx, r0.wwww, r2.xyzx
mov o0.xyz, r8.yzwy
mov o1.xyz, r7.xyzx
mov o3.w, r2.w
mov o4.xyzw, r1.xyzw
ret
// Approximately 0 instruction slots used
