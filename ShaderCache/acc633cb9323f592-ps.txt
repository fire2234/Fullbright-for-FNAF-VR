//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jul 18 19:02:14 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xy
// TEXCOORD                 4   xyz         1     NONE   float     z
// TEXCOORD                 5   xyzw        2     NONE   float   xyzw
// PARTICLE_POSITION        0   xyzw        3     NONE   float
// PARTICLE_VELOCITY        0   xyzw        4     NONE   float      w
// TANGENTX                 0   xyzw        5     NONE   float
// TANGENTZ                 0   xyzw        6     NONE   float
// PACKED_EYE_INDEX         0   x           7     NONE    uint   x
// TEXCOORD                 7   xyzw        8     NONE   float   xyzw
// SV_Position              0   xyzw        9      POS   float   xyzw
// SV_IsFrontFace           0   x          10    FFACE    uint
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[177], immediateIndexed
dcl_constantbuffer cb1[12], immediateIndexed
dcl_constantbuffer cb2[63], immediateIndexed
dcl_constantbuffer cb3[92], immediateIndexed
dcl_constantbuffer cb4[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture3d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v0.xy
dcl_input_ps linear v1.z
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v4.w
dcl_input_ps constant v7.x
dcl_input_ps linear v8.xyzw
dcl_input_ps_siv linear noperspective v9.xyzw, position
dcl_output o0.xyzw
dcl_temps 9
and r0.x, v7.x, l(1)
if_z r0.x
  mov r0.x, cb0[4].x
  mov r0.y, cb0[5].x
  mov r0.z, cb0[6].x
  mov r0.w, cb0[7].x
  mov r1.x, cb0[4].y
  mov r1.y, cb0[5].y
  mov r1.z, cb0[6].y
  mov r1.w, cb0[7].y
  mov r2.x, cb0[4].w
  mov r2.y, cb0[5].w
  mov r2.z, cb0[6].w
  mov r2.w, cb0[7].w
  mov r3.x, cb0[40].x
  mov r3.y, cb0[41].x
  mov r3.z, cb0[42].x
  mov r3.w, cb0[43].x
  mov r4.x, cb0[40].y
  mov r4.y, cb0[41].y
  mov r4.z, cb0[42].y
  mov r4.w, cb0[43].y
  mov r5.x, cb0[40].z
  mov r5.y, cb0[41].z
  mov r5.z, cb0[42].z
  mov r5.w, cb0[43].z
  mov r6.x, cb0[40].w
  mov r6.y, cb0[41].w
  mov r6.z, cb0[42].w
  mov r6.w, cb0[43].w
  mov r7.xyz, cb0[62].xyzx
else
  mov r0.x, cb2[4].x
  mov r0.y, cb2[5].x
  mov r0.z, cb2[6].x
  mov r0.w, cb2[7].x
  mov r1.x, cb2[4].y
  mov r1.y, cb2[5].y
  mov r1.z, cb2[6].y
  mov r1.w, cb2[7].y
  mov r2.x, cb2[4].w
  mov r2.y, cb2[5].w
  mov r2.z, cb2[6].w
  mov r2.w, cb2[7].w
  mov r3.x, cb2[40].x
  mov r3.y, cb2[41].x
  mov r3.z, cb2[42].x
  mov r3.w, cb2[43].x
  mov r4.x, cb2[40].y
  mov r4.y, cb2[41].y
  mov r4.z, cb2[42].y
  mov r4.w, cb2[43].y
  mov r5.x, cb2[40].z
  mov r5.y, cb2[41].z
  mov r5.z, cb2[42].z
  mov r5.w, cb2[43].z
  mov r6.x, cb2[40].w
  mov r6.y, cb2[41].w
  mov r6.z, cb2[42].w
  mov r6.w, cb2[43].w
  mov r7.xyz, cb2[62].xyzx
endif
add r7.w, -|v1.z|, l(1.000000)
mov r8.xyz, v9.xyzx
mov r8.w, l(1.000000)
dp4 r3.x, r8.xyzw, r3.xyzw
dp4 r3.y, r8.xyzw, r4.xyzw
dp4 r3.z, r8.xyzw, r5.xyzw
dp4 r3.w, r8.xyzw, r6.xyzw
div r3.xyz, r3.xyzx, r3.wwww
add r3.xyz, -r7.xyzx, r3.xyzx
add r4.xyz, cb4[3].xyzx, -cb4[4].xyzx
mad r4.xyz, r4.xyzx, l(0.700000, 0.700000, 0.700000, 0.000000), cb4[4].xyzx
sample_b_indexable(texture2d)(float,float,float,float) r5.xy, v0.xyxx, t1.xyzw, s1, cb0[133].x
div_sat r4.w, v4.w, cb4[6].x
add r5.zw, -r5.xxxy, r5.yyyx
mad r5.x, r4.w, r5.z, r5.x
mul r4.xyz, r4.xyzx, r5.xxxx
mul r4.xyz, r4.xyzx, v2.xyzx
mad r6.xyz, -|v9.wwww|, l(0.00390625000, 0.000555559993, 0.00781250000, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
mul_sat r6.xyz, r6.xyzx, l(1.11111116, 1.11111116, 1.11111116, 0.000000)
add r6.xyz, -r6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r5.z, r6.x, l(0.050000), l(0.050000)
mad r4.xyz, r4.xyzx, r5.zzzz, cb4[5].xyzx
mad r5.y, r6.y, r5.w, r5.y
mul r5.x, r5.y, r5.x
mul r5.x, r6.z, r5.x
mul r5.x, r5.x, v2.w
mul r5.x, r5.x, r7.w
sample_b_indexable(texture2d)(float,float,float,float) r5.y, v0.xyxx, t2.yxzw, s2, cb0[133].x
mul r5.z, r5.y, r5.x
mad r5.w, r5.x, r5.y, -r5.x
mad r5.w, r5.w, l(0.750000), r5.x
mad r5.x, -r5.x, r5.y, r5.w
mad_sat r5.w, r4.w, r5.x, r5.z
lt r4.w, l(0.000000), cb3[91].w
if_nz r4.w
  mov r3.w, l(1.000000)
  dp4 r0.x, r3.xyzw, r0.xyzw
  dp4 r0.y, r3.xyzw, r1.xyzw
  dp4 r0.z, r3.xyzw, r2.xyzw
  div r0.xy, r0.xyxx, r0.zzzz
  mad r1.xy, r0.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  mad r0.x, r0.z, cb0[176].x, cb0[176].y
  log r0.x, r0.x
  mul r0.x, r0.x, cb0[176].z
  mul r1.z, r0.x, cb0[175].z
  sample_l_indexable(texture3d)(float,float,float,float) r0.xyzw, r1.xyzx, t0.xyzw, s0, l(0.000000)
  mul r1.x, r0.w, v8.w
  mad r0.xyz, v8.xyzx, r0.wwww, r0.xyzx
else
  mov r0.xyz, v8.xyzx
  mov r1.x, v8.w
endif
max r5.xyz, r4.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r0.w, l(0.000000), cb0[130].x
if_nz r0.w
  add r1.yzw, r3.xxyz, -cb1[5].xxyz
  add r2.xyz, cb1[11].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  lt r1.yzw, r2.xxyz, |r1.yyzw|
  or r0.w, r1.z, r1.y
  or r0.w, r1.w, r0.w
  dp3 r1.y, r3.xyzx, l(0.577000, 0.577000, 0.577000, 0.000000)
  mul r1.y, r1.y, l(0.002000)
  frc r1.y, r1.y
  lt r1.y, l(0.500000), r1.y
  movc r2.yzw, r1.yyyy, l(0,0,1.000000,1.000000), l(0,1.000000,1.000000,0)
  mov r2.x, l(1.000000)
  movc r5.xyzw, r0.wwww, r2.yzwx, r5.xyzw
  mov o0.w, r5.w
else
  mov o0.w, r5.w
endif
mad o0.xyz, r5.xyzx, r1.xxxx, r0.xyzx
ret
// Approximately 0 instruction slots used
