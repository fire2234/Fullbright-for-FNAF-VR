//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Wed Oct 23 20:16:42 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyz
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// TEXCOORD                 4   xyzw        2     NONE   float   xyzw
// PACKED_EYE_INDEX         0   x           3     NONE    uint   x
// TEXCOORD                 7   xyzw        4     NONE   float   xyzw
// SV_Position              0   xyzw        5      POS   float   xyzw
// SV_IsFrontFace           0   x           6    FFACE    uint
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer cb0[32], immediateIndexed
dcl_constantbuffer cb1[177], immediateIndexed
dcl_constantbuffer cb2[17], immediateIndexed
dcl_constantbuffer cb3[153], immediateIndexed
dcl_constantbuffer cb4[92], dynamicIndexed
dcl_constantbuffer cb5[22], immediateIndexed
dcl_constantbuffer cb6[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_buffer (float,float,float,float) t1
dcl_resource_buffer (uint,uint,uint,uint) t2
dcl_resource_buffer (uint,uint,uint,uint) t3
dcl_resource_buffer (float,float,float,float) t4
dcl_resource_buffer (uint,uint,uint,uint) t5
dcl_resource_buffer (uint,uint,uint,uint) t6
dcl_resource_texturecubearray (float,float,float,float) t7
dcl_resource_texture3d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t9
dcl_resource_texture2d (float,float,float,float) t10
dcl_input_ps linear centroid v0.xyz
dcl_input_ps linear centroid v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_input_ps constant v3.x
dcl_input_ps linear v4.xyzw
dcl_input_ps_siv linear noperspective v5.xyzw, position
dcl_output o0.xyzw
dcl_temps 23
and r0.x, v3.x, l(1)
if_z r0.x
  mov r1.x, cb1[4].x
  mov r1.y, cb1[5].x
  mov r1.z, cb1[6].x
  mov r1.w, cb1[7].x
  mov r2.x, cb1[4].y
  mov r2.y, cb1[5].y
  mov r2.z, cb1[6].y
  mov r2.w, cb1[7].y
  mov r3.x, cb1[4].w
  mov r3.y, cb1[5].w
  mov r3.z, cb1[6].w
  mov r3.w, cb1[7].w
  mov r4.x, cb1[40].x
  mov r4.y, cb1[41].x
  mov r4.z, cb1[42].x
  mov r4.w, cb1[43].x
  mov r5.x, cb1[40].y
  mov r5.y, cb1[41].y
  mov r5.z, cb1[42].y
  mov r5.w, cb1[43].y
  mov r6.x, cb1[40].z
  mov r6.y, cb1[41].z
  mov r6.z, cb1[42].z
  mov r6.w, cb1[43].z
  mov r7.x, cb1[40].w
  mov r7.y, cb1[41].w
  mov r7.z, cb1[42].w
  mov r7.w, cb1[43].w
  mov r0.y, cb1[128].w
  mov r0.zw, cb1[129].xxxy
  mov r8.x, cb1[152].w
  mov r8.yzw, cb1[62].xxyz
  mov r9.xyz, cb1[128].xyzx
  mov r10.xy, cb1[121].xyxx
else
  mov r1.x, cb3[4].x
  mov r1.y, cb3[5].x
  mov r1.z, cb3[6].x
  mov r1.w, cb3[7].x
  mov r2.x, cb3[4].y
  mov r2.y, cb3[5].y
  mov r2.z, cb3[6].y
  mov r2.w, cb3[7].y
  mov r3.x, cb3[4].w
  mov r3.y, cb3[5].w
  mov r3.z, cb3[6].w
  mov r3.w, cb3[7].w
  mov r4.x, cb3[40].x
  mov r4.y, cb3[41].x
  mov r4.z, cb3[42].x
  mov r4.w, cb3[43].x
  mov r5.x, cb3[40].y
  mov r5.y, cb3[41].y
  mov r5.z, cb3[42].y
  mov r5.w, cb3[43].y
  mov r6.x, cb3[40].z
  mov r6.y, cb3[41].z
  mov r6.z, cb3[42].z
  mov r6.w, cb3[43].z
  mov r7.x, cb3[40].w
  mov r7.y, cb3[41].w
  mov r7.z, cb3[42].w
  mov r7.w, cb3[43].w
  mov r0.y, cb3[128].w
  mov r0.zw, cb3[129].xxxy
  mov r8.x, cb3[152].w
  mov r8.yzw, cb3[62].xxyz
  mov r9.xyz, cb3[128].xyzx
  mov r10.xy, cb3[121].xyxx
endif
mul r11.xyz, v0.zxyz, v1.xyzx
mad r11.xyz, v1.zxyz, v0.xyzx, -r11.xyzx
mul r11.xyz, r11.xyzx, v1.wwww
mov r12.xyz, v5.xyzx
mov r12.w, l(1.000000)
dp4 r4.x, r12.xyzw, r4.xyzw
dp4 r4.y, r12.xyzw, r5.xyzw
dp4 r4.z, r12.xyzw, r6.xyzw
dp4 r4.w, r12.xyzw, r7.xyzw
div r4.xyz, r4.xyzx, r4.wwww
add r5.xyz, -r8.yzwy, r4.xyzx
dp3 r4.w, -r4.xyzx, -r4.xyzx
rsq r4.w, r4.w
mul r4.xyz, r4.wwww, -r4.xyzx
mad r6.xyz, r0.yyyy, l(0.000000, 0.000000, 1.000000, 0.000000), r9.xyzx
dp3 r0.y, r6.xyzx, r6.xyzx
rsq r0.y, r0.y
mul r6.xyz, r0.yyyy, r6.xyzx
mul r7.xyz, r11.xyzx, r6.yyyy
mad r6.xyw, r6.xxxx, v0.yzyx, r7.xyxz
mad r6.xyz, r6.zzzz, v1.yzxy, r6.xywx
dp3 r0.y, r6.xyzx, r6.xyzx
rsq r0.y, r0.y
mul r6.xyz, r0.yyyy, r6.xyzx
dp3_sat r0.y, v1.xyzx, r4.xyzx
add r0.y, -r0.y, l(1.000000)
log r0.y, r0.y
mul r0.y, r0.y, cb6[5].x
exp r0.y, r0.y
add r4.w, -cb6[5].z, cb6[5].y
mad_sat r7.w, r0.y, r4.w, cb6[5].z
mov_sat r8.yzw, cb6[4].xxyz
mad r0.y, r0.w, l(0.500000), r0.z
sample_indexable(texture2d)(float,float,float,float) r9.xyzw, v2.zwzz, t10.xyzw, s4
mad r11.xyzw, cb5[7].xyzw, l(-0.500000, -0.500000, -0.500000, -0.500000), l(0.500000, 0.500000, 0.500000, 0.500000)
mad_sat r9.xyzw, r9.xyzw, cb5[7].xyzw, r11.xyzw
mul r9.xyzw, r9.xyzw, r9.xyzw
mul r9.xyzw, r9.xyzw, cb5[6].xyzw
mad r11.xyz, r8.yzwy, cb1[126].wwww, cb1[126].xyzx
mad r12.xyz, cb1[127].wwww, l(0.040000, 0.040000, 0.040000, 0.000000), cb1[127].xyzx
mul r0.zw, v2.xxxy, l(0.000000, 0.000000, 1.000000, 0.500000)
mad r10.zw, v2.xxxy, l(0.000000, 0.000000, 1.000000, 0.500000), l(0.000000, 0.000000, 0.000000, 0.500000)
sample_indexable(texture2d)(float,float,float,float) r13.xyzw, r0.zwzz, t9.xyzw, s3
sample_indexable(texture2d)(float,float,float,float) r14.xyzw, r10.zwzz, t9.xyzw, s3
mad r0.z, r14.w, l(0.00392156886), r13.w
add r0.z, r0.z, l(-0.00196078443)
mad r0.z, r0.z, cb5[18].w, cb5[20].w
mul r13.xyz, r13.xyzx, r13.xyzx
mad r13.xyz, r13.xyzx, cb5[18].xyzx, cb5[20].xyzx
exp r0.z, r0.z
add r0.z, r0.z, l(-0.0185813606)
mad r14.xyzw, r14.xyzw, cb5[19].xyzw, cb5[21].xyzw
mov r6.w, l(1.000000)
dp4 r0.w, r14.xyzw, r6.xyzw
max r0.w, r0.w, l(0.000000)
mul r0.z, r0.w, r0.z
mul r13.xyz, r13.xyzx, r0.zzzz
mul r13.xyz, r13.xyzx, cb1[146].xyzx
dp3 r0.z, r13.xyzx, l(0.300000, 0.590000, 0.110000, 0.000000)
mul r13.xyz, r11.xyzx, r13.xyzx
mad r14.xyz, r8.yzwy, l(2.040400, 2.040400, 2.040400, 0.000000), l(-0.332400, -0.332400, -0.332400, 0.000000)
mad r14.xyz, r8.yzwy, l(-4.795100, -4.795100, -4.795100, 0.000000), r14.xyzx
mad r8.yzw, r8.yyzw, l(0.000000, 2.755200, 2.755200, 2.755200), r14.xxyz
add r8.yzw, r8.yyzw, l(0.000000, 1.332000, 1.332000, 1.332000)
max r8.yzw, r8.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)
add r10.xy, -r10.xyxx, v5.xyxx
ftou r10.xy, r10.xyxx
if_z r0.x
  mov r0.w, cb4[3].x
  mov r4.w, cb4[3].y
  mov r6.w, cb4[3].z
  mov r10.z, cb4[1].z
  mov r14.xy, cb4[1].xyxx
  mov r10.w, cb4[2].x
else
  mov r0.w, cb4[43].x
  mov r4.w, cb4[43].y
  mov r6.w, cb4[43].z
  mov r10.z, cb4[41].z
  mov r14.xy, cb4[41].xyxx
  mov r10.w, cb4[42].x
endif
mad r0.w, v5.w, r0.w, r4.w
log r0.w, r0.w
mul r0.w, r6.w, r0.w
max r0.w, r0.w, l(0.000000)
ftou r0.w, r0.w
iadd r4.w, r10.z, l(-1)
umin r0.w, r0.w, r4.w
ushr r10.xy, r10.xyxx, r10.wwww
imad r0.w, r0.w, r14.y, r10.y
imad r0.w, r0.w, r14.x, r10.x
if_z r0.x
  mov r4.w, cb4[0].z
  mov r6.w, cb4[6].x
  mov r10.xy, cb4[6].zwzz
  mov r14.xyz, cb4[5].xyzx
else
  mov r4.w, cb4[40].z
  mov r6.w, cb4[46].x
  mov r10.xy, cb4[46].zwzz
  mov r14.xyz, cb4[45].xyzx
endif
if_nz r4.w
  and r15.xyzw, r6.wwww, l(255, 2, 4, 8)
  movc r15.xyzw, r15.xyzw, l(1,1.000000,1.000000,1.000000), l(0,0,0,0)
  if_nz cb4[7].x
    mov r4.w, cb4[7].x
    mov r10.z, l(0)
    loop
      uge r10.w, r10.z, cb4[7].x
      breakc_nz r10.w
      dp4 r10.w, cb4[8].xyzw, icb[r10.z + 0].xyzw
      lt r10.w, v5.w, r10.w
      if_nz r10.w
        mov r4.w, r10.z
        break
      endif
      iadd r10.z, r10.z, l(1)
    endloop
    ult r10.z, r4.w, cb4[7].x
    if_nz r10.z
      ishl r10.z, r4.w, l(2)
      mul r16.xyzw, r5.yyyy, cb4[r10.z + 10].xyzw
      mad r16.xyzw, r5.xxxx, cb4[r10.z + 9].xyzw, r16.xyzw
      mad r16.xyzw, r5.zzzz, cb4[r10.z + 11].xyzw, r16.xyzw
      add r16.xyzw, r16.xyzw, cb4[r10.z + 12].xyzw
      div r17.xyzw, r16.xyxy, r16.wwww
      ge r10.zw, r17.zzzw, cb4[r4.w + 25].xxxy
      ge r16.xy, cb4[r4.w + 25].zwzz, r17.zwzz
      and r10.zw, r10.zzzw, r16.xxxy
      and r4.w, r10.w, r10.z
      if_nz r4.w
        mad r17.xyzw, r17.xyzw, cb4[29].xyxy, l(-0.500000, -0.500000, -0.500000, -0.500000)
        frc r10.zw, r17.zzzw
        round_ni r17.xyzw, r17.xyzw
        add r18.xyzw, r17.zwzw, l(0.500000, 1.500000, 0.500000, 0.500000)
        mul r18.xyzw, r18.xyzw, cb4[29].zwzw
        sample_l_indexable(texture2d)(float,float,float,float) r19.x, r18.xyxx, t0.xyzw, s1, l(0.000000)
        add r17.xyzw, r17.xyzw, l(1.500000, 1.500000, 1.500000, 0.500000)
        mul r17.xyzw, r17.xyzw, cb4[29].zwzw
        sample_l_indexable(texture2d)(float,float,float,float) r19.y, r17.xyxx, t0.yxzw, s1, l(0.000000)
        sample_l_indexable(texture2d)(float,float,float,float) r19.z, r17.zwzz, t0.yzxw, s1, l(0.000000)
        sample_l_indexable(texture2d)(float,float,float,float) r19.w, r18.zwzz, t0.yzwx, s1, l(0.000000)
        add r16.xyzw, -r16.zzzz, r19.xyzw
        mad_sat r16.xyzw, r16.xyzw, l(4000.000000, 4000.000000, 4000.000000, 4000.000000), l(1.000000, 1.000000, 1.000000, 1.000000)
        add r16.yz, -r16.wwxw, r16.zzyz
        mad r16.xy, r10.zzzz, r16.yzyy, r16.wxww
        add r4.w, -r16.x, r16.y
        mad r4.w, r10.w, r4.w, r16.x
      else
        mov r4.w, l(1.000000)
      endif
    else
      mov r4.w, l(1.000000)
    endif
  else
    mov r4.w, l(1.000000)
  endif
  if_nz r15.x
    mov r15.x, l(1.000000)
    dp4 r10.z, l(1.000000, 1.000000, 1.000000, 1.000000), r15.xyzw
    mov r9.x, l(1.000000)
    dp4 r10.w, r9.xyzw, r15.xyzw
    add r10.w, r10.w, l(-1.000000)
    mad r10.z, r10.z, r10.w, l(1.000000)
    mad_sat r10.x, v5.w, r10.x, r10.y
    mul r10.x, r10.x, r10.x
    add r10.y, -r4.w, r10.z
    mad r10.x, r10.x, r10.y, r4.w
    min r10.y, r10.x, l(1.000000)
  else
    mov r10.xy, l(1.000000,1.000000,0,0)
  endif
  add r4.w, r10.y, r10.x
  lt r4.w, l(0.000000), r4.w
  if_nz r4.w
    mul r10.yzw, r11.xxyz, l(0.000000, 0.318309873, 0.318309873, 0.318309873)
    mul r14.xyz, r10.xxxx, r14.xyzx
    mul r10.xyz, r10.yzwy, r14.xyzx
  else
    mov r10.xyz, l(0,0,0,0)
  endif
  ushr r4.w, r6.w, l(8)
  and r4.w, r4.w, cb2[16].w
  movc r10.xyz, r4.wwww, r10.xyzx, l(0,0,0,0)
  mov r9.x, l(1.000000)
else
  mov r10.xyz, l(0,0,0,0)
endif
if_z r0.x
  ishl r4.w, r0.w, l(1)
  ld_indexable(buffer)(uint,uint,uint,uint) r4.w, r4.wwww, t2.yzwx
  umin r4.w, r4.w, cb4[0].x
  bfi r6.w, l(31), l(1), r0.w, l(1)
  ld_indexable(buffer)(uint,uint,uint,uint) r6.w, r6.wwww, t2.yzwx
else
  ishl r10.w, r0.w, l(1)
  ld_indexable(buffer)(uint,uint,uint,uint) r10.w, r10.wwww, t5.yzwx
  umin r4.w, r10.w, cb4[40].x
  bfi r0.w, l(31), l(1), r0.w, l(1)
  ld_indexable(buffer)(uint,uint,uint,uint) r6.w, r0.wwww, t5.yzwx
endif
movc r0.w, r0.x, cb4[40].x, cb4[0].x
umin r0.w, r0.w, r4.w
mul r14.xyz, r11.xyzx, l(0.318309873, 0.318309873, 0.318309873, 0.000000)
mov r15.xyz, r10.xyzx
mov r4.w, l(0)
loop
  uge r10.w, r4.w, r0.w
  breakc_nz r10.w
  iadd r10.w, r4.w, r6.w
  if_z r0.x
    ld_indexable(buffer)(uint,uint,uint,uint) r11.w, r10.wwww, t3.yzwx
    imul null, r12.w, r11.w, l(5)
    ld_indexable(buffer)(float,float,float,float) r16.xyzw, r12.wwww, t1.xyzw
    imad r17.xyzw, r11.wwww, l(5, 5, 5, 5), l(1, 2, 3, 4)
    ld_indexable(buffer)(float,float,float,float) r18.xyzw, r17.xxxx, t1.xyzw
    ld_indexable(buffer)(float,float,float,float) r19.xyzw, r17.yyyy, t1.wxyz
    ld_indexable(buffer)(float,float,float,float) r17.xyz, r17.zzzz, t1.xywz
    ld_indexable(buffer)(float,float,float,float) r20.xyz, r17.wwww, t1.xyzw
  else
    ld_indexable(buffer)(uint,uint,uint,uint) r10.w, r10.wwww, t6.yzwx
    imul null, r11.w, r10.w, l(5)
    ld_indexable(buffer)(float,float,float,float) r16.xyzw, r11.wwww, t4.xyzw
    imad r21.xyzw, r10.wwww, l(5, 5, 5, 5), l(1, 2, 3, 4)
    ld_indexable(buffer)(float,float,float,float) r18.xyzw, r21.xxxx, t4.xyzw
    ld_indexable(buffer)(float,float,float,float) r19.xyzw, r21.yyyy, t4.wxyz
    ld_indexable(buffer)(float,float,float,float) r17.xyz, r21.zzzz, t4.xywz
    ld_indexable(buffer)(float,float,float,float) r20.xyz, r21.wwww, t4.xyzw
  endif
  eq r10.w, r18.w, l(0.000000)
  lt r11.w, l(-2.000000), r17.x
  add r16.xyz, -r5.xyzx, r16.xyzx
  dp3 r12.w, r16.xyzx, r16.xyzx
  rsq r13.w, r12.w
  mul r21.xyz, r13.wwww, r16.xyzx
  mul r13.w, r16.w, r16.w
  mul r12.w, r12.w, r13.w
  mad r12.w, -r12.w, r12.w, l(1.000000)
  max r12.w, r12.w, l(0.000000)
  mul r12.w, r12.w, r12.w
  mul r22.xyz, r16.wwww, r16.xyzx
  dp3 r13.w, r22.xyzx, r22.xyzx
  min r13.w, r13.w, l(1.000000)
  add r13.w, -r13.w, l(1.000000)
  log r13.w, r13.w
  mul r13.w, r13.w, r18.w
  exp r13.w, r13.w
  movc r12.w, r10.w, r12.w, r13.w
  dp3 r13.w, r21.xyzx, r19.yzwy
  add r13.w, -r17.x, r13.w
  mul_sat r13.w, r17.y, r13.w
  mul r13.w, r13.w, r13.w
  mul r13.w, r12.w, r13.w
  movc r11.w, r11.w, r13.w, r12.w
  lt r12.w, l(0.000000), r11.w
  if_nz r12.w
    and r12.w, r19.x, l(255)
    movc r12.w, r12.w, l(1), l(0)
    if_nz r12.w
      and r21.xyzw, r19.xxxx, l(1, 2, 4, 8)
      movc r21.xyzw, r21.xyzw, l(1.000000,1.000000,1.000000,1.000000), l(0,0,0,0)
      ushr r12.w, r19.x, l(4)
      ubfe r13.w, l(1), l(4), r19.x
      movc r22.x, r13.w, l(1.000000), l(0)
      and r17.xyw, r12.wwww, l(2, 4, 0, 8)
      movc r22.yzw, r17.xxyw, l(0,1.000000,1.000000,1.000000), l(0,0,0,0)
      dp4 r12.w, r22.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
      dp4 r13.w, r21.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
      dp4 r14.w, r9.xyzw, r21.xyzw
      add r14.w, r14.w, l(-1.000000)
      mad r13.w, r13.w, r14.w, l(1.000000)
      mul r17.xy, r12.wwww, r13.wwww
    else
      mov r17.xy, l(1.000000,1.000000,0,0)
    endif
    add r12.w, r17.y, r17.x
    lt r12.w, l(0.000000), r12.w
    if_nz r12.w
      f16tof32 r12.w, r17.z
      mul r13.w, r12.w, l(0.500000)
      mad r17.yzw, -r13.wwww, r20.xxyz, r16.xxyz
      mad r16.xyz, r13.wwww, r20.xyzx, r16.xyzx
      lt r12.w, l(0.000000), r12.w
      if_nz r12.w
        dp3 r12.w, r17.yzwy, r17.yzwy
        dp3 r13.w, r16.xyzx, r16.xyzx
        rsq r12.w, r12.w
        rsq r13.w, r13.w
        mul r12.w, r12.w, r13.w
        dp3 r13.w, r17.yzwy, r16.xyzx
        mul r13.w, r12.w, r13.w
        mad r13.w, r13.w, l(0.500000), r12.w
        add r13.w, r13.w, l(0.500000)
        div r12.w, r12.w, r13.w
      else
        dp3 r13.w, r17.yzwy, r17.yzwy
        add r13.w, r13.w, l(1.000000)
        rcp r12.w, r13.w
      endif
      movc r10.w, r10.w, r12.w, l(1.000000)
      mul r16.xyz, r10.wwww, r14.xyzx
      mul r17.yzw, r11.wwww, r18.xxyz
      mul r17.xyz, r17.xxxx, r17.yzwy
      mul r16.xyz, r16.xyzx, r17.xyzx
    else
      mov r16.xyz, l(0,0,0,0)
    endif
  else
    mov r16.xyz, l(0,0,0,0)
  endif
  ushr r10.w, r19.x, l(8)
  and r10.w, r10.w, cb2[16].w
  add r16.xyz, r15.xyzx, r16.xyzx
  movc r15.xyz, r10.wwww, r16.xyzx, r15.xyzx
  iadd r4.w, r4.w, l(1)
endloop
dp3 r0.x, r4.yzxy, r6.xyzx
add r0.w, r0.x, r0.x
mad r4.xyz, r0.wwww, r6.zxyz, -r4.xyzx
mov_sat r0.x, r0.x
log r0.w, r0.y
mad r0.w, -r0.w, l(1.200000), l(1.000000)
add r6.x, cb1[163].z, l(-1.000000)
add r0.w, -r0.w, r6.x
itof r4.w, cb0[28].x
sample_l_indexable(texturecubearray)(float,float,float,float) r4.xyz, r4.xyzw, t7.xyzw, s2, r0.w
mul r4.xyz, r4.xyzx, cb0[31].xxxx
mul r4.xyz, r4.xyzx, cb1[146].xyzx
dp3 r0.w, cb1[146].xyzx, l(0.300000, 0.590000, 0.110000, 0.000000)
mul r0.w, r0.w, cb0[29].w
mad_sat r4.w, r0.y, cb1[165].x, cb1[165].y
mad r6.x, r4.w, l(-2.000000), l(3.000000)
mul r4.w, r4.w, r4.w
mul r4.w, r4.w, r6.x
max r0.w, r0.w, l(0.000100)
div r0.w, r0.z, r0.w
min r0.w, r0.w, cb1[165].z
add r0.w, r0.w, l(-1.000000)
mad r0.w, r4.w, r0.w, l(1.000000)
mul r4.xyz, r0.wwww, r4.xyzx
mul r6.xyzw, r12.yxyz, l(50.000000, 0.450000, 0.450000, 0.450000)
mad r6.yzw, r6.yyzw, r0.zzzz, -r4.xxyz
mad r4.xyz, r8.xxxx, r6.yzwy, r4.xyzx
mad r9.xyzw, r0.yyyy, l(-1.000000, -0.027500, -0.572000, 0.022000), l(1.000000, 0.042500, 1.040000, -0.040000)
mul r0.y, r9.x, r9.x
mul r0.x, r0.x, l(-9.280000)
exp r0.x, r0.x
min r0.x, r0.x, r0.y
mad r0.x, r0.x, r9.x, r9.y
mad r0.xy, r0.xxxx, l(-1.040000, 1.040000, 0.000000, 0.000000), r9.zwzz
mov_sat r6.x, r6.x
mul r0.y, r0.y, r6.x
mad r0.xyz, r12.xyzx, r0.xxxx, r0.yyyy
mul r0.xyz, r0.xyzx, r4.xyzx
mad r4.xyz, r12.xyzx, l(2.040400, 2.040400, 2.040400, 0.000000), l(-0.332400, -0.332400, -0.332400, 0.000000)
mad r4.xyz, r12.xyzx, l(-4.795100, -4.795100, -4.795100, 0.000000), r4.xyzx
mad r4.xyz, r12.xyzx, l(2.755200, 2.755200, 2.755200, 0.000000), r4.xyzx
add r4.xyz, r4.xyzx, l(1.332000, 1.332000, 1.332000, 0.000000)
max r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r0.xyz, r0.xyzx, r4.xyzx, r15.xyzx
lt r0.w, l(0.000000), cb4[91].w
if_nz r0.w
  mov r5.w, l(1.000000)
  dp4 r1.x, r5.xyzw, r1.xyzw
  dp4 r1.y, r5.xyzw, r2.xyzw
  dp4 r0.w, r5.xyzw, r3.xyzw
  div r1.xy, r1.xyxx, r0.wwww
  mad r1.xy, r1.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  mad r0.w, r0.w, cb1[176].x, cb1[176].y
  log r0.w, r0.w
  mul r0.w, r0.w, cb1[176].z
  mul r1.z, r0.w, cb1[175].z
  sample_l_indexable(texture3d)(float,float,float,float) r1.xyzw, r1.xyzx, t8.xyzw, s0, l(0.000000)
  mul r2.x, r1.w, v4.w
  mad r1.xyz, v4.xyzx, r1.wwww, r1.xyzx
else
  mov r1.xyz, v4.xyzx
  mov r2.x, v4.w
endif
mad r2.yzw, r12.xxyz, l(0.000000, 0.450000, 0.450000, 0.450000), r11.xxyz
add r2.yzw, -r0.xxyz, r2.yyzw
mad r0.xyz, cb1[134].zzzz, r2.yzwy, r0.xyzx
max r7.xyz, cb6[2].xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r0.w, l(0.000000), cb1[130].x
if_nz r0.w
  add r2.yzw, r5.xxyz, -cb2[5].xxyz
  add r3.xyz, cb2[11].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  lt r2.yzw, r3.xxyz, |r2.yyzw|
  or r0.w, r2.z, r2.y
  or r0.w, r2.w, r0.w
  dp3 r1.w, r5.xyzx, l(0.577000, 0.577000, 0.577000, 0.000000)
  mul r1.w, r1.w, l(0.002000)
  frc r1.w, r1.w
  lt r1.w, l(0.500000), r1.w
  movc r3.yzw, r1.wwww, l(0,0,1.000000,1.000000), l(0,1.000000,1.000000,0)
  mov r3.x, l(1.000000)
  movc r7.xyzw, r0.wwww, r3.yzwx, r7.xyzw
  mov o0.w, r7.w
else
  mov o0.w, r7.w
endif
mad r0.xyz, r13.xyzx, r8.yzwy, r0.xyzx
add r0.xyz, r7.xyzx, r0.xyzx
mad o0.xyz, r0.xyzx, r2.xxxx, r1.xyzx
ret
// Approximately 0 instruction slots used
