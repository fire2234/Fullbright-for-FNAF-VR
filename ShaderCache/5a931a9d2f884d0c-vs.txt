//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Wed Oct 23 20:16:03 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// ATTRIBUTE                0   xyzw        0     NONE   float   xyz
// SV_VertexID              0   x           1   VERTID    uint   x
// SV_InstanceID            0   x           2   INSTID    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyzw
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// PACKED_EYE_INDEX         0   x           3     NONE    uint   x
// TEXCOORD                 7   xyzw        4     NONE   float   xyzw
// SV_POSITION              0   xyzw        5      POS   float   xyzw
// SV_ClipDistance          1   x           6  CLIPDST   float   x
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -1.000000, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 1.000000} }
dcl_constantbuffer cb0[8], immediateIndexed
dcl_constantbuffer cb1[178], immediateIndexed
dcl_constantbuffer cb2[5], immediateIndexed
dcl_constantbuffer cb3[164], immediateIndexed
dcl_constantbuffer cb4[92], immediateIndexed
dcl_constantbuffer cb5[1], immediateIndexed
dcl_constantbuffer cb6[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texturecube (float,float,float,float) t0
dcl_resource_buffer (float,float,float,float) t1
dcl_resource_buffer (float,float,float,float) t2
dcl_input v0.xyz
dcl_input_sgv v1.x, vertex_id
dcl_input_sgv v2.x, instance_id
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.x
dcl_output o4.xyzw
dcl_output_siv o5.xyzw, position
dcl_output_siv o6.x, clip_distance
dcl_temps 12
and r0.x, v2.x, l(1)
if_z r0.x
  mov r1.x, cb1[0].x
  mov r1.y, cb1[1].x
  mov r1.z, cb1[2].x
  mov r1.w, cb1[3].x
  mov r2.x, cb1[0].y
  mov r2.y, cb1[1].y
  mov r2.z, cb1[2].y
  mov r2.w, cb1[3].y
  mov r3.x, cb1[0].z
  mov r3.y, cb1[1].z
  mov r3.z, cb1[2].z
  mov r3.w, cb1[3].z
  mov r4.x, cb1[0].w
  mov r4.y, cb1[1].w
  mov r4.z, cb1[2].w
  mov r4.w, cb1[3].w
  mov r0.yzw, cb1[62].xxyz
  mov r5.x, cb1[163].y
  mov r5.yzw, cb1[60].xxyz
else
  mov r1.x, cb3[0].x
  mov r1.y, cb3[1].x
  mov r1.z, cb3[2].x
  mov r1.w, cb3[3].x
  mov r2.x, cb3[0].y
  mov r2.y, cb3[1].y
  mov r2.z, cb3[2].y
  mov r2.w, cb3[3].y
  mov r3.x, cb3[0].z
  mov r3.y, cb3[1].z
  mov r3.z, cb3[2].z
  mov r3.w, cb3[3].z
  mov r4.x, cb3[0].w
  mov r4.y, cb3[1].w
  mov r4.z, cb3[2].w
  mov r4.w, cb3[3].w
  mov r0.yzw, cb3[62].xxyz
  mov r5.x, cb3[163].y
  mov r5.yzw, cb3[60].xxyz
endif
iadd r6.x, v1.x, cb0[7].y
ishl r6.y, r6.x, l(1)
ld_indexable(buffer)(float,float,float,float) r6.yzw, r6.yyyy, t2.wxyz
bfi r7.x, l(31), l(1), r6.x, l(1)
ld_indexable(buffer)(float,float,float,float) r7.xyzw, r7.xxxx, t2.xyzw
mul r8.xyz, r6.yzwy, r7.yzxy
mad r6.yzw, r7.xxyz, r6.zzwy, -r8.xxyz
mul r6.yzw, r7.wwww, r6.yyzw
mul r8.xyz, r7.yzxy, r6.yzwy
mad r6.yzw, r6.wwyz, r7.zzxy, -r8.xxyz
mul r6.yzw, r7.wwww, r6.yyzw
mul r8.xyz, cb2[0].xyzx, cb2[4].xxxx
mul r9.xyz, cb2[1].xyzx, cb2[4].yyyy
mul r10.xyz, cb2[2].xyzx, cb2[4].zzzz
mul r11.xyz, r6.zzzz, r9.xyzx
mad r11.xyz, r6.yyyy, r8.xyzx, r11.xyzx
mad o0.xyz, r6.wwww, r10.xyzx, r11.xyzx
mul r6.yzw, r7.yyyy, r9.xxyz
mad r6.yzw, r7.xxxx, r8.xxyz, r6.yyzw
mad o1.xyz, r7.zzzz, r10.xyzx, r6.yzwy
mul o1.w, r7.w, cb2[4].w
mul r6.yzw, v0.yyyy, cb2[1].xxyz
mad r6.yzw, cb2[0].xxyz, v0.xxxx, r6.yyzw
mad r6.yzw, cb2[2].xxyz, v0.zzzz, r6.yyzw
add r7.xyz, r0.yzwy, cb2[3].xyzx
add r6.yzw, r6.yyzw, r7.xxyz
imul null, r6.x, r6.x, cb5[0].y
ld_indexable(buffer)(float,float,float,float) r7.xy, r6.xxxx, t1.xyzw
add r8.xyzw, -r0.zyzw, r6.zyzw
mul r8.xyzw, r8.xyzw, l(0.000976562500, 0.005000, 0.005000, 0.005000)
mad r8.xyzw, cb1[132].zzzz, l(-0.100000, -0.100000, -0.100000, -0.100000), r8.xyzw
add r8.xyzw, r8.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
frc r8.xyzw, r8.xyzw
mad r8.xyzw, r8.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
mad r9.xyzw, -|r8.xyzw|, l(2.000000, 2.000000, 2.000000, 2.000000), l(3.000000, 3.000000, 3.000000, 3.000000)
mul r8.xyzw, |r8.xyzw|, |r8.xyzw|
mul r0.yzw, r9.yyzw, r8.yyzw
dp3 r0.y, r0.yzwy, r0.yzwy
sqrt r0.y, r0.y
mad r0.y, r8.x, r9.x, r0.y
mul r0.y, r0.y, l(6.28318548)
sincos r6.x, r8.x, r0.y
mul r0.yz, r6.xxxx, l(0.000000, -10.000000, 0.000000, 0.000000)
mad r0.yz, r8.xxxx, l(0.000000, 0.000000, 10.000000, 0.000000), r0.yyzy
add r0.yz, r0.yyzy, l(0.000000, 0.000000, -10.000000, 0.000000)
mul r8.yz, r0.yyzy, cb6[5].wwww
mov r8.x, cb6[5].w
mad r0.yzw, r8.xxyz, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 1.000000, 1.000000, 1.000000)
add r6.x, -r7.y, l(1.000000)
add r6.x, r6.x, -cb6[5].y
mad r6.xyz, r0.yzwy, r6.xxxx, r6.yzwy
mov r6.w, l(1.000000)
dp4 r1.x, r6.xyzw, r1.xyzw
dp4 r1.y, r6.xyzw, r2.xyzw
dp4 r1.z, r6.xyzw, r3.xyzw
dp4 r1.w, r6.xyzw, r4.xyzw
if_nz cb0[0].x
  mov r2.x, icb[r0.x + 0].x
  mov r2.y, l(1.000000)
  dp2 o6.x, r1.xwxx, r2.xyxx
  mul r0.y, r5.x, l(0.500000)
  mul r0.z, r1.w, icb[r0.x + 0].x
  mad r0.w, -r5.x, l(0.500000), l(1.000000)
  mul r0.z, r0.w, r0.z
  mad r1.x, r1.x, r0.y, r0.z
else
  mov o6.x, l(0)
endif
movc r0.y, cb0[0].x, l(1), l(0)
imad o3.x, r0.y, l(0x80000000), r0.x
add r0.xyz, -r5.yzwy, r6.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
sqrt r2.x, r0.w
dp3 r2.y, r0.xyzx, cb1[52].xyzx
div r2.x, r2.x, r2.y
mul r2.x, r2.x, cb1[177].z
max r2.x, r2.x, l(0.000000)
rsq r2.y, r0.w
mul r0.w, r0.w, r2.y
mul r3.xyz, r0.xyzx, r2.yyyy
max r2.x, r2.x, cb4[85].w
lt r2.z, l(0.000000), r2.x
mul r2.w, r2.y, r2.x
mad r3.w, r2.w, r0.z, cb1[59].z
mad r2.w, -r2.w, r0.z, r0.z
mad r2.x, -r2.x, r2.y, l(1.000000)
mul r2.x, r0.w, r2.x
add r2.y, r3.w, -cb4[87].y
mul r2.y, r2.y, cb4[85].y
max r2.y, r2.y, l(-127.000000)
exp r2.y, -r2.y
mul r2.y, r2.y, cb4[87].x
movc r2.y, r2.z, r2.y, cb4[85].x
movc r2.x, r2.z, r2.x, r0.w
movc r2.z, r2.z, r2.w, r0.z
mul r2.z, r2.z, cb4[85].y
max r2.z, r2.z, l(-127.000000)
exp r2.w, -r2.z
add r2.w, -r2.w, l(1.000000)
div r2.w, r2.w, r2.z
mad r3.w, -r2.z, l(0.240226507), l(0.693147182)
lt r2.z, l(0.010000), |r2.z|
movc r2.z, r2.z, r2.w, r3.w
mul r2.y, r2.z, r2.y
mul r2.z, r2.x, r2.y
lt r4.xy, l(0.000000, 0.000000, 0.000000, 0.000000), cb4[87].zwzz
if_nz r4.x
  mad_sat r2.w, r0.w, cb4[91].x, cb4[91].y
  mul r4.xz, cb4[90].yyxy, l(1.000000, 0.000000, -1.000000, 0.000000)
  dp2 r5.x, r0.xyxx, r4.xzxx
  dp2 r5.y, r0.xyxx, cb4[90].xyxx
  mov r5.z, r0.z
  sample_l_indexable(texturecube)(float,float,float,float) r0.xyz, r5.xyzx, t0.xyzw, s0, l(0.000000)
  sample_l_indexable(texturecube)(float,float,float,float) r4.xzw, r5.xyzx, t0.xwyz, s0, cb4[91].z
  add r0.xyz, r0.xyzx, -r4.xzwx
  mad r0.xyz, r2.wwww, r0.xyzx, r4.xzwx
  mul r0.xyz, r0.xyzx, cb4[86].xyzx
else
  mov r0.xyz, cb4[86].xyzx
endif
ge r2.w, cb4[88].w, l(0.000000)
eq r3.w, cb4[87].z, l(0.000000)
and r2.w, r2.w, r3.w
dp3_sat r3.x, r3.xyzx, cb4[88].xyzx
log r3.x, r3.x
mul r3.x, r3.x, cb4[89].w
exp r3.x, r3.x
mul r3.xyz, r3.xxxx, cb4[89].xyzx
add r2.x, r2.x, -cb4[88].w
max r2.x, r2.x, l(0.000000)
mul r2.x, r2.x, r2.y
exp r2.x, -r2.x
min r2.x, r2.x, l(1.000000)
add r2.x, -r2.x, l(1.000000)
mul r3.xyz, r2.xxxx, r3.xyzx
and r3.xyz, r2.wwww, r3.xyzx
exp r2.x, -r2.z
min r2.x, r2.x, l(1.000000)
max r3.w, r2.x, cb4[86].w
lt r0.w, cb4[87].w, r0.w
and r0.w, r0.w, r4.y
movc r2.xyzw, r0.wwww, l(0,0,0,1.000000), r3.xyzw
add r0.w, -r2.w, l(1.000000)
mad o4.xyz, r0.xyzx, r0.wwww, r2.xyzx
mov o0.w, l(0)
mov o2.xy, r7.xyxx
mov o2.zw, l(0,0,0,0)
mov o4.w, r2.w
mov o5.xyzw, r1.xyzw
ret
// Approximately 0 instruction slots used
