// ---- Created with 3Dmigoto v1.3.16 on Thu Jul 18 19:02:14 2019
Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Buffer<float4> t1 : register(t1);

TextureCube<float4> t0 : register(t0);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb6 : register(b6)
{
  float4 cb6[12];
}

cbuffer cb5 : register(b5)
{
  float4 cb5[4];
}

cbuffer cb4 : register(b4)
{
  float4 cb4[164];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[4];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[178];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[92];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[4];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  uint v0 : SV_VertexID0,
  uint v1 : SV_InstanceID0,
  float2 v2 : ATTRIBUTE0,
  out float4 o0 : TEXCOORD0,
  out float4 o1 : TEXCOORD4,
  out float4 o2 : TEXCOORD5,
  out float4 o3 : PARTICLE_POSITION0,
  out float4 o4 : PARTICLE_VELOCITY0,
  out float4 o5 : TANGENTX0,
  out float4 o6 : TANGENTZ0,
  out uint o7 : PACKED_EYE_INDEX0,
  out float4 o8 : TEXCOORD7,
  out float4 o9 : SV_POSITION0,
  out float o10 : SV_ClipDistance1)
{
  const float4 icb[] = { { -1.000000, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 1.000000} };
// Needs manual fix for instruction:
// unknown dcl_: dcl_input_sgv v0.x, vertex_id
// Needs manual fix for instruction:
// unknown dcl_: dcl_input_sgv v1.x, instance_id
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = cb0[0].x ? 1 : 0;
  r0.y = (int)r0.x & asint(cb0[3].y);
  if (r0.y == 0) {
    r1.x = cb2[0].x;
    r1.y = cb2[1].x;
    r1.z = cb2[2].x;
    r1.w = cb2[3].x;
    r2.x = cb2[0].y;
    r2.y = cb2[1].y;
    r2.z = cb2[2].y;
    r2.w = cb2[3].y;
    r3.x = cb2[0].z;
    r3.y = cb2[1].z;
    r3.z = cb2[2].z;
    r3.w = cb2[3].z;
    r4.x = cb2[0].w;
    r4.y = cb2[1].w;
    r4.z = cb2[2].w;
    r4.w = cb2[3].w;
    r5.xyz = cb2[62].xyz;
    r0.z = cb2[163].y;
    r6.xyz = cb2[53].xyz;
    r7.xyz = cb2[54].xyz;
    r8.xyz = cb2[55].xyz;
    r9.xyz = cb2[56].xyz;
    r10.xyz = cb2[60].xyz;
  } else {
    r1.x = cb4[0].x;
    r1.y = cb4[1].x;
    r1.z = cb4[2].x;
    r1.w = cb4[3].x;
    r2.x = cb4[0].y;
    r2.y = cb4[1].y;
    r2.z = cb4[2].y;
    r2.w = cb4[3].y;
    r3.x = cb4[0].z;
    r3.y = cb4[1].z;
    r3.z = cb4[2].z;
    r3.w = cb4[3].z;
    r4.x = cb4[0].w;
    r4.y = cb4[1].w;
    r4.z = cb4[2].w;
    r4.w = cb4[3].w;
    r5.xyz = cb4[62].xyz;
    r0.z = cb4[163].y;
    r6.xyz = cb4[53].xyz;
    r7.xyz = cb4[54].xyz;
    r8.xyz = cb4[55].xyz;
    r9.xyz = cb4[56].xyz;
    r10.xyz = cb4[60].xyz;
  }
  r0.w = (uint)v1.x << 4;
  r5.w = (uint)v0.x >> 2;
  r0.w = (int)r0.w + (int)r5.w;
  r0.w = (int)r0.w + asint(cb0[3].x);
  r11.xy = t1.Load(r0.w).xy;
  r12.xyzw = t2.SampleLevel(s1_s, r11.xy, 0).xyzw;
  r13.xyz = t3.SampleLevel(s2_s, r11.xy, 0).xyz;
  r11.xyzw = t4.SampleLevel(s3_s, r11.xy, 0).xyzw;
  r0.w = cmp(1 >= r12.w);
  r0.w = r0.w ? 1.000000 : 0;
  r14.xyz = cb3[1].xyz * r13.yyy;
  r13.xyw = r13.xxx * cb3[0].xyz + r14.xyz;
  r13.xyz = r13.zzz * cb3[2].xyz + r13.xyw;
  r14.xyz = float3(0,0,9.99999975e-005) + r13.xyz;
  r5.w = dot(r14.xyz, r14.xyz);
  r5.w = rsqrt(r5.w);
  r14.xyz = r14.xyz * r5.www;
  r5.w = dot(r13.xyz, r13.xyz);
  r14.w = sqrt(r5.w);
  r13.xy = cb6[0].zw * r12.ww + cb6[0].xy;
  r13.xyzw = t5.SampleLevel(s4_s, r13.xy, 0).xyzw;
  r13.xyzw = r13.xyzw * cb6[1].xyzw + cb6[2].xyzw;
  o2.xyzw = cb5[3].xyzw * r13.xyzw;
  r13.xy = cb6[3].zw * r12.ww + cb6[3].xy;
  r13.xyz = t5.SampleLevel(s4_s, r13.xy, 0).xyz;
  r13.xyz = r13.xyz * cb6[4].xyz + cb6[5].xyz;
  r15.xy = cmp(r11.xy < float2(0.5,0.5));
  r15.zw = r15.xy ? float2(0,0) : float2(-0.5,-0.5);
  r11.xy = r15.zw + r11.xy;
  r11.xy = r11.xy + r11.xy;
  r13.xy = cb5[0].xy * r13.xy;
  r15.zw = cb6[6].xy * r14.ww;
  r15.zw = max(float2(1,1), r15.zw);
  r15.zw = min(cb6[6].zw, r15.zw);
  r11.xy = r13.xy * r11.xy;
  r11.xy = r11.xy * r15.zw;
  r11.xy = r11.xy * r0.ww;
  r13.xy = float2(1,1) + -v2.xy;
  r13.xy = r15.xy ? r13.xy : v2.xy;
  r15.x = frac(r13.z);
  r0.w = -r15.x + r13.z;
  r5.w = r0.w / cb6[7].x;
  r6.w = cmp(r5.w >= -r5.w);
  r5.w = frac(abs(r5.w));
  r5.w = r6.w ? r5.w : -r5.w;
  r16.x = cb6[7].x * r5.w;
  r0.w = cb6[7].z * r0.w;
  r16.y = floor(r0.w);
  r13.xy = r16.xy + r13.xy;
  o0.xy = cb6[7].zw * r13.xy;
  r0.w = cb6[10].x * r11.w;
  r0.w = r0.w * r12.w + r11.z;
  r13.xyz = cb3[1].xyz * r12.yyy;
  r13.xyz = cb3[0].xyz * r12.xxx + r13.xyz;
  r12.xyz = cb3[2].xyz * r12.zzz + r13.xyz;
  r5.xyz = cb3[3].xyz + r5.xyz;
  r5.xyz = r12.xyz + r5.xyz;
  r9.xyz = r9.xyz + -r7.xyz;
  r7.xyz = cb6[9].www * r9.xyz + r7.xyz;
  r8.xyz = r8.xyz + -r6.xyz;
  r6.xyz = cb6[9].www * r8.xyz + r6.xyz;
  r8.xyz = cb5[1].xyz + -r7.xyz;
  r7.xyz = cb5[1].www * r8.xyz + r7.xyz;
  r8.xyz = cb5[2].xyz + r6.xyz;
  r6.xyz = cb5[2].www * r8.xyz + -r6.xyz;
  r8.xyz = r10.zxy + -r5.zxy;
  r5.w = dot(r8.xyz, r8.xyz);
  r6.w = max(0.00999999978, r5.w);
  r6.w = sqrt(r6.w);
  r8.xyz = r8.xyz / r6.www;
  r6.w = cmp(0 < cb6[9].x);
  if (r6.w != 0) {
    r5.w = saturate(r5.w * cb6[9].y + -cb6[9].z);
    r9.xyz = float3(0,1,0) * r8.xyz;
    r9.xyz = r8.zxy * float3(1,0,0) + -r9.xyz;
    r6.w = dot(r9.xy, r9.xy);
    r6.w = max(0.00999999978, r6.w);
    r6.w = sqrt(r6.w);
    r9.xyz = r9.xyz / r6.www;
    r12.xyz = r9.yzx * r8.xyz;
    r12.xyz = r8.zxy * r9.zxy + -r12.xyz;
    r9.xyz = r9.xyz + -r7.xyz;
    r9.xyz = r5.www * r9.xyz + r7.xyz;
    r6.w = dot(r9.xyz, r9.xyz);
    r6.w = rsqrt(r6.w);
    r9.xyz = r9.xyz * r6.www;
    r12.xyz = r12.xyz + -r6.xyz;
    r12.xyz = r5.www * r12.xyz + r6.xyz;
    r5.w = dot(r12.xyz, r12.xyz);
    r5.w = rsqrt(r5.w);
    r12.xyz = r12.xyz * r5.www;
  } else {
    r13.xyz = r8.xyz * r14.yzx;
    r13.xyz = r8.zxy * r14.zxy + -r13.xyz;
    r5.w = dot(r13.xyz, r13.xyz);
    r5.w = max(0.00999999978, r5.w);
    r5.w = sqrt(r5.w);
    r13.xyz = r13.xyz / r5.www;
    r16.xyz = cb5[1].zxy * r8.zxy;
    r16.xyz = cb5[1].yzx * r8.xyz + -r16.xyz;
    r5.w = dot(r16.xyz, r16.xyz);
    r5.w = max(0.00999999978, r5.w);
    r5.w = sqrt(r5.w);
    r16.xyz = r16.xyz / r5.www;
    r17.xyz = cmp(float3(0,0,0) < cb6[8].yzw);
    r18.xyz = float3(0,1,0) * r8.xyz;
    r18.xyz = r8.zxy * float3(1,0,0) + -r18.xyz;
    r5.w = dot(r18.xy, r18.xy);
    r5.w = max(0.00999999978, r5.w);
    r5.w = sqrt(r5.w);
    r18.xyz = r18.xyz / r5.www;
    r19.xyz = r18.yzx * r8.xyz;
    r8.xyz = r8.zxy * r18.zxy + -r19.xyz;
    r7.xyz = r17.zzz ? r18.xyz : r7.xyz;
    r6.xyz = r17.zzz ? r8.xyz : r6.xyz;
    r7.xyz = r17.yyy ? cb5[1].xyz : r7.xyz;
    r6.xyz = r17.yyy ? -r16.xyz : r6.xyz;
    r9.xyz = r17.xxx ? r13.xyz : r7.xyz;
    r12.xyz = r17.xxx ? -r14.xyz : r6.xyz;
  }
  r0.w = r0.w * 6.28318548 + cb6[10].y;
  sincos(r0.w, r6.x, r7.x);
  r6.yzw = r7.xxx * r9.xyz;
  r6.yzw = r6.xxx * r12.xyz + r6.yzw;
  r7.yzw = r6.xxx * r9.zxy;
  r7.xyz = r7.xxx * r12.zxy + -r7.yzw;
  r8.xy = cb6[11].xy + v2.xy;
  r8.xy = r11.xy * r8.xy;
  r8.yzw = r8.yyy * r7.yzx;
  r8.xyz = r8.xxx * r6.yzw + r8.yzw;
  r9.xyz = float3(9.99999975e-005,9.99999975e-005,9.99999975e-005) + -cb2[131].xyz;
  r0.w = dot(r9.xyz, r9.xyz);
  r0.w = rsqrt(r0.w);
  r9.xyz = r9.xyz * r0.www;
  r0.w = dot(r8.xyz, r8.xyz);
  r0.w = rsqrt(r0.w);
  r12.xyz = r8.xyz * r0.www;
  r0.w = dot(r9.xyz, r12.xyz);
  r0.w = 100000 * r0.w;
  r0.w = max(-1, r0.w);
  r15.z = min(1, r0.w);
  r9.xyz = -cb2[131].xyz * r15.zzz;
  r8.xyz = r9.xyz * cb6[10].zzz + r8.xyz;
  r8.xyz = r8.xyz + r5.xyz;
  r0.w = min(r11.x, r11.y);
  o3.w = 0.5 * r0.w;
  r8.w = 1;
  r1.x = dot(r8.xyzw, r1.xyzw);
  r1.y = dot(r8.xyzw, r2.xyzw);
  r1.z = dot(r8.xyzw, r3.xyzw);
  r1.w = dot(r8.xyzw, r4.xyzw);
  if (cb0[0].x != 0) {
    r2.x = icb[r0.y+0].x;
    r2.y = 1;
    o10.x = dot(r1.xw, r2.xy);
    r0.w = 0.5 * r0.z;
    r2.x = icb[r0.y+0].x * r1.w;
    r0.z = -r0.z * 0.5 + 1;
    r0.z = r2.x * r0.z;
    r1.x = r1.x * r0.w + r0.z;
  } else {
    o10.x = 0;
  }
  r2.xyz = r7.zxy * r6.wyz;
  r2.xyz = r6.zwy * r7.xyz + -r2.xyz;
  r0.z = dot(r2.xyz, r2.xyz);
  r0.z = rsqrt(r0.z);
  r2.xyz = r2.xyz * r0.zzz;
  r3.xyz = r7.xyz * r2.yzx;
  r3.xyz = r7.zxy * r2.zxy + -r3.xyz;
  r0.z = dot(r3.xyz, r6.yzw);
  r0.w = cmp(0 < r0.z);
  r0.z = cmp(r0.z < 0);
  r0.z = (int)-r0.w + (int)r0.z;
  o6.w = (int)r0.z;
  o7.x = mad((int)r0.x, 0x80000000, (int)r0.y);
  r0.xyz = r8.xyz + -r10.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r2.w = sqrt(r0.w);
  r3.x = dot(r0.xyz, cb2[52].xyz);
  r2.w = r2.w / r3.x;
  r2.w = cb2[177].z * r2.w;
  r2.w = max(0, r2.w);
  r3.x = rsqrt(r0.w);
  r0.w = r3.x * r0.w;
  r3.yzw = r3.xxx * r0.xyz;
  r2.w = max(cb1[85].w, r2.w);
  r4.x = cmp(0 < r2.w);
  r4.y = r2.w * r3.x;
  r4.z = r4.y * r0.z + cb2[59].z;
  r4.y = -r4.y * r0.z + r0.z;
  r2.w = -r2.w * r3.x + 1;
  r2.w = r2.w * r0.w;
  r3.x = -cb1[87].y + r4.z;
  r3.x = cb1[85].y * r3.x;
  r3.x = max(-127, r3.x);
  r3.x = exp2(-r3.x);
  r3.x = cb1[87].x * r3.x;
  r3.x = r4.x ? r3.x : cb1[85].x;
  r2.w = r4.x ? r2.w : r0.w;
  r4.x = r4.x ? r4.y : r0.z;
  r4.x = cb1[85].y * r4.x;
  r4.x = max(-127, r4.x);
  r4.y = exp2(-r4.x);
  r4.y = 1 + -r4.y;
  r4.y = r4.y / r4.x;
  r4.z = -r4.x * 0.240226507 + 0.693147182;
  r4.x = cmp(0.00999999978 < abs(r4.x));
  r4.x = r4.x ? r4.y : r4.z;
  r3.x = r4.x * r3.x;
  r4.x = r3.x * r2.w;
  r4.yz = cmp(float2(0,0) < cb1[87].zw);
  if (r4.y != 0) {
    r4.y = saturate(r0.w * cb1[91].x + cb1[91].y);
    r7.xy = float2(1,-1) * cb1[90].yx;
    r7.x = dot(r0.xy, r7.xy);
    r7.y = dot(r0.xy, cb1[90].xy);
    r7.z = r0.z;
    r0.xyz = t0.SampleLevel(s0_s, r7.xyz, 0).xyz;
    r7.xyz = t0.SampleLevel(s0_s, r7.xyz, cb1[91].z).xyz;
    r0.xyz = -r7.xyz + r0.xyz;
    r0.xyz = r4.yyy * r0.xyz + r7.xyz;
    r0.xyz = cb1[86].xyz * r0.xyz;
  } else {
    r0.xyz = cb1[86].xyz;
  }
  r4.y = cmp(cb1[88].w >= 0);
  r4.w = cmp(cb1[87].z == 0.000000);
  r4.y = r4.w ? r4.y : 0;
  r3.y = saturate(dot(r3.yzw, cb1[88].xyz));
  r3.y = log2(r3.y);
  r3.y = cb1[89].w * r3.y;
  r3.y = exp2(r3.y);
  r3.yzw = cb1[89].xyz * r3.yyy;
  r2.w = -cb1[88].w + r2.w;
  r2.w = max(0, r2.w);
  r2.w = r3.x * r2.w;
  r2.w = exp2(-r2.w);
  r2.w = min(1, r2.w);
  r2.w = 1 + -r2.w;
  r3.xyz = r3.yzw * r2.www;
  r3.xyz = r4.yyy ? r3.xyz : 0;
  r2.w = exp2(-r4.x);
  r2.w = min(1, r2.w);
  r3.w = max(cb1[86].w, r2.w);
  r0.w = cmp(cb1[87].w < r0.w);
  r0.w = r0.w ? r4.z : 0;
  r3.xyzw = r0.wwww ? float4(0,0,0,1) : r3.xyzw;
  r0.w = 1 + -r3.w;
  o8.xyz = r0.xyz * r0.www + r3.xyz;
  o0.zw = float2(0,0);
  o3.xyz = r5.xyz;
  o4.xyzw = r14.xyzw;
  o5.xyz = r6.yzw;
  o5.w = 0;
  o6.xyz = r2.xyz;
  o8.w = r3.w;
  o9.xyzw = r1.xyzw;
  o1.y = r12.w;
  o1.xz = r15.xz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\marco\Desktop\3Dmigoto Fullbright for FNAF VR\ShaderCache\e3130bf4397ed64b-vs_replace.txt(73,14-15): warning X3578: Output value 'o1' is not completely initialized
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
