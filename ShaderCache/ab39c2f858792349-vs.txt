//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jul 18 00:45:01 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// ATTRIBUTE                0   xyzw        0     NONE   float   xyz
// SV_VertexID              0   x           1   VERTID    uint   x
// SV_InstanceID            0   x           2   INSTID    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyzw
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// PACKED_EYE_INDEX         0   x           2     NONE    uint   x
// TEXCOORD                 7   xyzw        3     NONE   float   xyzw
// SV_POSITION              0   xyzw        4      POS   float   xyzw
// SV_ClipDistance          1   x           5  CLIPDST   float   x
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -1.000000, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 1.000000} }
dcl_constantbuffer cb0[8], immediateIndexed
dcl_constantbuffer cb1[92], immediateIndexed
dcl_constantbuffer cb2[178], immediateIndexed
dcl_constantbuffer cb3[5], immediateIndexed
dcl_constantbuffer cb4[164], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texturecube (float,float,float,float) t0
dcl_resource_buffer (float,float,float,float) t1
dcl_input v0.xyz
dcl_input_sgv v1.x, vertex_id
dcl_input_sgv v2.x, instance_id
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.x
dcl_output o3.xyzw
dcl_output_siv o4.xyzw, position
dcl_output_siv o5.x, clip_distance
dcl_temps 12
and r0.x, v2.x, l(1)
if_z r0.x
  mov r1.x, cb2[0].x
  mov r1.y, cb2[1].x
  mov r1.z, cb2[2].x
  mov r1.w, cb2[3].x
  mov r2.x, cb2[0].y
  mov r2.y, cb2[1].y
  mov r2.z, cb2[2].y
  mov r2.w, cb2[3].y
  mov r3.x, cb2[0].z
  mov r3.y, cb2[1].z
  mov r3.z, cb2[2].z
  mov r3.w, cb2[3].z
  mov r4.x, cb2[0].w
  mov r4.y, cb2[1].w
  mov r4.z, cb2[2].w
  mov r4.w, cb2[3].w
  mov r0.yzw, cb2[62].xxyz
  mov r5.x, cb2[163].y
  mov r5.yzw, cb2[60].xxyz
else
  mov r1.x, cb4[0].x
  mov r1.y, cb4[1].x
  mov r1.z, cb4[2].x
  mov r1.w, cb4[3].x
  mov r2.x, cb4[0].y
  mov r2.y, cb4[1].y
  mov r2.z, cb4[2].y
  mov r2.w, cb4[3].y
  mov r3.x, cb4[0].z
  mov r3.y, cb4[1].z
  mov r3.z, cb4[2].z
  mov r3.w, cb4[3].z
  mov r4.x, cb4[0].w
  mov r4.y, cb4[1].w
  mov r4.z, cb4[2].w
  mov r4.w, cb4[3].w
  mov r0.yzw, cb4[62].xxyz
  mov r5.x, cb4[163].y
  mov r5.yzw, cb4[60].xxyz
endif
iadd r6.x, v1.x, cb0[7].y
ishl r6.y, r6.x, l(1)
ld_indexable(buffer)(float,float,float,float) r6.yzw, r6.yyyy, t1.wxyz
bfi r6.x, l(31), l(1), r6.x, l(1)
ld_indexable(buffer)(float,float,float,float) r7.xyzw, r6.xxxx, t1.xyzw
mul r8.xyz, r6.yzwy, r7.yzxy
mad r6.xyz, r7.xyzx, r6.zwyz, -r8.xyzx
mul r6.xyz, r7.wwww, r6.xyzx
mul r8.xyz, r7.yzxy, r6.xyzx
mad r6.xyz, r6.zxyz, r7.zxyz, -r8.xyzx
mul r6.xyz, r7.wwww, r6.xyzx
mul r8.xyz, cb3[0].xyzx, cb3[4].xxxx
mul r9.xyz, cb3[1].xyzx, cb3[4].yyyy
mul r10.xyz, cb3[2].xyzx, cb3[4].zzzz
mul r11.xyz, r6.yyyy, r9.xyzx
mad r6.xyw, r6.xxxx, r8.xyxz, r11.xyxz
mad o0.xyz, r6.zzzz, r10.xyzx, r6.xywx
mul r6.xyz, r7.yyyy, r9.xyzx
mad r6.xyz, r7.xxxx, r8.xyzx, r6.xyzx
mad o1.xyz, r7.zzzz, r10.xyzx, r6.xyzx
mul o1.w, r7.w, cb3[4].w
mul r6.xyz, v0.yyyy, cb3[1].xyzx
mad r6.xyz, cb3[0].xyzx, v0.xxxx, r6.xyzx
mad r6.xyz, cb3[2].xyzx, v0.zzzz, r6.xyzx
add r0.yzw, r0.yyzw, cb3[3].xxyz
add r6.xyz, r0.yzwy, r6.xyzx
mov r6.w, l(1.000000)
dp4 r1.x, r6.xyzw, r1.xyzw
dp4 r1.y, r6.xyzw, r2.xyzw
dp4 r1.z, r6.xyzw, r3.xyzw
dp4 r1.w, r6.xyzw, r4.xyzw
if_nz cb0[0].x
  mov r2.x, icb[r0.x + 0].x
  mov r2.y, l(1.000000)
  dp2 o5.x, r1.xwxx, r2.xyxx
  mul r0.y, r5.x, l(0.500000)
  mul r0.z, r1.w, icb[r0.x + 0].x
  mad r0.w, -r5.x, l(0.500000), l(1.000000)
  mul r0.z, r0.w, r0.z
  mad r1.x, r1.x, r0.y, r0.z
else
  mov o5.x, l(0)
endif
movc r0.y, cb0[0].x, l(1), l(0)
imad o2.x, r0.y, l(0x80000000), r0.x
add r0.xyz, -r5.yzwy, r6.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
sqrt r2.x, r0.w
dp3 r2.y, r0.xyzx, cb2[52].xyzx
div r2.x, r2.x, r2.y
mul r2.x, r2.x, cb2[177].z
max r2.x, r2.x, l(0.000000)
rsq r2.y, r0.w
mul r0.w, r0.w, r2.y
mul r3.xyz, r0.xyzx, r2.yyyy
max r2.x, r2.x, cb1[85].w
lt r2.z, l(0.000000), r2.x
mul r2.w, r2.y, r2.x
mad r3.w, r2.w, r0.z, cb2[59].z
mad r2.w, -r2.w, r0.z, r0.z
mad r2.x, -r2.x, r2.y, l(1.000000)
mul r2.x, r0.w, r2.x
add r2.y, r3.w, -cb1[87].y
mul r2.y, r2.y, cb1[85].y
max r2.y, r2.y, l(-127.000000)
exp r2.y, -r2.y
mul r2.y, r2.y, cb1[87].x
movc r2.y, r2.z, r2.y, cb1[85].x
movc r2.x, r2.z, r2.x, r0.w
movc r2.z, r2.z, r2.w, r0.z
mul r2.z, r2.z, cb1[85].y
max r2.z, r2.z, l(-127.000000)
exp r2.w, -r2.z
add r2.w, -r2.w, l(1.000000)
div r2.w, r2.w, r2.z
mad r3.w, -r2.z, l(0.240226507), l(0.693147182)
lt r2.z, l(0.010000), |r2.z|
movc r2.z, r2.z, r2.w, r3.w
mul r2.y, r2.z, r2.y
mul r2.z, r2.x, r2.y
lt r4.xy, l(0.000000, 0.000000, 0.000000, 0.000000), cb1[87].zwzz
if_nz r4.x
  mad_sat r2.w, r0.w, cb1[91].x, cb1[91].y
  mul r4.xz, cb1[90].yyxy, l(1.000000, 0.000000, -1.000000, 0.000000)
  dp2 r5.x, r0.xyxx, r4.xzxx
  dp2 r5.y, r0.xyxx, cb1[90].xyxx
  mov r5.z, r0.z
  sample_l_indexable(texturecube)(float,float,float,float) r0.xyz, r5.xyzx, t0.xyzw, s0, l(0.000000)
  sample_l_indexable(texturecube)(float,float,float,float) r4.xzw, r5.xyzx, t0.xwyz, s0, cb1[91].z
  add r0.xyz, r0.xyzx, -r4.xzwx
  mad r0.xyz, r2.wwww, r0.xyzx, r4.xzwx
  mul r0.xyz, r0.xyzx, cb1[86].xyzx
else
  mov r0.xyz, cb1[86].xyzx
endif
ge r2.w, cb1[88].w, l(0.000000)
eq r3.w, cb1[87].z, l(0.000000)
and r2.w, r2.w, r3.w
dp3_sat r3.x, r3.xyzx, cb1[88].xyzx
log r3.x, r3.x
mul r3.x, r3.x, cb1[89].w
exp r3.x, r3.x
mul r3.xyz, r3.xxxx, cb1[89].xyzx
add r2.x, r2.x, -cb1[88].w
max r2.x, r2.x, l(0.000000)
mul r2.x, r2.x, r2.y
exp r2.x, -r2.x
min r2.x, r2.x, l(1.000000)
add r2.x, -r2.x, l(1.000000)
mul r3.xyz, r2.xxxx, r3.xyzx
and r3.xyz, r2.wwww, r3.xyzx
exp r2.x, -r2.z
min r2.x, r2.x, l(1.000000)
max r3.w, r2.x, cb1[86].w
lt r0.w, cb1[87].w, r0.w
and r0.w, r0.w, r4.y
movc r2.xyzw, r0.wwww, l(0,0,0,1.000000), r3.xyzw
add r0.w, -r2.w, l(1.000000)
mad o3.xyz, r0.xyzx, r0.wwww, r2.xyzx
mov o0.w, l(0)
mov o3.w, r2.w
mov o4.xyzw, r1.xyzw
ret
// Approximately 0 instruction slots used
