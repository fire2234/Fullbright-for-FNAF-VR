// ---- Created with 3Dmigoto v1.3.16 on Wed Oct 23 22:09:06 2019
Texture2D<float4> t0 : register(t0);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[19];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[164];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[164];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : TEXCOORD10,
  float4 v1 : TEXCOORD11,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD4,
  uint v4 : PACKED_EYE_INDEX0,
  float4 v5 : TEXCOORD7,
  float3 v6 : TEXCOORD9,
  float w6 : PN_TessellationMultiplier0,
  float4 v7 : VS_To_DS_Position0,
  float4 v8 : PN_POSITION0,
  float4 v9 : PN_POSITION1,
  float4 v10 : PN_POSITION2,
  float3 v11 : PN_DisplacementScales0,
  float w11 : PN_WorldDisplacementMultiplier0,
  out float4 o0 : TEXCOORD10,
  out float4 o1 : TEXCOORD11,
  out float4 o2 : TEXCOORD0,
  out float4 o3 : TEXCOORD4,
  out uint o4 : PACKED_EYE_INDEX0,
  out float4 o5 : TEXCOORD7,
  out float3 o6 : TEXCOORD9,
  out float4 o7 : SV_POSITION0,
  out float o8 : SV_ClipDistance1)
{
// Needs manual fix for instruction:
// unknown dcl_: dcl_input_control_point_count 3
// Needs manual fix for instruction:
// unknown dcl_: dcl_tessellator_domain domain_tri
  const float4 icb[] = { { -1.000000, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 1.000000} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = 1 & (int)vicp[0][4].x;
  if (r0.x == 0) {
    r1.x = cb0[0].x;
    r1.y = cb0[1].x;
    r1.z = cb0[2].x;
    r1.w = cb0[3].x;
    r2.x = cb0[0].y;
    r2.y = cb0[1].y;
    r2.z = cb0[2].y;
    r2.w = cb0[3].y;
    r3.x = cb0[0].z;
    r3.y = cb0[1].z;
    r3.z = cb0[2].z;
    r3.w = cb0[3].z;
    r4.x = cb0[0].w;
    r4.y = cb0[1].w;
    r4.z = cb0[2].w;
    r4.w = cb0[3].w;
    r0.y = cb0[163].y;
  } else {
    r1.x = cb1[0].x;
    r1.y = cb1[1].x;
    r1.z = cb1[2].x;
    r1.w = cb1[3].x;
    r2.x = cb1[0].y;
    r2.y = cb1[1].y;
    r2.z = cb1[2].y;
    r2.w = cb1[3].y;
    r3.x = cb1[0].z;
    r3.y = cb1[1].z;
    r3.z = cb1[2].z;
    r3.w = cb1[3].z;
    r4.x = cb1[0].w;
    r4.y = cb1[1].w;
    r4.z = cb1[2].w;
    r4.w = cb1[3].w;
    r0.y = cb1[163].y;
  }
  r5.xyz = vDomain.xyz * vDomain.xyz;
  r6.xyz = float3(3,3,3) * r5.xyz;
  r7.xyzw = vicp[0][8].xyzw * r5.xxxx;
  r8.xyzw = vicp[1][8].xyzw * r5.yyyy;
  r8.xyzw = vDomain.yyyy * r8.xyzw;
  r7.xyzw = r7.xyzw * vDomain.xxxx + r8.xyzw;
  r5.xyzw = vicp[2][8].xyzw * r5.zzzz;
  r5.xyzw = r5.xyzw * vDomain.zzzz + r7.xyzw;
  r7.xyzw = vicp[0][9].xyzw * r6.xxxx;
  r5.xyzw = r7.xyzw * vDomain.yyyy + r5.xyzw;
  r7.xyzw = vicp[0][10].xyzw * r6.yyyy;
  r5.xyzw = r7.xyzw * vDomain.xxxx + r5.xyzw;
  r7.xyzw = vicp[1][9].xyzw * r6.yyyy;
  r5.xyzw = r7.xyzw * vDomain.zzzz + r5.xyzw;
  r7.xyzw = vicp[1][10].xyzw * r6.zzzz;
  r5.xyzw = r7.xyzw * vDomain.yyyy + r5.xyzw;
  r7.xyzw = vicp[2][9].xyzw * r6.zzzz;
  r5.xyzw = r7.xyzw * vDomain.xxxx + r5.xyzw;
  r6.xyzw = vicp[2][10].xyzw * r6.xxxx;
  r5.xyzw = r6.xyzw * vDomain.zzzz + r5.xyzw;
  r6.xyzw = vDomain.zzzz * vpc4.xyzw;
  r6.xyzw = vDomain.xxxx * r6.xyzw;
  r6.xyzw = vDomain.yyyy * r6.xyzw;
  r5.xyzw = r6.xyzw * float4(6,6,6,6) + r5.xyzw;
  r6.xyz = vicp[1][0].xyz * vDomain.yyy;
  r6.xyz = vicp[0][0].xyz * vDomain.xxx + r6.xyz;
  r7.xyzw = vicp[1][1].xyzw * vDomain.yyyy;
  r7.xyzw = vicp[0][1].xyzw * vDomain.xxxx + r7.xyzw;
  r8.xyzw = vicp[1][3].xyzw * vDomain.yyyy;
  r8.xyzw = vicp[0][3].xyzw * vDomain.xxxx + r8.xyzw;
  r9.xyzw = vicp[1][2].xyzw * vDomain.yyyy;
  r9.xyzw = vicp[0][2].xyzw * vDomain.xxxx + r9.xyzw;
  r10.xyzw = vicp[1][5].xyzw * vDomain.yyyy;
  r10.xyzw = vicp[0][5].xyzw * vDomain.xxxx + r10.xyzw;
  r11.xyz = vicp[1][6].xyz * vDomain.yyy;
  r11.xyz = vicp[0][6].xyz * vDomain.xxx + r11.xyz;
  o0.xyz = vicp[2][0].xyz * vDomain.zzz + r6.xyz;
  r6.xyzw = vicp[2][1].xyzw * vDomain.zzzz + r7.xyzw;
  o3.xyzw = vicp[2][3].xyzw * vDomain.zzzz + r8.xyzw;
  r7.xyzw = vicp[2][2].xyzw * vDomain.zzzz + r9.xyzw;
  o5.xyzw = vicp[2][5].xyzw * vDomain.zzzz + r10.xyzw;
  o6.xyz = vicp[2][6].xyz * vDomain.zzz + r11.xyz;
  r0.z = cb2[18].y * cb0[132].z;
  r8.xyzw = float4(20,2,20,2) * r7.xyxy;
  r9.xyzw = r0.zzzz * float4(0.100000001,0.100000001,-0.100000001,-0.100000001) + r8.zwzw;
  r10.xyz = t0.SampleLevel(s0_s, r9.xy, -1).xyz;
  r9.xy = float2(0.418099999,0.354799986) + r9.zw;
  r9.xyz = t0.SampleLevel(s0_s, r9.xy, -1).xyz;
  r9.xyz = r10.xyz + r9.xyz;
  r8.xyzw = r0.zzzz * float4(-0.100000001,0.100000001,0.100000001,-0.100000001) + r8.xyzw;
  r8.xyzw = float4(0.864861012,0.148384005,0.651340008,0.751637995) + r8.xyzw;
  r10.xyz = t0.SampleLevel(s0_s, r8.xy, -1).xyz;
  r8.xyz = t0.SampleLevel(s0_s, r8.zw, -1).xyz;
  r8.xyz = r10.xyz + r8.xyz;
  r8.xyz = r9.xyz + r8.xyz;
  r8.xyz = cb2[18].zzz * r8.xyz;
  r8.xyz = r8.xyz * r6.xyz;
  r8.xyz = float3(0.25,0.25,0.25) * r8.xyz;
  r8.xyz = cb2[17].zzz * -r8.xyz + r8.xyz;
  r0.z = vicp[1][11].w * vDomain.y;
  r0.z = vicp[0][11].w * vDomain.x + r0.z;
  r0.z = vicp[2][11].w * vDomain.z + r0.z;
  r5.xyz = r8.xyz * r0.zzz + r5.xyz;
  r1.x = dot(r5.xyzw, r1.xyzw);
  r1.y = dot(r5.xyzw, r2.xyzw);
  r1.z = dot(r5.xyzw, r3.xyzw);
  r1.w = dot(r5.xyzw, r4.xyzw);
  r0.z = (uint)vicp[0][4].x >> 1;
  if (r0.z != 0) {
    r2.x = icb[r0.x+0].x;
    r2.y = 1;
    o8.x = dot(r1.xw, r2.xy);
    r0.z = 0.5 * r0.y;
    r0.x = icb[r0.x+0].x * r1.w;
    r0.y = -r0.y * 0.5 + 1;
    r0.x = r0.x * r0.y;
    r1.x = r1.x * r0.z + r0.x;
  } else {
    o8.x = 0;
  }
  o1.xyzw = r6.xyzw;
  o2.xyzw = r7.xyzw;
  o7.xyzw = r1.xyzw;
  o4.x = vicp[0][4].x;
  return;
}