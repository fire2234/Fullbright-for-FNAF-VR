//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jul 18 00:53:24 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyz
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// PACKED_EYE_INDEX         0   x           2     NONE    uint   x
// TEXCOORD                 7   xyzw        3     NONE   float   xyzw
// SV_Position              0   xyzw        4      POS   float   xyzw
// SV_IsFrontFace           0   x           5    FFACE    uint
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer cb0[32], immediateIndexed
dcl_constantbuffer cb1[182], immediateIndexed
dcl_constantbuffer cb2[17], immediateIndexed
dcl_constantbuffer cb3[153], immediateIndexed
dcl_constantbuffer cb4[92], dynamicIndexed
dcl_constantbuffer cb5[6], immediateIndexed
dcl_constantbuffer cb6[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture3d (uint,uint,uint,uint) t0
dcl_resource_texture3d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_buffer (float,float,float,float) t3
dcl_resource_buffer (uint,uint,uint,uint) t4
dcl_resource_buffer (uint,uint,uint,uint) t5
dcl_resource_buffer (float,float,float,float) t6
dcl_resource_buffer (uint,uint,uint,uint) t7
dcl_resource_buffer (uint,uint,uint,uint) t8
dcl_resource_texturecubearray (float,float,float,float) t9
dcl_resource_texture3d (float,float,float,float) t10
dcl_input_ps linear centroid v0.xyz
dcl_input_ps linear centroid v1.xyzw
dcl_input_ps constant v2.x
dcl_input_ps linear v3.xyzw
dcl_input_ps_siv linear noperspective v4.xyzw, position
dcl_output o0.xyzw
dcl_temps 23
and r0.x, v2.x, l(1)
if_z r0.x
  mov r1.x, cb1[4].x
  mov r1.y, cb1[5].x
  mov r1.z, cb1[6].x
  mov r1.w, cb1[7].x
  mov r2.x, cb1[4].y
  mov r2.y, cb1[5].y
  mov r2.z, cb1[6].y
  mov r2.w, cb1[7].y
  mov r3.x, cb1[4].w
  mov r3.y, cb1[5].w
  mov r3.z, cb1[6].w
  mov r3.w, cb1[7].w
  mov r4.x, cb1[40].x
  mov r4.y, cb1[41].x
  mov r4.z, cb1[42].x
  mov r4.w, cb1[43].x
  mov r5.x, cb1[40].y
  mov r5.y, cb1[41].y
  mov r5.z, cb1[42].y
  mov r5.w, cb1[43].y
  mov r6.x, cb1[40].z
  mov r6.y, cb1[41].z
  mov r6.z, cb1[42].z
  mov r6.w, cb1[43].z
  mov r7.x, cb1[40].w
  mov r7.y, cb1[41].w
  mov r7.z, cb1[42].w
  mov r7.w, cb1[43].w
  mov r0.y, cb1[128].w
  mov r0.zw, cb1[129].xxxy
  mov r8.x, cb1[152].w
  mov r8.yzw, cb1[62].xxyz
  mov r9.xyz, cb1[128].xyzx
  mov r10.xy, cb1[121].xyxx
else
  mov r1.x, cb3[4].x
  mov r1.y, cb3[5].x
  mov r1.z, cb3[6].x
  mov r1.w, cb3[7].x
  mov r2.x, cb3[4].y
  mov r2.y, cb3[5].y
  mov r2.z, cb3[6].y
  mov r2.w, cb3[7].y
  mov r3.x, cb3[4].w
  mov r3.y, cb3[5].w
  mov r3.z, cb3[6].w
  mov r3.w, cb3[7].w
  mov r4.x, cb3[40].x
  mov r4.y, cb3[41].x
  mov r4.z, cb3[42].x
  mov r4.w, cb3[43].x
  mov r5.x, cb3[40].y
  mov r5.y, cb3[41].y
  mov r5.z, cb3[42].y
  mov r5.w, cb3[43].y
  mov r6.x, cb3[40].z
  mov r6.y, cb3[41].z
  mov r6.z, cb3[42].z
  mov r6.w, cb3[43].z
  mov r7.x, cb3[40].w
  mov r7.y, cb3[41].w
  mov r7.z, cb3[42].w
  mov r7.w, cb3[43].w
  mov r0.y, cb3[128].w
  mov r0.zw, cb3[129].xxxy
  mov r8.x, cb3[152].w
  mov r8.yzw, cb3[62].xxyz
  mov r9.xyz, cb3[128].xyzx
  mov r10.xy, cb3[121].xyxx
endif
mul r11.xyz, v0.yzxy, v1.zxyz
mad r11.xyz, v1.yzxy, v0.zxyz, -r11.xyzx
mul r11.xyz, r11.xyzx, v1.wwww
mov r12.xyz, v4.xyzx
mov r12.w, l(1.000000)
dp4 r4.x, r12.xyzw, r4.xyzw
dp4 r4.y, r12.xyzw, r5.xyzw
dp4 r4.z, r12.xyzw, r6.xyzw
dp4 r4.w, r12.xyzw, r7.xyzw
div r4.xyz, r4.xyzx, r4.wwww
add r5.xyz, -r8.yzwy, r4.xyzx
dp3 r4.w, -r4.xyzx, -r4.xyzx
rsq r4.w, r4.w
mul r4.xyz, r4.wwww, -r4.xyzx
mad r6.xyz, r0.yyyy, l(0.000000, 0.000000, 1.000000, 0.000000), r9.xyzx
dp3 r0.y, r6.xyzx, r6.xyzx
rsq r0.y, r0.y
mul r6.xyz, r0.yyyy, r6.xyzx
mul r7.xyz, r11.xyzx, r6.yyyy
mad r6.xyw, r6.xxxx, v0.xyxz, r7.xyxz
mad r6.xyz, r6.zzzz, v1.xyzx, r6.xywx
dp3 r0.y, r6.xyzx, r6.xyzx
rsq r0.y, r0.y
mul r6.xyz, r0.yyyy, r6.xyzx
mov_sat r7.xyz, cb6[4].xyzx
mov_sat r9.xyw, cb6[5].xyxz
mad r0.y, r9.y, r0.w, r0.z
lt r0.z, l(0.000000), cb2[12].z
if_nz r0.z
  mad r8.yzw, r5.xxyz, cb1[178].xxyz, cb1[179].xxyz
  max r8.yzw, r8.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r8.yzw, r8.yyzw, l(0.000000, 0.990000, 0.990000, 0.990000)
  mul r8.yzw, r8.yyzw, cb1[180].xxyz
  ftoi r11.xyz, r8.yzwy
  mov r11.w, l(0)
  ld_indexable(texture3d)(uint,uint,uint,uint) r11.xyzw, r11.xyzw, t0.xyzw
  utof r11.xyzw, r11.xyzw
  add r0.z, cb1[180].w, l(1.000000)
  div r8.yzw, r8.yyzw, r11.wwww
  frc r8.yzw, r8.yyzw
  mul r8.yzw, r8.yyzw, cb1[180].wwww
  mad r8.yzw, r11.xxyz, r0.zzzz, r8.yyzw
  add r8.yzw, r8.yyzw, l(0.000000, 0.500000, 0.500000, 0.500000)
  mul r8.yzw, r8.yyzw, cb1[181].xxyz
  sample_l_indexable(texture3d)(float,float,float,float) r11.x, r8.yzwy, t1.xyzw, s0, l(0.000000)
else
  lt r0.z, l(0.000000), cb2[10].w
  movc r11.x, r0.z, cb5[5].x, l(1.000000)
endif
mul r0.z, r9.x, cb1[127].w
mad r7.xyz, r7.xyzx, cb1[126].wwww, cb1[126].xyzx
mad r8.yzw, r0.zzzz, l(0.000000, 0.080000, 0.080000, 0.080000), cb1[127].xxyz
add r0.zw, -r10.xxxy, v4.xxxy
ftou r0.zw, r0.zzzw
if_z r0.x
  mov r4.w, cb4[3].x
  mov r6.w, cb4[3].y
  mov r7.w, cb4[3].z
  mov r10.xyz, cb4[1].zxyz
  mov r10.w, cb4[2].x
else
  mov r4.w, cb4[43].x
  mov r6.w, cb4[43].y
  mov r7.w, cb4[43].z
  mov r10.xyz, cb4[41].zxyz
  mov r10.w, cb4[42].x
endif
mad r4.w, v4.w, r4.w, r6.w
log r4.w, r4.w
mul r4.w, r7.w, r4.w
max r4.w, r4.w, l(0.000000)
ftou r4.w, r4.w
iadd r6.w, r10.x, l(-1)
umin r4.w, r4.w, r6.w
ushr r0.zw, r0.zzzw, r10.wwww
imad r0.w, r4.w, r10.z, r0.w
imad r0.z, r0.w, r10.y, r0.z
if_z r0.x
  mov r0.w, cb4[0].z
  mov r4.w, cb4[6].x
  mov r6.w, cb4[6].z
  mov r7.w, cb4[6].w
  mov r10.xyz, cb4[5].xyzx
  mov r12.xyz, cb4[4].xyzx
else
  mov r0.w, cb4[40].z
  mov r4.w, cb4[46].x
  mov r6.w, cb4[46].z
  mov r7.w, cb4[46].w
  mov r10.xyz, cb4[45].xyzx
  mov r12.xyz, cb4[44].xyzx
endif
if_nz r0.w
  and r13.xyzw, r4.wwww, l(255, 2, 4, 8)
  movc r13.xyzw, r13.xyzw, l(1,1.000000,1.000000,1.000000), l(0,0,0,0)
  if_nz cb4[7].x
    mov r0.w, cb4[7].x
    mov r10.w, l(0)
    loop
      uge r12.w, r10.w, cb4[7].x
      breakc_nz r12.w
      dp4 r12.w, cb4[8].xyzw, icb[r10.w + 0].xyzw
      lt r12.w, v4.w, r12.w
      if_nz r12.w
        mov r0.w, r10.w
        break
      endif
      iadd r10.w, r10.w, l(1)
    endloop
    ult r10.w, r0.w, cb4[7].x
    if_nz r10.w
      ishl r10.w, r0.w, l(2)
      mul r14.xyzw, r5.yyyy, cb4[r10.w + 10].xyzw
      mad r14.xyzw, r5.xxxx, cb4[r10.w + 9].xyzw, r14.xyzw
      mad r14.xyzw, r5.zzzz, cb4[r10.w + 11].xyzw, r14.xyzw
      add r14.xyzw, r14.xyzw, cb4[r10.w + 12].xyzw
      div r15.xyzw, r14.xyxy, r14.wwww
      ge r14.xy, r15.zwzz, cb4[r0.w + 25].xyxx
      ge r16.xy, cb4[r0.w + 25].zwzz, r15.zwzz
      and r14.xy, r14.xyxx, r16.xyxx
      and r0.w, r14.y, r14.x
      if_nz r0.w
        mad r15.xyzw, r15.xyzw, cb4[29].xyxy, l(-0.500000, -0.500000, -0.500000, -0.500000)
        frc r14.xy, r15.zwzz
        round_ni r15.xyzw, r15.xyzw
        add r16.xyzw, r15.zwzw, l(0.500000, 1.500000, 0.500000, 0.500000)
        mul r16.xyzw, r16.xyzw, cb4[29].zwzw
        sample_l_indexable(texture2d)(float,float,float,float) r17.x, r16.xyxx, t2.xyzw, s1, l(0.000000)
        add r15.xyzw, r15.xyzw, l(1.500000, 1.500000, 1.500000, 0.500000)
        mul r15.xyzw, r15.xyzw, cb4[29].zwzw
        sample_l_indexable(texture2d)(float,float,float,float) r17.y, r15.xyxx, t2.yxzw, s1, l(0.000000)
        sample_l_indexable(texture2d)(float,float,float,float) r17.z, r15.zwzz, t2.yzxw, s1, l(0.000000)
        sample_l_indexable(texture2d)(float,float,float,float) r17.w, r16.zwzz, t2.yzwx, s1, l(0.000000)
        add r15.xyzw, -r14.zzzz, r17.xyzw
        mad_sat r15.xyzw, r15.xyzw, l(4000.000000, 4000.000000, 4000.000000, 4000.000000), l(1.000000, 1.000000, 1.000000, 1.000000)
        add r14.zw, -r15.wwwx, r15.zzzy
        mad r14.xz, r14.xxxx, r14.zzwz, r15.wwxw
        add r0.w, -r14.x, r14.z
        mad r0.w, r14.y, r0.w, r14.x
      else
        mov r0.w, l(1.000000)
      endif
    else
      mov r0.w, l(1.000000)
    endif
  else
    mov r0.w, l(1.000000)
  endif
  if_nz r13.x
    mov r13.x, l(1.000000)
    dp4 r10.w, l(1.000000, 1.000000, 1.000000, 1.000000), r13.xyzw
    add r12.w, r10.w, l(-1.000000)
    mad r10.w, r10.w, r12.w, l(1.000000)
    mad_sat r6.w, v4.w, r6.w, r7.w
    mul r6.w, r6.w, r6.w
    add r7.w, -r0.w, r10.w
    mad r13.x, r6.w, r7.w, r0.w
    min r13.y, r13.x, l(1.000000)
  else
    mov r13.xy, l(1.000000,1.000000,0,0)
  endif
  add r0.w, r13.y, r13.x
  lt r0.w, l(0.000000), r0.w
  if_nz r0.w
    dp3 r0.w, r12.xyzx, r12.xyzx
    rsq r0.w, r0.w
    mul r12.xyz, r0.wwww, r12.xyzx
    dp3 r0.w, r6.xyzx, r12.xyzx
    mov_sat r6.w, r0.w
    max r7.w, r0.y, l(0.020000)
    dp3 r10.w, r6.xyzx, r4.xyzx
    dp3 r12.x, r4.xyzx, r12.xyzx
    mad r12.y, r12.x, l(2.000000), l(2.000000)
    rsq r12.y, r12.y
    add r0.w, r0.w, r10.w
    mul_sat r0.w, r12.y, r0.w
    mad_sat r12.x, r12.y, r12.x, r12.y
    add r10.w, |r10.w|, l(0.000010)
    min r10.w, r10.w, l(1.000000)
    mul r12.yzw, r6.wwww, r7.xxyz
    mul r13.y, r7.w, r7.w
    mul r13.z, r13.y, r13.y
    mad r13.w, r0.w, r13.z, -r0.w
    mad r0.w, r13.w, r0.w, l(1.000000)
    mul r0.w, r0.w, r0.w
    mul r0.w, r0.w, l(3.14159274)
    div r0.w, r13.z, r0.w
    mad r7.w, -r7.w, r7.w, l(1.000000)
    mad r13.z, r10.w, r7.w, r13.y
    mad r7.w, r6.w, r7.w, r13.y
    mul r7.w, r7.w, r10.w
    mad r7.w, r6.w, r13.z, r7.w
    rcp r7.w, r7.w
    mul r0.w, r0.w, r7.w
    add r7.w, -r12.x, l(1.000000)
    mul r10.w, r7.w, r7.w
    mul r10.w, r10.w, r10.w
    mul r12.x, r7.w, r10.w
    mul_sat r13.y, r8.z, l(50.000000)
    mad r7.w, -r10.w, r7.w, l(1.000000)
    mul r14.xyz, r8.yzwy, r7.wwww
    mad r13.yzw, r13.yyyy, r12.xxxx, r14.xxyz
    mul r0.w, r0.w, l(0.500000)
    mul r13.yzw, r13.yyzw, r0.wwww
    mul r13.yzw, r6.wwww, r13.yyzw
    mad r12.xyz, r12.yzwy, l(0.318309873, 0.318309873, 0.318309873, 0.000000), r13.yzwy
    mul r10.xyz, r10.xyzx, r13.xxxx
    mul r10.xyz, r10.xyzx, r12.xyzx
  else
    mov r10.xyz, l(0,0,0,0)
  endif
  ushr r0.w, r4.w, l(8)
  and r0.w, r0.w, cb2[16].w
  movc r10.xyz, r0.wwww, r10.xyzx, l(0,0,0,0)
  mov r11.x, l(1.000000)
else
  mov r10.xyz, l(0,0,0,0)
endif
if_z r0.x
  ishl r0.w, r0.z, l(1)
  ld_indexable(buffer)(uint,uint,uint,uint) r0.w, r0.wwww, t4.yzwx
  umin r0.w, r0.w, cb4[0].x
  bfi r4.w, l(31), l(1), r0.z, l(1)
  ld_indexable(buffer)(uint,uint,uint,uint) r4.w, r4.wwww, t4.yzwx
else
  ishl r6.w, r0.z, l(1)
  ld_indexable(buffer)(uint,uint,uint,uint) r6.w, r6.wwww, t7.yzwx
  umin r0.w, r6.w, cb4[40].x
  bfi r0.z, l(31), l(1), r0.z, l(1)
  ld_indexable(buffer)(uint,uint,uint,uint) r4.w, r0.zzzz, t7.yzwx
endif
movc r0.z, r0.x, cb4[40].x, cb4[0].x
umin r0.z, r0.z, r0.w
dp3 r0.w, -r4.xyzx, r6.xyzx
add r0.w, r0.w, r0.w
mad r12.xyz, r6.xyzx, -r0.wwww, -r4.xyzx
max r0.w, r0.y, l(0.020000)
mul r6.w, r0.w, r0.w
mad r0.w, -r0.w, r0.w, l(1.000000)
dp3 r7.w, r6.xyzx, r4.xyzx
add r10.w, r7.w, r7.w
mad r12.w, r10.w, r7.w, l(-1.000000)
add r13.x, |r7.w|, l(0.000010)
min r13.x, r13.x, l(1.000000)
mul r13.yzw, r7.xxyz, l(0.000000, 0.318309873, 0.318309873, 0.318309873)
mul r14.x, r6.w, r6.w
mul r14.y, r8.z, l(50.000000)
mov_sat r14.y, r14.y
mov r11.yw, l(0,1.000000,0,1.000000)
mov r15.xyz, r10.xyzx
mov r14.z, l(0)
loop
  uge r14.w, r14.z, r0.z
  breakc_nz r14.w
  iadd r14.w, r4.w, r14.z
  if_z r0.x
    ld_indexable(buffer)(uint,uint,uint,uint) r15.w, r14.wwww, t5.yzwx
    imul null, r16.x, r15.w, l(5)
    ld_indexable(buffer)(float,float,float,float) r16.xyzw, r16.xxxx, t3.xyzw
    imad r17.xyzw, r15.wwww, l(5, 5, 5, 5), l(1, 2, 3, 4)
    ld_indexable(buffer)(float,float,float,float) r18.xyzw, r17.xxxx, t3.xyzw
    ld_indexable(buffer)(float,float,float,float) r19.xyzw, r17.yyyy, t3.wxyz
    ld_indexable(buffer)(float,float,float,float) r20.xyzw, r17.zzzz, t3.xyzw
    ld_indexable(buffer)(float,float,float,float) r17.xyzw, r17.wwww, t3.wxyz
  else
    ld_indexable(buffer)(uint,uint,uint,uint) r14.w, r14.wwww, t8.yzwx
    imul null, r15.w, r14.w, l(5)
    ld_indexable(buffer)(float,float,float,float) r16.xyzw, r15.wwww, t6.xyzw
    imad r21.xyzw, r14.wwww, l(5, 5, 5, 5), l(1, 2, 3, 4)
    ld_indexable(buffer)(float,float,float,float) r18.xyzw, r21.xxxx, t6.xyzw
    ld_indexable(buffer)(float,float,float,float) r19.xyzw, r21.yyyy, t6.wxyz
    ld_indexable(buffer)(float,float,float,float) r20.xyzw, r21.zzzz, t6.xyzw
    ld_indexable(buffer)(float,float,float,float) r17.xyzw, r21.wwww, t6.wxyz
  endif
  eq r14.w, r18.w, l(0.000000)
  lt r15.w, l(-2.000000), r20.x
  add r16.xyz, -r5.xyzx, r16.xyzx
  dp3 r21.x, r16.xyzx, r16.xyzx
  rsq r21.y, r21.x
  mul r21.yzw, r16.xxyz, r21.yyyy
  mul r22.x, r16.w, r16.w
  mul r21.x, r21.x, r22.x
  mad r21.x, -r21.x, r21.x, l(1.000000)
  max r21.x, r21.x, l(0.000000)
  mul r21.x, r21.x, r21.x
  mul r22.xyz, r16.wwww, r16.xyzx
  dp3 r16.w, r22.xyzx, r22.xyzx
  min r16.w, r16.w, l(1.000000)
  add r16.w, -r16.w, l(1.000000)
  log r16.w, r16.w
  mul r16.w, r16.w, r18.w
  exp r16.w, r16.w
  movc r16.w, r14.w, r21.x, r16.w
  dp3 r18.w, r21.yzwy, r19.yzwy
  add r18.w, -r20.x, r18.w
  mul_sat r18.w, r20.y, r18.w
  mul r18.w, r18.w, r18.w
  mul r18.w, r16.w, r18.w
  movc r15.w, r15.w, r18.w, r16.w
  lt r16.w, l(0.000000), r15.w
  if_nz r16.w
    and r16.w, r19.x, l(255)
    movc r16.w, r16.w, l(1), l(0)
    if_nz r16.w
      and r21.xyzw, r19.xxxx, l(1, 2, 4, 8)
      movc r21.xyzw, r21.xyzw, l(1.000000,1.000000,1.000000,1.000000), l(0,0,0,0)
      ushr r16.w, r19.x, l(4)
      ubfe r18.w, l(1), l(4), r19.x
      movc r22.x, r18.w, l(1.000000), l(0)
      and r19.yzw, r16.wwww, l(0, 2, 4, 8)
      movc r22.yzw, r19.yyzw, l(0,1.000000,1.000000,1.000000), l(0,0,0,0)
      dp4 r16.w, r22.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
      dp4 r18.w, r21.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
      dp4 r19.y, r11.xyyy, r21.xyzw
      add r19.y, r19.y, l(-1.000000)
      mad r18.w, r18.w, r19.y, l(1.000000)
      mul r19.yz, r16.wwww, r18.wwww
    else
      mov r19.yz, l(0,1.000000,1.000000,0)
    endif
    add r16.w, r19.z, r19.y
    lt r16.w, l(0.000000), r16.w
    if_nz r16.w
      f16tof32 r16.w, r20.w
      mul r18.w, r16.w, l(0.500000)
      mad r20.xyw, -r18.wwww, r17.yzyw, r16.xyxz
      mad r16.xyz, r18.wwww, r17.yzwy, r16.xyzx
      lt r17.y, l(0.000000), r16.w
      if_nz r17.y
        dp3 r17.z, r20.xywx, r20.xywx
        dp3 r17.w, r16.xyzx, r16.xyzx
        rsq r17.z, r17.z
        rsq r17.w, r17.w
        mul r18.w, r17.w, r17.z
        dp3 r19.z, r20.xywx, r16.xyzx
        mul r19.z, r18.w, r19.z
        mad r19.w, r19.z, l(0.500000), r18.w
        add r19.w, r19.w, l(0.500000)
        div r21.y, r18.w, r19.w
        dp3 r18.w, r6.xyzx, r20.xywx
        dp3 r19.w, r6.xyzx, r16.xyzx
        mul r17.w, r17.w, r19.w
        mad r17.z, r18.w, r17.z, r17.w
        mul r21.x, r17.z, l(0.500000)
      else
        dp3 r17.z, r20.xywx, r20.xywx
        add r17.w, r17.z, l(1.000000)
        rcp r21.y, r17.w
        rsq r17.z, r17.z
        mul r22.xyz, r17.zzzz, r20.xywx
        dp3 r21.x, r6.xyzx, r22.xyzx
        mov r19.z, l(1.000000)
      endif
      lt r17.z, l(0.000000), r20.z
      mul r17.w, r20.z, r20.z
      mul_sat r17.w, r21.y, r17.w
      sqrt r17.w, r17.w
      lt r18.w, r21.x, r17.w
      max r19.w, -r17.w, r21.x
      add r19.w, r17.w, r19.w
      mul r19.w, r19.w, r19.w
      mul r17.w, r17.w, l(4.000000)
      div r17.w, r19.w, r17.w
      movc r17.w, r18.w, r17.w, r21.x
      movc_sat r17.z, r17.z, r17.w, r21.x
      movc r14.w, r14.w, r21.y, l(1.000000)
      add r16.xyz, -r20.xywx, r16.xyzx
      dp3 r17.w, r12.xyzx, r16.xyzx
      mad r21.xyz, r17.wwww, r12.xyzx, -r16.xyzx
      dp3 r18.w, r20.xywx, r21.xyzx
      mul r17.w, r17.w, r17.w
      mad r16.w, r16.w, r16.w, -r17.w
      div_sat r16.w, r18.w, r16.w
      mad r16.xyz, r16.wwww, r16.xyzx, r20.xywx
      movc r16.xyz, r17.yyyy, r16.xyzx, r20.xywx
      dp3 r16.w, r16.xyzx, r16.xyzx
      rsq r16.w, r16.w
      mul r16.xyz, r16.wwww, r16.xyzx
      mul r17.y, r16.w, r20.z
      mul_sat r17.y, r0.w, r17.y
      mul_sat r16.w, r16.w, r17.x
      dp3 r17.x, r6.xyzx, r16.xyzx
      dp3 r16.x, r4.xyzx, r16.xyzx
      mad r16.y, r16.x, l(2.000000), l(2.000000)
      rsq r16.y, r16.y
      add r16.z, r7.w, r17.x
      mul_sat r16.z, r16.y, r16.z
      mad_sat r16.y, r16.y, r16.x, r16.y
      lt r17.w, l(0.000000), r17.y
      if_nz r17.w
        mad r18.w, -r17.y, r17.y, l(1.000000)
        sqrt r18.w, r18.w
        dp2 r19.w, r7.wwww, r17.xxxx
        add r20.x, -r16.x, r19.w
        ge r20.y, r20.x, r18.w
        if_nz r20.y
          mov r16.z, l(1.000000)
          mov r16.y, |r7.w|
        else
          mad r20.y, -r20.x, r20.x, l(1.000000)
          rsq r20.y, r20.y
          mul r20.y, r17.y, r20.y
          mad r20.z, -r20.x, r17.x, r7.w
          mad r20.x, -r20.x, r16.x, r12.w
          mul r20.xw, r20.xxxz, r20.yyyy
          mul r21.x, r17.x, r17.x
          mad r21.x, -r7.w, r7.w, -r21.x
          add r21.x, r21.x, l(1.000000)
          mad r21.x, -r16.x, r16.x, r21.x
          mad_sat r19.w, r19.w, r16.x, r21.x
          sqrt r19.w, r19.w
          mul r19.w, r19.w, r20.y
          mul r21.x, r7.w, r19.w
          add r21.y, r21.x, r21.x
          mad r21.z, r17.x, r18.w, r7.w
          mad r20.y, r20.y, r20.z, r21.z
          mad r20.z, r16.x, r18.w, r20.x
          add r20.z, r20.z, l(1.000000)
          mul r21.w, r19.w, r20.z
          mul r22.x, r20.z, r20.y
          mul r22.y, r20.y, r21.y
          mul r21.x, r21.x, r20.y
          mul r21.x, r21.x, l(0.500000)
          mad r21.x, r21.w, l(-0.500000), r21.x
          mul r21.x, r21.x, r22.x
          mad r22.z, -r21.w, l(2.000000), r22.y
          mul r22.y, r22.z, r22.y
          mad r21.w, r21.w, r21.w, r22.y
          mul r22.y, r20.z, r20.z
          mad r20.z, r16.x, r18.w, r20.z
          mad r20.z, r20.z, l(-0.500000), l(-0.500000)
          mul r20.z, r20.z, r22.x
          mad r20.z, r21.z, r22.y, r20.z
          mad r20.y, r20.y, r20.z, r21.w
          add r20.z, r21.x, r21.x
          mul r21.z, r21.x, r21.x
          mad r21.z, r20.y, r20.y, r21.z
          div r20.z, r20.z, r21.z
          mul r20.y, r20.y, r20.z
          mad r20.z, -r20.z, r21.x, l(1.000000)
          mul r19.w, r19.w, r20.y
          mad r19.w, r20.z, r20.w, r19.w
          mul r20.y, r21.y, r20.y
          mad r20.x, r20.z, r20.x, r20.y
          mad r17.x, r17.x, r18.w, r19.w
          mad r16.x, r16.x, r18.w, r20.x
          mad r18.w, r16.x, l(2.000000), l(2.000000)
          rsq r18.w, r18.w
          add r17.x, r7.w, r17.x
          mul_sat r16.z, r18.w, r17.x
          mad_sat r16.y, r18.w, r16.x, r18.w
        endif
      endif
      mul r14.w, r17.z, r14.w
      lt r16.x, l(0.000000), r16.w
      mul r16.w, r16.w, r16.w
      mad r17.x, r16.y, l(3.600000), l(0.400000)
      div r16.w, r16.w, r17.x
      mad r16.w, r6.w, r6.w, r16.w
      min r16.w, r16.w, l(1.000000)
      movc r11.z, r16.x, r16.w, r14.x
      mul r16.x, r17.y, l(0.250000)
      ishr r16.w, r11.z, l(1)
      iadd r16.w, r16.w, l(0x1fbd1df5)
      mad r16.w, r16.w, l(3.000000), r17.y
      mul r16.x, r16.w, r16.x
      add r16.w, r16.y, l(0.001000)
      div r16.x, r16.x, r16.w
      add r17.x, r11.z, r16.x
      div r17.y, r11.z, r17.x
      movc r17.xy, r17.wwww, r17.xyxx, r11.zwzz
      lt r16.x, r19.z, l(1.000000)
      add r17.w, -r19.z, l(1.000100)
      add r18.w, r19.z, l(1.000000)
      div r17.w, r17.w, r18.w
      sqrt r17.w, r17.w
      mul r18.w, r17.w, l(0.250000)
      ishr r19.z, r17.x, l(1)
      iadd r19.z, r19.z, l(0x1fbd1df5)
      mad r17.w, r19.z, l(3.000000), r17.w
      mul r17.w, r17.w, r18.w
      div r16.w, r17.w, r16.w
      add r16.w, r16.w, r17.x
      div r16.w, r17.x, r16.w
      sqrt r16.w, r16.w
      mul r16.w, r16.w, r17.y
      movc r16.x, r16.x, r16.w, r17.y
      mad r16.w, r16.z, r11.z, -r16.z
      mad r16.z, r16.w, r16.z, l(1.000000)
      mul r16.z, r16.z, r16.z
      mul r16.z, r16.z, l(3.14159274)
      div r16.z, r11.z, r16.z
      mul r16.x, r16.x, r16.z
      sqrt r11.z, r11.z
      add r16.z, -r11.z, l(1.000000)
      mad r16.w, r13.x, r16.z, r11.z
      mad r11.z, r17.z, r16.z, r11.z
      mul r11.z, r11.z, r13.x
      mad r11.z, r17.z, r16.w, r11.z
      rcp r11.z, r11.z
      mul r11.z, r11.z, r16.x
      add r16.x, -r16.y, l(1.000000)
      mul r16.y, r16.x, r16.x
      mul r16.y, r16.y, r16.y
      mul r16.z, r16.x, r16.y
      mad r16.x, -r16.y, r16.x, l(1.000000)
      mul r16.xyw, r8.yzyw, r16.xxxx
      mad r16.xyz, r14.yyyy, r16.zzzz, r16.xywx
      mul r11.z, r11.z, l(0.500000)
      mul r16.xyz, r16.xyzx, r11.zzzz
      mul r16.xyz, r14.wwww, r16.xyzx
      mad r16.xyz, r14.wwww, r13.yzwy, r16.xyzx
      mul r17.xyz, r15.wwww, r18.xyzx
      mul r17.xyz, r19.yyyy, r17.xyzx
      mul r16.xyz, r16.xyzx, r17.xyzx
    else
      mov r16.xyz, l(0,0,0,0)
    endif
  else
    mov r16.xyz, l(0,0,0,0)
  endif
  ushr r11.z, r19.x, l(8)
  and r11.z, r11.z, cb2[16].w
  add r16.xyz, r15.xyzx, r16.xyzx
  movc r15.xyz, r11.zzzz, r16.xyzx, r15.xyzx
  iadd r14.z, r14.z, l(1)
endloop
mad r4.xyz, r10.wwww, r6.xyzx, -r4.xyzx
mov_sat r7.w, r7.w
log r0.x, r0.y
mad r0.x, -r0.x, l(1.200000), l(1.000000)
add r0.z, cb1[163].z, l(-1.000000)
add r0.x, -r0.x, r0.z
itof r4.w, cb0[28].x
sample_l_indexable(texturecubearray)(float,float,float,float) r0.xzw, r4.xyzw, t9.xwyz, s2, r0.x
mul r0.xzw, r0.xxzw, cb0[31].xxxx
mul r0.xzw, r0.xxzw, cb1[146].xxyz
mad_sat r4.x, r0.y, cb1[165].x, cb1[165].y
mad r4.y, r4.x, l(-2.000000), l(3.000000)
mul r4.x, r4.x, r4.x
mul r4.x, r4.x, r4.y
min r4.y, cb1[165].z, l(0.000000)
add r4.y, r4.y, l(-1.000000)
mad r4.x, r4.x, r4.y, l(1.000000)
mul r0.xzw, r0.xxzw, r4.xxxx
mad r0.xzw, r8.xxxx, -r0.xxzw, r0.xxzw
mad r4.xyzw, r0.yyyy, l(-1.000000, -0.027500, -0.572000, 0.022000), l(1.000000, 0.042500, 1.040000, -0.040000)
mul r0.y, r4.x, r4.x
mul r6.x, r7.w, l(-9.280000)
exp r6.x, r6.x
min r0.y, r0.y, r6.x
mad r0.y, r0.y, r4.x, r4.y
mad r4.xy, r0.yyyy, l(-1.040000, 1.040000, 0.000000, 0.000000), r4.zwzz
mul r0.y, r14.y, r4.y
mad r4.xyz, r8.yzwy, r4.xxxx, r0.yyyy
mul r0.xyz, r0.xzwx, r4.xyzx
mad r4.xyz, r8.yzwy, l(2.040400, 2.040400, 2.040400, 0.000000), l(-0.332400, -0.332400, -0.332400, 0.000000)
mad r4.xyz, r8.yzwy, l(-4.795100, -4.795100, -4.795100, 0.000000), r4.xyzx
mad r4.xyz, r8.yzwy, l(2.755200, 2.755200, 2.755200, 0.000000), r4.xyzx
add r4.xyz, r4.xyzx, l(1.332000, 1.332000, 1.332000, 0.000000)
max r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r0.xyz, r0.xyzx, r4.xyzx, r15.xyzx
lt r0.w, l(0.000000), cb4[91].w
if_nz r0.w
  mov r5.w, l(1.000000)
  dp4 r1.x, r5.xyzw, r1.xyzw
  dp4 r1.y, r5.xyzw, r2.xyzw
  dp4 r0.w, r5.xyzw, r3.xyzw
  div r1.xy, r1.xyxx, r0.wwww
  mad r1.xy, r1.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  mad r0.w, r0.w, cb1[176].x, cb1[176].y
  log r0.w, r0.w
  mul r0.w, r0.w, cb1[176].z
  mul r1.z, r0.w, cb1[175].z
  sample_l_indexable(texture3d)(float,float,float,float) r1.xyzw, r1.xyzx, t10.xyzw, s0, l(0.000000)
  mul r2.x, r1.w, v3.w
  mad r1.xyz, v3.xyzx, r1.wwww, r1.xyzx
else
  mov r1.xyz, v3.xyzx
  mov r2.x, v3.w
endif
mad r2.yzw, r8.yyzw, l(0.000000, 0.450000, 0.450000, 0.450000), r7.xxyz
add r2.yzw, -r0.xxyz, r2.yyzw
mad r0.xyz, cb1[134].zzzz, r2.yzwy, r0.xyzx
max r9.xyz, cb6[2].xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r0.w, l(0.000000), cb1[130].x
if_nz r0.w
  add r2.yzw, r5.xxyz, -cb2[5].xxyz
  add r3.xyz, cb2[11].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  lt r2.yzw, r3.xxyz, |r2.yyzw|
  or r0.w, r2.z, r2.y
  or r0.w, r2.w, r0.w
  dp3 r1.w, r5.xyzx, l(0.577000, 0.577000, 0.577000, 0.000000)
  mul r1.w, r1.w, l(0.002000)
  frc r1.w, r1.w
  lt r1.w, l(0.500000), r1.w
  movc r3.yzw, r1.wwww, l(0,0,1.000000,1.000000), l(0,1.000000,1.000000,0)
  mov r3.x, l(1.000000)
  movc r9.xyzw, r0.wwww, r3.yzwx, r9.xyzw
  mov o0.w, r9.w
else
  mov o0.w, r9.w
endif
add r0.xyz, r0.xyzx, r9.xyzx
mad o0.xyz, r0.xyzx, r2.xxxx, r1.xyzx
ret
// Approximately 0 instruction slots used
