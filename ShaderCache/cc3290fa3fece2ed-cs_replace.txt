// ---- Created with 3Dmigoto v1.3.16 on Thu Jul 18 00:44:59 2019
Buffer<float4> t0 : register(t0);

cbuffer cb2 : register(b2)
{
  float4 cb2[4];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[341];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[123];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main)
{
// Needs manual fix for instruction:
// unknown dcl_: dcl_uav_typed_buffer (uint,uint,uint,uint) u0
// Needs manual fix for instruction:
// unknown dcl_: dcl_uav_typed_buffer (uint,uint,uint,uint) u1
// Needs manual fix for instruction:
// unknown dcl_: dcl_uav_typed_buffer (uint,uint,uint,uint) u2
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10;
  uint4 bitmask, uiDest;
  float4 fDest;

// Needs manual fix for instruction:
// unknown dcl_: dcl_thread_group 4, 4, 4
  r0.xyz = cmp((uint3)vThreadID.xyz < asuint(cb2[1].xyz));
  r0.x = r0.y ? r0.x : 0;
  r0.x = r0.z ? r0.x : 0;
  if (r0.x != 0) {
    r0.x = mad((int)vThreadID.z, asint(cb2[1].y), (int)vThreadID.y);
    r0.x = mad((int)r0.x, asint(cb2[1].x), (int)vThreadID.x);
    r0.y = 1 << asint(cb2[2].x);
    r0.y = (int)r0.y;
    r0.yz = cb0[122].zw * r0.yy;
    r0.yz = float2(2,-2) * r0.yz;
    r1.xyz = (uint3)vThreadID.xyz;
    r1.xy = r1.xy * r0.yz + float2(-1,1);
    r2.xyz = (int3)vThreadID.xyz + int3(1,1,1);
    r2.xyw = (uint3)r2.xyz;
    r0.yz = r2.xy * r0.yz + float2(-1,1);
    r0.w = r1.z / cb2[3].z;
    r0.w = exp2(r0.w);
    r0.w = -cb2[3].y + r0.w;
    r0.w = r0.w / cb2[3].x;
    r1.z = cmp((int)vThreadID.z == asint(cb2[1].z));
    r0.w = r1.z ? 2000000 : r0.w;
    r3.z = vThreadID.z ? r0.w : 0;
    r0.w = r2.w / cb2[3].z;
    r0.w = exp2(r0.w);
    r0.w = -cb2[3].y + r0.w;
    r0.w = r0.w / cb2[3].x;
    r1.z = cmp((int)r2.z == asint(cb2[1].z));
    r2.z = r1.z ? 2000000 : r0.w;
    r0.w = cmp(cb0[27].w < 1);
    r1.z = cb0[57].w + r3.z;
    r1.z = cb0[57].z * r1.z;
    r1.z = 1 / r1.z;
    r1.w = r3.z * cb0[26].z + cb0[27].z;
    r1.z = r0.w ? r1.z : r1.w;
    r4.xyz = cb0[33].xyw * r1.yyy;
    r5.xyz = r1.xxx * cb0[32].xyw + r4.xyz;
    r6.xyz = r1.zzz * cb0[34].xyw + r5.xyz;
    r6.xyz = cb0[35].xyw + r6.xyz;
    r7.xyz = cb0[33].xyw * r0.zzz;
    r8.xyz = r0.yyy * cb0[32].xyw + r7.xyz;
    r9.xyz = r1.zzz * cb0[34].xyw + r8.xyz;
    r9.xyz = cb0[35].xyw + r9.xyz;
    r1.xyw = r1.xxx * cb0[32].xyw + r7.xyz;
    r7.xyz = r1.zzz * cb0[34].xyw + r1.xyw;
    r7.xyz = cb0[35].xyw + r7.xyz;
    r4.xyz = r0.yyy * cb0[32].xyw + r4.xyz;
    r10.xyz = r1.zzz * cb0[34].xyw + r4.xyz;
    r10.xyz = cb0[35].xyw + r10.xyz;
    r0.y = cb0[57].w + r2.z;
    r0.y = cb0[57].z * r0.y;
    r0.y = 1 / r0.y;
    r0.z = r2.z * cb0[26].z + cb0[27].z;
    r0.y = r0.w ? r0.y : r0.z;
    r5.xyz = r0.yyy * cb0[34].xyw + r5.xyz;
    r5.xyz = cb0[35].xyw + r5.xyz;
    r8.xyz = r0.yyy * cb0[34].xyw + r8.xyz;
    r8.xyz = cb0[35].xyw + r8.xyz;
    r1.xyz = r0.yyy * cb0[34].xyw + r1.xyw;
    r1.xyz = cb0[35].xyw + r1.xyz;
    r0.yzw = r0.yyy * cb0[34].xyw + r4.xyz;
    r0.yzw = cb0[35].xyw + r0.yzw;
    r4.xy = r6.xy / r6.zz;
    r4.zw = r9.xy / r9.zz;
    r6.xy = r7.xy / r7.zz;
    r6.zw = r10.xy / r10.zz;
    r5.xy = r5.xy / r5.zz;
    r5.zw = r8.xy / r8.zz;
    r1.xy = r1.xy / r1.zz;
    r0.yz = r0.yz / r0.ww;
    r1.zw = min(r4.xy, r4.zw);
    r1.zw = min(r1.zw, r6.xy);
    r1.zw = min(r1.zw, r6.zw);
    r1.zw = min(r1.zw, r5.xy);
    r1.zw = min(r1.zw, r5.zw);
    r1.zw = min(r1.zw, r1.xy);
    r3.xy = min(r1.zw, r0.yz);
    r1.zw = max(r4.xy, r4.zw);
    r1.zw = max(r1.zw, r6.xy);
    r1.zw = max(r1.zw, r6.zw);
    r1.zw = max(r1.zw, r5.xy);
    r1.zw = max(r1.zw, r5.zw);
    r1.xy = max(r1.zw, r1.xy);
    r2.xy = max(r1.xy, r0.yz);
    r0.yzw = r3.xyz + r2.xyz;
    r1.xyz = float3(0.5,0.5,0.5) * r0.yzw;
    r2.xyz = -r0.yzw * float3(0.5,0.5,0.5) + r2.xyz;
    r3.xyz = cb0[13].xyz * r1.yyy;
    r1.xyw = r1.xxx * cb0[12].xyz + r3.xyz;
    r1.xyz = r1.zzz * cb0[14].xyz + r1.xyw;
    r1.xyz = cb0[15].xyz + r1.xyz;
    r1.xyz = -cb0[62].xyz + r1.xyz;
    r1.w = dot(r2.xyz, r2.xyz);
    r1.w = sqrt(r1.w);
    r2.w = asint(cb2[0].w) * asint(cb2[1].w);
    r2.w = (uint)r2.w << 1;
    r3.x = 0;
    while (true) {
      r3.y = cmp((uint)r3.x >= asuint(cb2[0].x));
      if (r3.y != 0) break;
      r3.y = (int)r3.x * 5;
      r4.xyzw = t0.Load(r3.y).xyzw;
      r4.w = 1 / r4.w;
      r3.y = mad((int)r3.x, 5, 3);
      r3.y = t0.Load(r3.y).x;
      r3.z = cmp(-2 < r3.y);
      if (r3.z != 0) {
        r3.z = -r3.y * r3.y + 1;
        r3.w = mad((int)r3.x, 5, 2);
        r5.xyz = t0.Load(r3.w).xyz;
        r6.xyz = -r4.xyz + r1.xyz;
        r3.w = dot(r6.xyz, r6.xyz);
        r5.w = dot(r6.xyz, -r5.xyz);
        r3.w = -r5.w * r5.w + r3.w;
        r3.zw = sqrt(r3.zw);
        r6.x = r5.w * r3.z;
        r3.w = r3.y * r3.w + -r6.x;
        r3.w = cmp(r1.w < r3.w);
        r6.x = r4.w + r1.w;
        r6.x = cmp(r6.x < r5.w);
        r5.w = cmp(r5.w < -r1.w);
        r3.w = (int)r3.w | (int)r6.x;
        r3.w = (int)r5.w | (int)r3.w;
        r3.w = ~(int)r3.w;
        r5.w = cmp(r3.y < 0.707107008);
        r6.xyz = r5.xyz * r4.www;
        r6.xyz = -r6.xyz * r3.yyy + r4.xyz;
        r6.w = r4.w * r3.z;
        r3.y = r3.y + r3.y;
        r7.w = r4.w / r3.y;
        r7.xyz = -r5.xyz * r7.www + r4.xyz;
        r4.xyzw = r5.wwww ? r6.xyzw : r7.xyzw;
      } else {
        r3.w = -1;
      }
      r4.xyz = cb0[62].xyz + r4.xyz;
      r5.xyz = cb0[9].xyz * r4.yyy;
      r5.xyz = r4.xxx * cb0[8].xyz + r5.xyz;
      r4.xyz = r4.zzz * cb0[10].xyz + r5.xyz;
      r4.xyz = cb0[11].xyz + r4.xyz;
      r4.xyz = -r0.yzw * float3(0.5,0.5,0.5) + r4.xyz;
      r4.xyz = abs(r4.xyz) + -r2.xyz;
      r4.xyz = max(float3(0,0,0), r4.xyz);
      r3.y = dot(r4.xyz, r4.xyz);
      r3.z = r4.w * r4.w;
      r3.y = cmp(r3.y < r3.z);
      r3.y = r3.y ? r3.w : 0;
      if (r3.y != 0) {
        // Needs manual fix for instruction:
            imm_atomic_iadd r4.x, u0, l(0), l(1)
        InterlockedAdd(dest, imm_value, orig_value);
        r3.y = cmp((uint)r4.x < (uint)r2.w);
        if (r3.y != 0) {
          // Needs manual fix for instruction:
                imm_atomic_exch r5.x, u1, r0.x, r4.x
          InterlockedExchange(dest, imm_value, orig_value);
          r3.y = (uint)r4.x << 1;
        // No code for instruction (needs manual fix):
                store_uav_typed u2.xyzw, r3.yyyy, r3.xxxx
          bitmask.z = ((~(-1 << 31)) << 1) & 0xffffffff;  r3.z = (((uint)r4.x << 1) & bitmask.z) | ((uint)1 & ~bitmask.z);
        // No code for instruction (needs manual fix):
                store_uav_typed u2.xyzw, r3.zzzz, r5.xxxx
        }
      }
      r3.x = (int)r3.x + 1;
    }
    r0.x = (int)r0.x + asint(cb2[0].w);
    r1.x = 0;
    while (true) {
      r1.y = cmp((uint)r1.x >= asuint(cb2[0].y));
      if (r1.y != 0) break;
      r1.yzw = cb1[r1.x+0].xyz + cb0[62].xyz;
      r3.xyz = cb0[9].xyz * r1.zzz;
      r3.xyz = r1.yyy * cb0[8].xyz + r3.xyz;
      r1.yzw = r1.www * cb0[10].xyz + r3.xyz;
      r1.yzw = cb0[11].xyz + r1.yzw;
      r1.yzw = -r0.yzw * float3(0.5,0.5,0.5) + r1.yzw;
      r1.yzw = abs(r1.yzw) + -r2.xyz;
      r1.yzw = max(float3(0,0,0), r1.yzw);
      r1.y = dot(r1.yzw, r1.yzw);
      r1.z = cb1[r1.x+0].w * cb1[r1.x+0].w;
      r1.y = cmp(r1.y < r1.z);
      if (r1.y != 0) {
        // Needs manual fix for instruction:
            imm_atomic_iadd r3.x, u0, l(0), l(1)
        InterlockedAdd(dest, imm_value, orig_value);
        r1.y = cmp((uint)r3.x < (uint)r2.w);
        if (r1.y != 0) {
          // Needs manual fix for instruction:
                imm_atomic_exch r4.x, u1, r0.x, r3.x
          InterlockedExchange(dest, imm_value, orig_value);
          r1.y = (uint)r3.x << 1;
        // No code for instruction (needs manual fix):
                store_uav_typed u2.xyzw, r1.yyyy, r1.xxxx
          bitmask.z = ((~(-1 << 31)) << 1) & 0xffffffff;  r1.z = (((uint)r3.x << 1) & bitmask.z) | ((uint)1 & ~bitmask.z);
        // No code for instruction (needs manual fix):
                store_uav_typed u2.xyzw, r1.zzzz, r4.xxxx
        }
      }
      r1.x = (int)r1.x + 1;
    }
  }
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\marco\Desktop\3Dmigoto Fullbright for FNAF VR\ShaderCache\cc3290fa3fece2ed-cs_replace.txt(28,10): error X3000: syntax error: unexpected token ')'
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
