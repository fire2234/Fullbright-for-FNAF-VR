//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jul 18 00:46:48 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// ATTRIBUTE                0   xyzw        0     NONE   float   xyzw
// SV_VertexID              0   x           1   VERTID    uint   x
// SV_InstanceID            0   x           2   INSTID    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 6   xyzw        0     NONE   float   xyzw
// TEXCOORD                 8   xyzw        1     NONE   float   xyzw
// TEXCOORD                10   xyzw        2     NONE   float   xyzw
// TEXCOORD                11   xyzw        3     NONE   float   xyzw
// TEXCOORD                 0   xyzw        4     NONE   float   xyzw
// PACKED_EYE_INDEX         0   x           5     NONE    uint   x
// VS_To_DS_Position        0   xyzw        6     NONE   float   xyzw
// SV_ClipDistance          1   x           7  CLIPDST   float   x
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -1.000000, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 1.000000} }
dcl_constantbuffer cb0[8], immediateIndexed
dcl_constantbuffer cb1[164], immediateIndexed
dcl_constantbuffer cb2[5], immediateIndexed
dcl_constantbuffer cb3[164], immediateIndexed
dcl_constantbuffer cb4[1], immediateIndexed
dcl_resource_buffer (float,float,float,float) t0
dcl_resource_buffer (float,float,float,float) t1
dcl_input v0.xyzw
dcl_input_sgv v1.x, vertex_id
dcl_input_sgv v2.x, instance_id
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.x
dcl_output o6.xyzw
dcl_output_siv o7.x, clip_distance
dcl_temps 16
and r0.x, v2.x, l(1)
if_z r0.x
  mov r1.x, cb1[0].x
  mov r1.y, cb1[1].x
  mov r1.z, cb1[2].x
  mov r1.w, cb1[3].x
  mov r2.x, cb1[0].y
  mov r2.y, cb1[1].y
  mov r2.z, cb1[2].y
  mov r2.w, cb1[3].y
  mov r3.x, cb1[0].z
  mov r3.y, cb1[1].z
  mov r3.z, cb1[2].z
  mov r3.w, cb1[3].z
  mov r4.x, cb1[0].w
  mov r4.y, cb1[1].w
  mov r4.z, cb1[2].w
  mov r4.w, cb1[3].w
  mov r5.x, cb1[83].x
  mov r5.y, cb1[84].x
  mov r5.z, cb1[85].x
  mov r5.w, cb1[86].x
  mov r6.x, cb1[83].y
  mov r6.y, cb1[84].y
  mov r6.z, cb1[85].y
  mov r6.w, cb1[86].y
  mov r7.x, cb1[83].z
  mov r7.y, cb1[84].z
  mov r7.z, cb1[85].z
  mov r7.w, cb1[86].z
  mov r8.x, cb1[83].w
  mov r8.y, cb1[84].w
  mov r8.z, cb1[85].w
  mov r8.w, cb1[86].w
  mov r0.yzw, cb1[105].xxyz
  mov r9.x, cb1[163].y
  mov r9.yzw, cb1[62].xxyz
else
  mov r1.x, cb3[0].x
  mov r1.y, cb3[1].x
  mov r1.z, cb3[2].x
  mov r1.w, cb3[3].x
  mov r2.x, cb3[0].y
  mov r2.y, cb3[1].y
  mov r2.z, cb3[2].y
  mov r2.w, cb3[3].y
  mov r3.x, cb3[0].z
  mov r3.y, cb3[1].z
  mov r3.z, cb3[2].z
  mov r3.w, cb3[3].z
  mov r4.x, cb3[0].w
  mov r4.y, cb3[1].w
  mov r4.z, cb3[2].w
  mov r4.w, cb3[3].w
  mov r5.x, cb3[83].x
  mov r5.y, cb3[84].x
  mov r5.z, cb3[85].x
  mov r5.w, cb3[86].x
  mov r6.x, cb3[83].y
  mov r6.y, cb3[84].y
  mov r6.z, cb3[85].y
  mov r6.w, cb3[86].y
  mov r7.x, cb3[83].z
  mov r7.y, cb3[84].z
  mov r7.z, cb3[85].z
  mov r7.w, cb3[86].z
  mov r8.x, cb3[83].w
  mov r8.y, cb3[84].w
  mov r8.z, cb3[85].w
  mov r8.w, cb3[86].w
  mov r0.yzw, cb3[105].xxyz
  mov r9.x, cb3[163].y
  mov r9.yzw, cb3[62].xxyz
endif
iadd r10.x, v1.x, cb0[7].y
ishl r10.y, r10.x, l(1)
ld_indexable(buffer)(float,float,float,float) r10.yzw, r10.yyyy, t1.wxyz
bfi r11.x, l(31), l(1), r10.x, l(1)
ld_indexable(buffer)(float,float,float,float) r11.xyzw, r11.xxxx, t1.xyzw
mul r12.xyz, r10.yzwy, r11.yzxy
mad r10.yzw, r11.xxyz, r10.zzwy, -r12.xxyz
mul r10.yzw, r11.wwww, r10.yyzw
mul r12.xyz, r11.yzxy, r10.yzwy
mad r10.yzw, r10.wwyz, r11.zzxy, -r12.xxyz
mul r10.yzw, r11.wwww, r10.yyzw
mul r12.xyz, cb2[0].xyzx, cb2[4].xxxx
mul r13.xyz, cb2[1].xyzx, cb2[4].yyyy
mul r14.xyz, cb2[2].xyzx, cb2[4].zzzz
mul r15.xyz, r10.zzzz, r13.xyzx
mad r15.xyz, r10.yyyy, r12.xyzx, r15.xyzx
mad o2.xyz, r10.wwww, r14.xyzx, r15.xyzx
mul r10.yzw, r11.yyyy, r13.xxyz
mad r10.yzw, r11.xxxx, r12.xxyz, r10.yyzw
mad o3.xyz, r11.zzzz, r14.xyzx, r10.yzwy
mul o3.w, r11.w, cb2[4].w
mul r10.yzw, v0.yyyy, cb2[1].xxyz
mad r10.yzw, cb2[0].xxyz, v0.xxxx, r10.yyzw
mad r10.yzw, cb2[2].xxyz, v0.zzzz, r10.yyzw
add r9.yzw, r9.yyzw, cb2[3].xxyz
add r11.xyz, r9.yzwy, r10.yzwy
imul null, r9.y, r10.x, cb4[0].y
ld_indexable(buffer)(float,float,float,float) r9.yz, r9.yyyy, t0.zxyw
add r10.xyw, r0.yzyw, cb0[6].xyxz
mov r12.x, cb0[3].x
mov r12.y, cb0[4].x
mov r12.z, cb0[5].x
mov r12.w, r10.x
dp4 r12.x, v0.xyzw, r12.xyzw
mov r13.x, cb0[3].y
mov r13.y, cb0[4].y
mov r13.z, cb0[5].y
mov r13.w, r10.y
dp4 r12.y, v0.xyzw, r13.xyzw
mov r10.x, cb0[3].z
mov r10.y, cb0[4].z
mov r10.z, cb0[5].z
dp4 r12.z, v0.xyzw, r10.xyzw
mov r12.w, l(1.000000)
dp4 o1.x, r12.xyzw, r5.xyzw
dp4 o1.y, r12.xyzw, r6.xyzw
dp4 o1.z, r12.xyzw, r7.xyzw
dp4 o1.w, r12.xyzw, r8.xyzw
mov r11.w, l(1.000000)
dp4 o0.x, r11.xyzw, r1.xyzw
dp4 o0.y, r11.xyzw, r2.xyzw
dp4 o0.z, r11.xyzw, r3.xyzw
dp4 o0.w, r11.xyzw, r4.xyzw
if_nz cb0[0].x
  mov r1.x, icb[r0.x + 0].x
  mov r1.y, l(1.000000)
  dp2 o7.x, r11.xwxx, r1.xyxx
  mul r0.y, r9.x, l(0.500000)
  mad r0.z, -r9.x, l(0.500000), l(1.000000)
  mul r0.z, r0.z, icb[r0.x + 0].x
  mad r11.x, r11.x, r0.y, r0.z
else
  mov o7.x, l(0)
endif
movc r0.y, cb0[0].x, l(1), l(0)
imad o5.x, r0.y, l(0x80000000), r0.x
mov o2.w, l(0)
mov o4.xy, r9.yzyy
mov o4.zw, l(0,0,0,0)
mov o6.xyzw, r11.xyzw
ret
// Approximately 0 instruction slots used
